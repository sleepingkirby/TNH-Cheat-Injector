@echo off
REM The following variables are Base64 encoded strings for unrpyc and rpatool
REM Due to batch limitations on variable lengths, they need to be split into
REM multiple variables, and joined later using powershell.
REM --------------------------------------------------------------------------------
REM rpatool f2520ad - https://github.com/Shizmob/rpatool
REM --------------------------------------------------------------------------------
set rpatool1=IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IGNvZGVjcwppbXBvcnQgcGlja2xlCmltcG9ydCBlcnJubwppbXBvcnQgcmFuZG9tCnRyeToKICAgIGltcG9ydCBwaWNrbGU1IGFzIHBpY2tsZQpleGNlcHQ6CiAgICBpbXBvcnQgcGlja2xlCiAgICBpZiBzeXMudmVyc2lvbl9pbmZvIDwgKDMsIDgpOgogICAgICAgIHByaW50KCd3YXJuaW5nOiBwaWNrbGU1IG1vZHVsZSBjb3VsZCBub3QgYmUgbG9hZGVkIGFuZCBQeXRob24gdmVyc2lvbiBpcyA8IDMuOCwnLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcHJpbnQoJyAgICAgICAgIG5ld2VyIFJlblwnUHkgZ2FtZXMgbWF5IGZhaWwgdG8gdW5wYWNrIScsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvID49ICgzLCA1KToKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgIGlmIHRoaXMgb2NjdXJzLCBmaXggaXQgYnkgaW5zdGFsbGluZyBwaWNrbGU1OicsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgICAgICB7fSAtbSBwaXAgaW5zdGFsbCBwaWNrbGU1Jy5mb3JtYXQoc3lzLmV4ZWN1dGFibGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgIGlmIHRoaXMgb2NjdXJzLCBwbGVhc2UgdXBncmFkZSB0byBhIG5ld2VyIFB5dGhvbiAoPj0gMy41KS4nLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcHJpbnQoZmlsZT1zeXMuc3RkZXJyKQoKCmlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPj0gMzoKICAgIGRlZiBfdW5pY29kZSh0ZXh0KToKICAgICAgICByZXR1cm4gdGV4dAoKICAgIGRlZiBfcHJpbnRhYmxlKHRleHQpOgogICAgICAgIHJldHVybiB0ZXh0CgogICAgZGVmIF91bm1hbmdsZShkYXRhKToKICAgICAgICBpZiB0eXBlKGRhdGEpID09IGJ5dGVzOgogICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBkYXRhLmVuY29kZSgnbGF0aW4xJykKCiAgICBkZWYgX3VucGlja2xlKGRhdGEpOgogICAgICAgICMgU3BlY2lmeSBsYXRpbjEgZW5jb2RpbmcgdG8gcHJldmVudCByYXcgYnl0ZSB2YWx1ZXMgZnJvbSBjYXVzaW5nIGFuIEFTQ0lJIGRlY29kZSBlcnJvci4KICAgICAgICByZXR1cm4gcGlja2xlLmxvYWRzKGRhdGEsIGVuY29kaW5nPSdsYXRpbjEnKQplbGlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMjoKICAgIGRlZiBfdW5pY29kZSh0ZXh0KToKICAgICAgICBpZiBpc2luc3RhbmNlKHRleHQsIHVuaWNvZGUpOgogICAgICAgICAgICByZXR1cm4gdGV4dAogICAgICAgIHJldHVybiB0ZXh0LmRlY29kZSgndXRmLTgnKQoKICAgIGRlZiBfcHJpbnRhYmxlKHRleHQpOgogICAgICAgIHJldHVybiB0ZXh0LmVuY29kZSgndXRmLTgnKQoKICAgIGRlZiBfdW5tYW5nbGUoZGF0YSk6CiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBkZWYgX3VucGlja2xlKGRhdGEpOgogICAgICAgIHJldHVybiBwaWNrbGUubG9hZHMoZGF0YSkKCmNsYXNzIFJlblB5QXJjaGl2ZToKICAgIGZpbGUgPSBOb25lCiAgICBoYW5kbGUgPSBOb25lCgogICAgZmlsZXMgPSB7fQogICAgaW5kZXhlcyA9IHt9CgogICAgdmVyc2lvbiA9IE5vbmUKICAgIHBhZGxlbmd0aCA9IDAKICAgIGtleSA9IE5vbmUKICAgIHZlcmJvc2UgPSBGYWxzZQoKICAgIFJQQTJfTUFHSUMgPSAnUlBBLTIuMCAnCiAgICBSUEEzX01BR0lDID0gJ1JQQS0zLjAgJwogICAgUlBBM18yX01BR0lDID0gJ1JQQS0zLjIgJwoKICAgICMgRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG90aGVyd2lzZSBQeXRob24zLXBhY2tlZCBhcmNoaXZlcyB3b24ndCBiZSByZWFkIGJ5IFB5dGhvbjIKICAgIFBJQ0tMRV9QUk9UT0NPTCA9IDIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZmlsZSA9IE5vbmUsIHZlcnNpb24gPSAzLCBwYWRsZW5ndGggPSAwLCBrZXkgPSAweERFQURCRUVGLCB2ZXJib3NlID0gRmFsc2UpOgogICAgICAgIHNlbGYucGFkbGVuZ3RoID0gcGFkbGVuZ3RoCiAgICAgICAgc2VsZi5rZXkgPSBrZXkKICAgICAgICBzZWxmLnZlcmJvc2UgPSB2ZXJib3NlCgogICAgICAgIGlmIGZpbGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYubG9hZChmaWxlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudmVyc2lvbiA9IHZlcnNpb24KCiAgICBkZWYgX19kZWxfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLmhhbmRsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5oYW5kbGUuY2xvc2UoKQoKICAgICMgRGV0ZXJtaW5lIGFyY2hpdmUgdmVyc2lvbi4KICAgIGRlZiBnZXRfdmVyc2lvbihzZWxmKToKICAgICAgICBzZWxmLmhhbmRsZS5zZWVrKDApCiAgICAgICAgbWFnaWMgPSBzZWxmLmhhbmRsZS5yZWFkbGluZSgpLmRlY29kZSgndXRmLTgnKQoKICAgICAgICBpZiBtYWdpYy5zdGFydHN3aXRoKHNlbGYuUlBBM18yX01BR0lDKToKICAgICAgICAgICAgcmV0dXJuIDMuMgogICAgICAgIGVsaWYgbWFnaWMuc3RhcnRzd2l0aChzZWxmLlJQQTNfTUFHSUMpOgogICAgICAgICAgICByZXR1cm4gMwogICAgICAgIGVsaWYgbWFnaWMuc3RhcnRzd2l0aChzZWxmLlJQQTJfTUFHSUMpOgogICAgICAgICAgICByZXR1cm4gMgogICAgICAgIGVsaWYgc2VsZi5maWxlLmVuZHN3aXRoKCcucnBpJyk6CiAgICAgICAgICAgIHJldHVybiAxCgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3RoZSBnaXZlbiBmaWxlIGlzIG5vdCBhIHZhbGlkIFJlblwnUHkgYXJjaGl2ZSwgb3IgYW4gdW5zdXBwb3J0ZWQgdmVyc2lvbicpCgogICAgIyBFeHRyYWN0IGZpbGUgaW5kZXhlcyBmcm9tIG9wZW5lZCBhcmNoaXZlLgogICAgZGVmIGV4dHJhY3RfaW5kZXhlcyhzZWxmKToKICAgICAgICBzZWxmLmhhbmRsZS5zZWVrKDApCiAgICAgICAgaW5kZXhlcyA9IE5vbmUKCiAgICAgICAgaWYgc2VsZi52ZXJzaW9uIGluIFsyLCAzLCAzLjJdOgogICAgICAgICAgICAjIEZldGNoIG1ldGFkYXRhLgogICAgICAgICAgICBtZXRhZGF0YSA9IHNlbGYuaGFuZGxlLnJlYWRsaW5lKCkKICAgICAgICAgICAgdmFscyA9IG1ldGFkYXRhLnNwbGl0KCkKICAgICAgICAgICAgb2Zmc2V0ID0gaW50KHZhbHNbMV0sIDE2KQogICAgICAgICAgICBpZiBzZWxmLnZlcnNpb24gPT0gMzoKICAgICAgICAgICAgICAgIHNlbGYua2V5ID0gMAogICAgICAgICAgICAgICAgZm9yIHN1YmtleSBpbiB2YWxzWzI6XToKICAgICAgICAgICAgICAgICAgICBzZWxmLmtleSBePSBpbnQoc3Via2V5LCAxNikKICAgICAgICAgICAgZWxpZiBzZWxmLnZlcnNpb24gPT0gMy4yOgogICAgICAgICAgICAgICAgc2VsZi5rZXkgPSAwCiAgICAgICAgICAgICAgICBmb3Igc3Via2V5IGluIHZhbHNbMzpdOgogICAgICAgICAgICAgICAgICAgIHNlbGYua2V5IF49IGludChzdWJrZXksIDE2KQoKICAgICAgICAgICAgIyBMb2FkIGluIGluZGV4ZXMuCiAgICAgICAgICAgIHNlbGYuaGFuZGxlLnNlZWsob2Zmc2V0KQogICAgICAgICAgICBjb250ZW50cyA9IGNvZGVjcy5kZWNvZGUoc2VsZi5oYW5kbGUucmVhZCgpLCAnemxpYicpCiAgICAgICAgICAgIGluZGV4ZXMgPSBfdW5waWNrbGUoY29udGVudHMpCgogICAgICAg
set rpatool2=ICAgICAjIERlb2JmdXNjYXRlIGluZGV4ZXMuCiAgICAgICAgICAgIGlmIHNlbGYudmVyc2lvbiBpbiBbMywgMy4yXToKICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRfaW5kZXhlcyA9IGluZGV4ZXMKICAgICAgICAgICAgICAgIGluZGV4ZXMgPSB7fQogICAgICAgICAgICAgICAgZm9yIGkgaW4gb2JmdXNjYXRlZF9pbmRleGVzLmtleXMoKToKICAgICAgICAgICAgICAgICAgICBpZiBsZW4ob2JmdXNjYXRlZF9pbmRleGVzW2ldWzBdKSA9PSAyOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2ldID0gWyAob2Zmc2V0IF4gc2VsZi5rZXksIGxlbmd0aCBeIHNlbGYua2V5KSBmb3Igb2Zmc2V0LCBsZW5ndGggaW4gb2JmdXNjYXRlZF9pbmRleGVzW2ldIF0KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2ldID0gWyAob2Zmc2V0IF4gc2VsZi5rZXksIGxlbmd0aCBeIHNlbGYua2V5LCBwcmVmaXgpIGZvciBvZmZzZXQsIGxlbmd0aCwgcHJlZml4IGluIG9iZnVzY2F0ZWRfaW5kZXhlc1tpXSBdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW5kZXhlcyA9IHBpY2tsZS5sb2Fkcyhjb2RlY3MuZGVjb2RlKHNlbGYuaGFuZGxlLnJlYWQoKSwgJ3psaWInKSkKCiAgICAgICAgcmV0dXJuIGluZGV4ZXMKCiAgICAjIEdlbmVyYXRlIHBzZXVkb3JhbmRvbSBwYWRkaW5nIChmb3Igd2hhdGV2ZXIgcmVhc29uKS4KICAgIGRlZiBnZW5lcmF0ZV9wYWRkaW5nKHNlbGYpOgogICAgICAgIGxlbmd0aCA9IHJhbmRvbS5yYW5kaW50KDEsIHNlbGYucGFkbGVuZ3RoKQoKICAgICAgICBwYWRkaW5nID0gJycKICAgICAgICB3aGlsZSBsZW5ndGggPiAwOgogICAgICAgICAgICBwYWRkaW5nICs9IGNocihyYW5kb20ucmFuZGludCgxLCAyNTUpKQogICAgICAgICAgICBsZW5ndGggLT0gMQoKICAgICAgICByZXR1cm4gYnl0ZXMocGFkZGluZywgJ3V0Zi04JykKCiAgICAjIENvbnZlcnRzIGEgZmlsZW5hbWUgdG8gYXJjaGl2ZSBmb3JtYXQuCiAgICBkZWYgY29udmVydF9maWxlbmFtZShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgKGRyaXZlLCBmaWxlbmFtZSkgPSBvcy5wYXRoLnNwbGl0ZHJpdmUob3MucGF0aC5ub3JtcGF0aChmaWxlbmFtZSkucmVwbGFjZShvcy5zZXAsICcvJykpCiAgICAgICAgcmV0dXJuIGZpbGVuYW1lCgogICAgIyBEZWJ1ZyAodmVyYm9zZSkgbWVzc2FnZXMuCiAgICBkZWYgdmVyYm9zZV9wcmludChzZWxmLCBtZXNzYWdlKToKICAgICAgICBpZiBzZWxmLnZlcmJvc2U6CiAgICAgICAgICAgIHByaW50KG1lc3NhZ2UpCgoKICAgICMgTGlzdCBmaWxlcyBpbiBhcmNoaXZlIGFuZCBjdXJyZW50IGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgbGlzdChzZWxmKToKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmluZGV4ZXMua2V5cygpKSArIGxpc3Qoc2VsZi5maWxlcy5rZXlzKCkpCgogICAgIyBDaGVjayBpZiBhIGZpbGUgZXhpc3RzIGluIHRoZSBhcmNoaXZlLgogICAgZGVmIGhhc19maWxlKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQogICAgICAgIHJldHVybiBmaWxlbmFtZSBpbiBzZWxmLmluZGV4ZXMua2V5cygpIG9yIGZpbGVuYW1lIGluIHNlbGYuZmlsZXMua2V5cygpCgogICAgIyBSZWFkIGZpbGUgZnJvbSBhcmNoaXZlIG9yIGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgcmVhZChzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZmlsZW5hbWUgPSBzZWxmLmNvbnZlcnRfZmlsZW5hbWUoX3VuaWNvZGUoZmlsZW5hbWUpKQoKICAgICAgICAjIENoZWNrIGlmIHRoZSBmaWxlIGV4aXN0cyBpbiBvdXIgaW5kZXhlcy4KICAgICAgICBpZiBmaWxlbmFtZSBub3QgaW4gc2VsZi5maWxlcyBhbmQgZmlsZW5hbWUgbm90IGluIHNlbGYuaW5kZXhlczoKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcihlcnJuby5FTk9FTlQsICd0aGUgcmVxdWVzdGVkIGZpbGUgezB9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBnaXZlbiBSZW5cJ1B5IGFyY2hpdmUnLmZvcm1hdCgKICAgICAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpKSkKCiAgICAgICAgIyBJZiBpdCdzIGluIG91ciBvcGVuZWQgYXJjaGl2ZSBpbmRleCwgYW5kIG91ciBhcmNoaXZlIGhhbmRsZSBpc24ndCB2YWxpZCwgc29tZXRoaW5nIGlzIG9idmlvdXNseSB3cm9uZy4KICAgICAgICBpZiBmaWxlbmFtZSBub3QgaW4gc2VsZi5maWxlcyBhbmQgZmlsZW5hbWUgaW4gc2VsZi5pbmRleGVzIGFuZCBzZWxmLmhhbmRsZSBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBJT0Vycm9yKGVycm5vLkVOT0VOVCwgJ3RoZSByZXF1ZXN0ZWQgZmlsZSB7MH0gZG9lcyBub3QgZXhpc3QgaW4gdGhlIGdpdmVuIFJlblwnUHkgYXJjaGl2ZScuZm9ybWF0KAogICAgICAgICAgICAgICAgX3ByaW50YWJsZShmaWxlbmFtZSkpKQoKICAgICAgICAjIENoZWNrIG91ciBzaW1wbGlmaWVkIGludGVybmFsIGluZGV4ZXMgZmlyc3QsIGluIGNhc2Ugc29tZW9uZSB3YW50cyB0byByZWFkIGEgZmlsZSB0aGV5IGFkZGVkIGJlZm9yZSB3aXRob3V0IHNhdmluZywgZm9yIHNvbWUgdW5ob2x5IHJlYXNvbi4KICAgICAgICBpZiBmaWxlbmFtZSBpbiBzZWxmLmZpbGVzOgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlYWRpbmcgZmlsZSB7MH0gZnJvbSBpbnRlcm5hbCBzdG9yYWdlLi4uJy5mb3JtYXQoX3ByaW50YWJsZShmaWxlbmFtZSkpKQogICAgICAgICAgICByZXR1cm4gc2VsZi5maWxlc1tmaWxlbmFtZV0KICAgICAgICAjIFdlIG5lZWQgdG8gcmVhZCB0aGUgZmlsZSBmcm9tIG91ciBvcGVuIGFyY2hpdmUuCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBSZWFkIG9mZnNldCBhbmQgbGVuZ3RoLCBzZWVrIHRvIHRoZSBvZmZzZXQgYW5kIHJlYWQgdGhlIGZpbGUgY29udGVudHMuCiAgICAgICAgICAgIGlmIGxlbihzZWxmLmluZGV4ZXNbZmlsZW5hbWVdWzBdKSA9PSAzOgogICAgICAgICAgICAgICAgKG9mZnNldCwgbGVuZ3RoLCBwcmVmaXgpID0gc2VsZi5pbmRleGVzW2ZpbGVuYW1lXVswXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgKG9mZnNldCwgbGVuZ3RoKSA9IHNlbGYuaW5kZXhlc1tmaWxlbmFtZV1bMF0KICAgICAgICAgICAgICAgIHByZWZpeCA9ICcnCgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlYWRpbmcgZmlsZSB7MH0gZnJvbSBkYXRhIGZpbGUgezF9Li4uIChvZmZzZXQgPSB7Mn0sIGxlbmd0aCA9IHszfSBieXRlcyknLmZvcm1hdCgKICAgICAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpLCBzZWxmLmZpbGUsIG9mZnNldCwgbGVuZ3RoKSkKICAgICAgICAgICAgc2VsZi5oYW5kbGUuc2VlayhvZmZzZXQpCiAgICAgICAgICAgIHJldHVybiBfdW5tYW5nbGUocHJlZml4KSArIHNlbGYuaGFuZGxlLnJlYWQobGVuZ3RoIC0gbGVuKHByZWZpeCkpCgogICAgIyBNb2RpZnkgYSBmaWxlIGluIGFyY2hpdmUgb3IgaW50ZXJuYWwgc3RvcmFnZS4KICAgIGRlZiBjaGFuZ2Uoc2VsZiwgZmlsZW5hbWUsIGNvbnRlbnRzKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQoKICAgICAgICAjIE91ciAnY2hhbmdlJyBpcyBiYXNpY2FsbHkgcmVtb3ZpbmcgdGhlIGZpbGUgZnJvbSBvdXIgaW5kZXhlcyBmaXJz
set rpatool3=dCwgYW5kIHRoZW4gcmUtYWRkaW5nIGl0LgogICAgICAgIHNlbGYucmVtb3ZlKGZpbGVuYW1lKQogICAgICAgIHNlbGYuYWRkKGZpbGVuYW1lLCBjb250ZW50cykKCiAgICAjIEFkZCBhIGZpbGUgdG8gdGhlIGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgYWRkKHNlbGYsIGZpbGVuYW1lLCBjb250ZW50cyk6CiAgICAgICAgZmlsZW5hbWUgPSBzZWxmLmNvbnZlcnRfZmlsZW5hbWUoX3VuaWNvZGUoZmlsZW5hbWUpKQogICAgICAgIGlmIGZpbGVuYW1lIGluIHNlbGYuZmlsZXMgb3IgZmlsZW5hbWUgaW4gc2VsZi5pbmRleGVzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdmaWxlIHswfSBhbHJlYWR5IGV4aXN0cyBpbiBhcmNoaXZlJy5mb3JtYXQoX3ByaW50YWJsZShmaWxlbmFtZSkpKQoKICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ0FkZGluZyBmaWxlIHswfSB0byBhcmNoaXZlLi4uIChsZW5ndGggPSB7MX0gYnl0ZXMpJy5mb3JtYXQoCiAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpLCBsZW4oY29udGVudHMpKSkKICAgICAgICBzZWxmLmZpbGVzW2ZpbGVuYW1lXSA9IGNvbnRlbnRzCgogICAgIyBSZW1vdmUgYSBmaWxlIGZyb20gYXJjaGl2ZSBvciBpbnRlcm5hbCBzdG9yYWdlLgogICAgZGVmIHJlbW92ZShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZmlsZW5hbWUgPSBfdW5pY29kZShmaWxlbmFtZSkKICAgICAgICBpZiBmaWxlbmFtZSBpbiBzZWxmLmZpbGVzOgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlbW92aW5nIGZpbGUgezB9IGZyb20gaW50ZXJuYWwgc3RvcmFnZS4uLicuZm9ybWF0KF9wcmludGFibGUoZmlsZW5hbWUpKSkKICAgICAgICAgICAgZGVsIHNlbGYuZmlsZXNbZmlsZW5hbWVdCiAgICAgICAgZWxpZiBmaWxlbmFtZSBpbiBzZWxmLmluZGV4ZXM6CiAgICAgICAgICAgIHNlbGYudmVyYm9zZV9wcmludCgnUmVtb3ZpbmcgZmlsZSB7MH0gZnJvbSBhcmNoaXZlIGluZGV4ZXMuLi4nLmZvcm1hdChfcHJpbnRhYmxlKGZpbGVuYW1lKSkpCiAgICAgICAgICAgIGRlbCBzZWxmLmluZGV4ZXNbZmlsZW5hbWVdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcihlcnJuby5FTk9FTlQsICd0aGUgcmVxdWVzdGVkIGZpbGUgezB9IGRvZXMgbm90IGV4aXN0IGluIHRoaXMgYXJjaGl2ZScuZm9ybWF0KF9wcmludGFibGUoZmlsZW5hbWUpKSkKCiAgICAjIExvYWQgYXJjaGl2ZS4KICAgIGRlZiBsb2FkKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQoKICAgICAgICBpZiBzZWxmLmhhbmRsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5oYW5kbGUuY2xvc2UoKQogICAgICAgIHNlbGYuZmlsZSA9IGZpbGVuYW1lCiAgICAgICAgc2VsZi5maWxlcyA9IHt9CiAgICAgICAgc2VsZi5oYW5kbGUgPSBvcGVuKHNlbGYuZmlsZSwgJ3JiJykKICAgICAgICBzZWxmLnZlcnNpb24gPSBzZWxmLmdldF92ZXJzaW9uKCkKICAgICAgICBzZWxmLmluZGV4ZXMgPSBzZWxmLmV4dHJhY3RfaW5kZXhlcygpCgogICAgIyBTYXZlIGN1cnJlbnQgc3RhdGUgaW50byBhIG5ldyBmaWxlLCBtZXJnaW5nIGFyY2hpdmUgYW5kIGludGVybmFsIHN0b3JhZ2UsIHJlYnVpbGRpbmcgaW5kZXhlcywgYW5kIG9wdGlvbmFsbHkgc2F2aW5nIGluIGFub3RoZXIgZm9ybWF0IHZlcnNpb24uCiAgICBkZWYgc2F2ZShzZWxmLCBmaWxlbmFtZSA9IE5vbmUpOgogICAgICAgIGZpbGVuYW1lID0gX3VuaWNvZGUoZmlsZW5hbWUpCgogICAgICAgIGlmIGZpbGVuYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIGZpbGVuYW1lID0gc2VsZi5maWxlCiAgICAgICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbm8gdGFyZ2V0IGZpbGUgZm91bmQgZm9yIHNhdmluZyBhcmNoaXZlJykKICAgICAgICBpZiBzZWxmLnZlcnNpb24gIT0gMiBhbmQgc2VsZi52ZXJzaW9uICE9IDM6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3NhdmluZyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgdmVyc2lvbiAyIGFuZCAzIGFyY2hpdmVzJykKCiAgICAgICAgc2VsZi52ZXJib3NlX3ByaW50KCdSZWJ1aWxkaW5nIGFyY2hpdmUgaW5kZXguLi4nKQogICAgICAgICMgRmlsbCBvdXIgb3duIGZpbGVzIHN0cnVjdHVyZSB3aXRoIHRoZSBmaWxlcyBhZGRlZCBvciBjaGFuZ2VkIGluIHRoaXMgc2Vzc2lvbi4KICAgICAgICBmaWxlcyA9IHNlbGYuZmlsZXMKICAgICAgICAjIEZpcnN0LCByZWFkIGZpbGVzIGZyb20gdGhlIGN1cnJlbnQgYXJjaGl2ZSBpbnRvIG91ciBmaWxlcyBzdHJ1Y3R1cmUuCiAgICAgICAgZm9yIGZpbGUgaW4gbGlzdChzZWxmLmluZGV4ZXMua2V5cygpKToKICAgICAgICAgICAgY29udGVudCA9IHNlbGYucmVhZChmaWxlKQogICAgICAgICAgICAjIFJlbW92ZSBmcm9tIGluZGV4ZXMgYXJyYXkgb25jZSByZWFkLCBhZGQgdG8gb3VyIG93biBhcnJheS4KICAgICAgICAgICAgZGVsIHNlbGYuaW5kZXhlc1tmaWxlXQogICAgICAgICAgICBmaWxlc1tmaWxlXSA9IGNvbnRlbnQKCiAgICAgICAgIyBQcmVkaWN0IGhlYWRlciBsZW5ndGgsIHdlJ2xsIHdyaXRlIHRoYXQgb25lIGxhc3QuCiAgICAgICAgb2Zmc2V0ID0gMAogICAgICAgIGlmIHNlbGYudmVyc2lvbiA9PSAzOgogICAgICAgICAgICBvZmZzZXQgPSAzNAogICAgICAgIGVsaWYgc2VsZi52ZXJzaW9uID09IDI6CiAgICAgICAgICAgIG9mZnNldCA9IDI1CiAgICAgICAgYXJjaGl2ZSA9IG9wZW4oZmlsZW5hbWUsICd3YicpCiAgICAgICAgYXJjaGl2ZS5zZWVrKG9mZnNldCkKCiAgICAgICAgIyBCdWlsZCBvdXIgb3duIGluZGV4ZXMgd2hpbGUgd3JpdGluZyBmaWxlcyB0byB0aGUgYXJjaGl2ZS4KICAgICAgICBpbmRleGVzID0ge30KICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1dyaXRpbmcgZmlsZXMgdG8gYXJjaGl2ZSBmaWxlLi4uJykKICAgICAgICBmb3IgZmlsZSwgY29udGVudCBpbiBmaWxlcy5pdGVtcygpOgogICAgICAgICAgICAjIEdlbmVyYXRlIHJhbmRvbSBwYWRkaW5nLCBmb3Igd2hhdGV2ZXIgcmVhc29uLgogICAgICAgICAgICBpZiBzZWxmLnBhZGxlbmd0aCA+IDA6CiAgICAgICAgICAgICAgICBwYWRkaW5nID0gc2VsZi5nZW5lcmF0ZV9wYWRkaW5nKCkKICAgICAgICAgICAgICAgIGFyY2hpdmUud3JpdGUocGFkZGluZykKICAgICAgICAgICAgICAgIG9mZnNldCArPSBsZW4ocGFkZGluZykKCiAgICAgICAgICAgIGFyY2hpdmUud3JpdGUoY29udGVudCkKICAgICAgICAgICAgIyBVcGRhdGUgaW5kZXguCiAgICAgICAgICAgIGlmIHNlbGYudmVyc2lvbiA9PSAzOgogICAgICAgICAgICAgICAgaW5kZXhlc1tmaWxlXSA9IFsgKG9mZnNldCBeIHNlbGYua2V5LCBsZW4oY29udGVudCkgXiBzZWxmLmtleSkgXQogICAgICAgICAgICBlbGlmIHNlbGYudmVyc2lvbiA9PSAyOgogICAgICAgICAgICAgICAgaW5kZXhlc1tmaWxlXSA9IFsgKG9mZnNldCwgbGVuKGNvbnRlbnQpKSBdCiAgICAgICAgICAgIG9mZnNldCArPSBsZW4oY29udGVudCkKCiAgICAgICAgIyBXcml0ZSB0aGUgaW5kZXhlcy4KICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1dyaXRpbmcgYXJjaGl2ZSBpbmRleCB0byBhcmNoaXZlIGZpbGUuLi4nKQogICAgICAgIGFy
set rpatool4=Y2hpdmUud3JpdGUoY29kZWNzLmVuY29kZShwaWNrbGUuZHVtcHMoaW5kZXhlcywgc2VsZi5QSUNLTEVfUFJPVE9DT0wpLCAnemxpYicpKQogICAgICAgICMgTm93IHdyaXRlIHRoZSBoZWFkZXIuCiAgICAgICAgc2VsZi52ZXJib3NlX3ByaW50KCdXcml0aW5nIGhlYWRlciB0byBhcmNoaXZlIGZpbGUuLi4gKHZlcnNpb24gPSBSUEF2ezB9KScuZm9ybWF0KHNlbGYudmVyc2lvbikpCiAgICAgICAgYXJjaGl2ZS5zZWVrKDApCiAgICAgICAgaWYgc2VsZi52ZXJzaW9uID09IDM6CiAgICAgICAgICAgIGFyY2hpdmUud3JpdGUoY29kZWNzLmVuY29kZSgne317OjAxNnh9IHs6MDh4fVxuJy5mb3JtYXQoc2VsZi5SUEEzX01BR0lDLCBvZmZzZXQsIHNlbGYua2V5KSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYXJjaGl2ZS53cml0ZShjb2RlY3MuZW5jb2RlKCd7fXs6MDE2eH1cbicuZm9ybWF0KHNlbGYuUlBBMl9NQUdJQywgb2Zmc2V0KSkpCiAgICAgICAgIyBXZSdyZSBkb25lLCBjbG9zZSBpdC4KICAgICAgICBhcmNoaXZlLmNsb3NlKCkKCiAgICAgICAgIyBSZWxvYWQgdGhlIGZpbGUgaW4gb3VyIGlubmVyIGRhdGFiYXNlLgogICAgICAgIHNlbGYubG9hZChmaWxlbmFtZSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBpbXBvcnQgYXJncGFyc2UKCiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigKICAgICAgICBkZXNjcmlwdGlvbj0nQSB0b29sIGZvciB3b3JraW5nIHdpdGggUmVuXCdQeSBhcmNoaXZlIGZpbGVzLicsCiAgICAgICAgZXBpbG9nPSdUaGUgRklMRSBhcmd1bWVudCBjYW4gb3B0aW9uYWxseSBiZSBpbiBBUkNISVZFPVJFQUwgZm9ybWF0LCBtYXBwaW5nIGEgZmlsZSBpbiB0aGUgYXJjaGl2ZSBmaWxlIHN5c3RlbSB0byBhIGZpbGUgb24geW91ciByZWFsIGZpbGUgc3lzdGVtLiBBbiBleGFtcGxlIG9mIHRoaXM6IHJwYXRvb2wgLXggdGVzdC5ycGEgc2NyaXB0LnJweWM9L2hvbWUvZm9vL3Rlc3QucnB5YycsCiAgICAgICAgYWRkX2hlbHA9RmFsc2UpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnYXJjaGl2ZScsIG1ldGF2YXI9J0FSQ0hJVkUnLCBoZWxwPSdUaGUgUmVuXCdweSBhcmNoaXZlIGZpbGUgdG8gb3BlcmF0ZSBvbi4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnZmlsZXMnLCBtZXRhdmFyPSdGSUxFJywgbmFyZ3M9JyonLCBhY3Rpb249J2FwcGVuZCcsIGhlbHA9J1plcm8gb3IgbW9yZSBmaWxlcyB0byBvcGVyYXRlIG9uLicpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWwnLCAnLS1saXN0JywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nTGlzdCBmaWxlcyBpbiBhcmNoaXZlIEFSQ0hJVkUuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy14JywgJy0tZXh0cmFjdCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0V4dHJhY3QgRklMRXMgZnJvbSBBUkNISVZFLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYycsICctLWNyZWF0ZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0NyZWF0aXZlIEFSQ0hJVkUgZnJvbSBGSUxFcy4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWQnLCAnLS1kZWxldGUnLCBhY3Rpb249J3N0b3JlX3RydWUnLCBoZWxwPSdEZWxldGUgRklMRXMgZnJvbSBBUkNISVZFLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYScsICctLWFwcGVuZCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0FwcGVuZCBGSUxFcyB0byBBUkNISVZFLicpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLTInLCAnLS10d28nLCBhY3Rpb249J3N0b3JlX3RydWUnLCBoZWxwPSdVc2UgdGhlIFJQQXYyIGZvcm1hdCBmb3IgY3JlYXRpbmcvYXBwZW5kaW5nIHRvIGFyY2hpdmVzLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctMycsICctLXRocmVlJywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nVXNlIHRoZSBSUEF2MyBmb3JtYXQgZm9yIGNyZWF0aW5nL2FwcGVuZGluZyB0byBhcmNoaXZlcyAoZGVmYXVsdCkuJykKCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctaycsICctLWtleScsIG1ldGF2YXI9J0tFWScsIGhlbHA9J1RoZSBvYmZ1c2NhdGlvbiBrZXkgdXNlZCBmb3IgY3JlYXRpbmcgUlBBdjMgYXJjaGl2ZXMsIGluIGhleGFkZWNpbWFsIChkZWZhdWx0OiAweERFQURCRUVGKS4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLXAnLCAnLS1wYWRkaW5nJywgbWV0YXZhcj0nQ09VTlQnLCBoZWxwPSdUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgb2YgcGFkZGluZyB0byBhZGQgYmV0d2VlbiBmaWxlcyAoZGVmYXVsdDogMCkuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1vJywgJy0tb3V0ZmlsZScsIGhlbHA9J0FuIGFsdGVybmF0aXZlIG91dHB1dCBhcmNoaXZlIGZpbGUgd2hlbiBhcHBlbmRpbmcgdG8gb3IgZGVsZXRpbmcgZnJvbSBhcmNoaXZlcywgb3Igb3V0cHV0IGRpcmVjdG9yeSB3aGVuIGV4dHJhY3RpbmcuJykKCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctaCcsICctLWhlbHAnLCBhY3Rpb249J2hlbHAnLCBoZWxwPSdQcmludCB0aGlzIGhlbHAgYW5kIGV4aXQuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy12JywgJy0tdmVyYm9zZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0JlIGEgYml0IG1vcmUgdmVyYm9zZSB3aGlsZSBwZXJmb3JtaW5nIG9wZXJhdGlvbnMuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1WJywgJy0tdmVyc2lvbicsIGFjdGlvbj0ndmVyc2lvbicsIHZlcnNpb249J3JwYXRvb2wgdjAuOCcsIGhlbHA9J1Nob3cgdmVyc2lvbiBpbmZvcm1hdGlvbi4nKQogICAgYXJndW1lbnRzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgICMgRGV0ZXJtaW5lIFJQQSB2ZXJzaW9uLgogICAgaWYgYXJndW1lbnRzLnR3bzoKICAgICAgICB2ZXJzaW9uID0gMgogICAgZWxzZToKICAgICAgICB2ZXJzaW9uID0gMwoKICAgICMgRGV0ZXJtaW5lIFJQQXYzIGtleS4KICAgIGlmICdrZXknIGluIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzLmtleSBpcyBub3QgTm9uZToKICAgICAgICBrZXkgPSBpbnQoYXJndW1lbnRzLmtleSwgMTYpCiAgICBlbHNlOgogICAgICAgIGtleSA9IDB4REVBREJFRUYKCiAgICAjIERldGVybWluZSBwYWRkaW5nIGJ5dGVzLgogICAgaWYgJ3BhZGRpbmcnIGluIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzLnBhZGRpbmcgaXMgbm90IE5vbmU6CiAgICAgICAgcGFkZGluZyA9IGludChhcmd1bWVudHMucGFkZGluZykKICAgIGVsc2U6CiAgICAgICAgcGFkZGluZyA9IDAKCiAgICAjIERldGVybWluZSBvdXRwdXQgZmlsZS9kaXJlY3RvcnkgYW5kIGlucHV0IGFyY2hpdmUKICAgIGlmIGFyZ3VtZW50cy5jcmVhdGU6CiAgICAgICAgYXJjaGl2ZSA9IE5vbmUKICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMuYXJjaGl2ZSkKICAgIGVsc2U6CiAgICAgICAgYXJjaGl2ZSA9IF91bmljb2RlKGFyZ3VtZW50cy5hcmNoaXZlKQogICAgICAgIGlmICdvdXRmaWxlJyBpbiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50cy5vdXRmaWxlIGlzIG5vdCBOb25lOgogICAgICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMub3V0ZmlsZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIERlZmF1bHQgb3V0cHV0IGRpcmVjdG9yeSBmb3IgZXh0cmFj
set rpatool5=dGlvbiBpcyB0aGUgY3VycmVudCBkaXJlY3RvcnkuCiAgICAgICAgICAgIGlmIGFyZ3VtZW50cy5leHRyYWN0OgogICAgICAgICAgICAgICAgb3V0cHV0ID0gJy4nCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMuYXJjaGl2ZSkKCiAgICAjIE5vcm1hbGl6ZSBmaWxlcy4KICAgIGlmIGxlbihhcmd1bWVudHMuZmlsZXMpID4gMCBhbmQgaXNpbnN0YW5jZShhcmd1bWVudHMuZmlsZXNbMF0sIGxpc3QpOgogICAgICAgIGFyZ3VtZW50cy5maWxlcyA9IGFyZ3VtZW50cy5maWxlc1swXQoKICAgIHRyeToKICAgICAgICBhcmNoaXZlID0gUmVuUHlBcmNoaXZlKGFyY2hpdmUsIHBhZGxlbmd0aD1wYWRkaW5nLCBrZXk9a2V5LCB2ZXJzaW9uPXZlcnNpb24sIHZlcmJvc2U9YXJndW1lbnRzLnZlcmJvc2UpCiAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgIHByaW50KCdDb3VsZCBub3Qgb3BlbiBhcmNoaXZlIGZpbGUgezB9IGZvciByZWFkaW5nOiB7MX0nLmZvcm1hdChhcmNoaXZlLCBlKSwgZmlsZT1zeXMuc3RkZXJyKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgYXJndW1lbnRzLmNyZWF0ZSBvciBhcmd1bWVudHMuYXBwZW5kOgogICAgICAgICMgV2UgbmVlZCB0aGlzIHNlcGVyYXRlIGZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IHByb2Nlc3MgZGlyZWN0b3JpZXMuCiAgICAgICAgZGVmIGFkZF9maWxlKGZpbGVuYW1lKToKICAgICAgICAgICAgIyBJZiB0aGUgYXJjaGl2ZSBwYXRoIGRpZmZlcnMgZnJvbSB0aGUgYWN0dWFsIGZpbGUgcGF0aCwgYXMgZ2l2ZW4gaW4gdGhlIGFyZ3VtZW50LAogICAgICAgICAgICAjIGV4dHJhY3QgdGhlIGFyY2hpdmUgcGF0aCBhbmQgYWN0dWFsIGZpbGUgcGF0aC4KICAgICAgICAgICAgaWYgZmlsZW5hbWUuZmluZCgnPScpICE9IC0xOgogICAgICAgICAgICAgICAgKG91dGZpbGUsIGZpbGVuYW1lKSA9IGZpbGVuYW1lLnNwbGl0KCc9JywgMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG91dGZpbGUgPSBmaWxlbmFtZQoKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2RpcihmaWxlbmFtZSk6CiAgICAgICAgICAgICAgICBmb3IgZmlsZSBpbiBvcy5saXN0ZGlyKGZpbGVuYW1lKToKICAgICAgICAgICAgICAgICAgICAjIFdlIG5lZWQgdG8gZG8gdGhpcyBpbiBvcmRlciB0byBtYWludGFpbiBhIHBvc3NpYmxlIEFSQ0hJVkU9UkVBTCBtYXBwaW5nIGJldHdlZW4gZGlyZWN0b3JpZXMuCiAgICAgICAgICAgICAgICAgICAgYWRkX2ZpbGUob3V0ZmlsZSArIG9zLnNlcCArIGZpbGUgKyAnPScgKyBmaWxlbmFtZSArIG9zLnNlcCArIGZpbGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVuYW1lLCAncmInKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgICAgICAgICBhcmNoaXZlLmFkZChvdXRmaWxlLCBmaWxlLnJlYWQoKSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwcmludCgnQ291bGQgbm90IGFkZCBmaWxlIHswfSB0byBhcmNoaXZlOiB7MX0nLmZvcm1hdChmaWxlbmFtZSwgZSksIGZpbGU9c3lzLnN0ZGVycikKCiAgICAgICAgIyBJdGVyYXRlIG92ZXIgdGhlIGdpdmVuIGZpbGVzIHRvIGFkZCB0byBhcmNoaXZlLgogICAgICAgIGZvciBmaWxlbmFtZSBpbiBhcmd1bWVudHMuZmlsZXM6CiAgICAgICAgICAgIGFkZF9maWxlKF91bmljb2RlKGZpbGVuYW1lKSkKCiAgICAgICAgIyBTZXQgdmVyc2lvbiBmb3Igc2F2aW5nLCBhbmQgc2F2ZS4KICAgICAgICBhcmNoaXZlLnZlcnNpb24gPSB2ZXJzaW9uCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhcmNoaXZlLnNhdmUob3V0cHV0KQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoJ0NvdWxkIG5vdCBzYXZlIGFyY2hpdmUgZmlsZTogezB9Jy5mb3JtYXQoZSksIGZpbGU9c3lzLnN0ZGVycikKICAgIGVsaWYgYXJndW1lbnRzLmRlbGV0ZToKICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgZ2l2ZW4gZmlsZXMgdG8gZGVsZXRlIGZyb20gdGhlIGFyY2hpdmUuCiAgICAgICAgZm9yIGZpbGVuYW1lIGluIGFyZ3VtZW50cy5maWxlczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYXJjaGl2ZS5yZW1vdmUoZmlsZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KCdDb3VsZCBub3QgZGVsZXRlIGZpbGUgezB9IGZyb20gYXJjaGl2ZTogezF9Jy5mb3JtYXQoZmlsZW5hbWUsIGUpLCBmaWxlPXN5cy5zdGRlcnIpCgogICAgICAgICMgU2V0IHZlcnNpb24gZm9yIHNhdmluZywgYW5kIHNhdmUuCiAgICAgICAgYXJjaGl2ZS52ZXJzaW9uID0gdmVyc2lvbgogICAgICAgIHRyeToKICAgICAgICAgICAgYXJjaGl2ZS5zYXZlKG91dHB1dCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KCdDb3VsZCBub3Qgc2F2ZSBhcmNoaXZlIGZpbGU6IHswfScuZm9ybWF0KGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBlbGlmIGFyZ3VtZW50cy5leHRyYWN0OgogICAgICAgICMgRWl0aGVyIGV4dHJhY3QgdGhlIGdpdmVuIGZpbGVzLCBvciBhbGwgZmlsZXMgaWYgbm8gZmlsZXMgYXJlIGdpdmVuLgogICAgICAgIGlmIGxlbihhcmd1bWVudHMuZmlsZXMpID4gMDoKICAgICAgICAgICAgZmlsZXMgPSBhcmd1bWVudHMuZmlsZXMKICAgICAgICBlbHNlOgogICAgICAgICAgICBmaWxlcyA9IGFyY2hpdmUubGlzdCgpCgogICAgICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgaWYgbm90IHByZXNlbnQuCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKG91dHB1dCk6CiAgICAgICAgICAgIG9zLm1ha2VkaXJzKG91dHB1dCkKCiAgICAgICAgIyBJdGVyYXRlIG92ZXIgZmlsZXMgdG8gZXh0cmFjdC4KICAgICAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgIGlmIGZpbGVuYW1lLmZpbmQoJz0nKSAhPSAtMToKICAgICAgICAgICAgICAgIChvdXRmaWxlLCBmaWxlbmFtZSkgPSBmaWxlbmFtZS5zcGxpdCgnPScsIDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvdXRmaWxlID0gZmlsZW5hbWUKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gYXJjaGl2ZS5yZWFkKGZpbGVuYW1lKQoKICAgICAgICAgICAgICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgZm9yIGZpbGUgaWYgbm90IHByZXNlbnQuCiAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguam9pbihvdXRwdXQsIG91dGZpbGUpKSk6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguam9pbihvdXRwdXQsIG91dGZpbGUpKSkKCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKG91dHB1dCwgb3V0ZmlsZSksICd3YicpIGFzIGZpbGU6CiAgICAgICAgICAgICAgICAgICAgZmlsZS53cml0ZShjb250ZW50cykKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoJ0NvdWxkIG5vdCBleHRy
set rpatool6=YWN0IGZpbGUgezB9IGZyb20gYXJjaGl2ZTogezF9Jy5mb3JtYXQoZmlsZW5hbWUsIGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBlbGlmIGFyZ3VtZW50cy5saXN0OgogICAgICAgICMgUHJpbnQgdGhlIHNvcnRlZCBmaWxlIGxpc3QuCiAgICAgICAgbGlzdCA9IGFyY2hpdmUubGlzdCgpCiAgICAgICAgbGlzdC5zb3J0KCkKICAgICAgICBmb3IgZmlsZSBpbiBsaXN0OgogICAgICAgICAgICBwcmludChmaWxlKQogICAgZWxzZToKICAgICAgICBwcmludCgnTm8gb3BlcmF0aW9uIGdpdmVuIDooJykKICAgICAgICBwcmludCgnVXNlIHswfSAtLWhlbHAgZm9yIHVzYWdlIGRldGFpbHMuJy5mb3JtYXQoc3lzLmFyZ3ZbMF0pKQoK
REM --------------------------------------------------------------------------------
REM SLDR Rogue-Like cheat.py (4864 chars max)
REM --------------------------------------------------------------------------------
set cheat1=aW1wb3J0IHJlCgp2ID0gIjEuOWJldGEiCnRhYiA9ICIgIiAqIDQKbmV3bGluZSA9ICJcbiIKCiM9PT09PT09PT09PT09ICAuL3NjcmlwdHMvaW50ZXJmYWNlL21haW5fbWVudS5ycHkgPT09PT09PT09CmRlZiBtYWluX21lbnUoKToKICAgIGZuPSIuL3NjcmlwdHMvaW50ZXJmYWNlL21haW5fbWVudS5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD0nICAgIHRleHQgIlxbY29uZmlnLnZlcnNpb25cXSIgYW5jaG9yIFwoMS4wLCAwLjVcKSBwb3MgXCgwLjE1NywgMC45NlwpOltcclxuXSsgK3NpemUgMjUnCiAgICByZXBsPScgICAgdGV4dCAiW2NvbmZpZy52ZXJzaW9uXSIgYW5jaG9yICgxLjAsIDAuNSkgcG9zICgwLjE1NywgMC45Nik6XG4gICAgICAgIHNpemUgMjVcbiAgICBmcmFtZTpcbiAgICAgICAgeGFsaWduIC41XG4gICAgICAgIHlhbGlnbiAwXG4gICAgICAgIHRleHQoIkNoZWF0cyBlbmFibGVkISIpJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKbWFpbl9tZW51KCkKCiM9PT09PT09PT09PT09ICAuL3NjcmlwdHMvaW50ZXJmYWNlL3F1aWNrX21lbnUucnB5ID09PT09PT09PQpkZWYgcXVpY2tfbWVudSgpOgogICAgZm49Ii4vc2NyaXB0cy9pbnRlcmZhY2UvcXVpY2tfbWVudS5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD0nICAgICAgICB0ZXh0YnV0dG9uIF9cKCJRLkxvYWQiXCk6W1xyXG5dKyAgICAgICAgICAgIGFjdGlvbiBRdWlja0xvYWRcKFwpJwogICAgcmVwbD0nICAgICAgICB0ZXh0YnV0dG9uIF8oIlEuTG9hZCIpOlxuICAgICAgICAgICAgYWN0aW9uIFF1aWNrTG9hZCgpXG5cbiAgICAgICAgdGV4dGJ1dHRvbiBfKCJDaGVhdFYnK3YrJyIpOlxuICAgICAgICAgICAgYWN0aW9uIE51bGxBY3Rpb24oKScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCnF1aWNrX21lbnUoKQoKIz09PT09PT09PT09PT0gY29uZmlnLnJweSA9PT09PT09PT0KZGVmIGNvbmZpZygpOgogICAgZm49Ii4vc2NyaXB0cy9iYXNlL2NvbmZpZy5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgZmMgPSBmYy5yZXBsYWNlKCdjb25maWcuZGV2ZWxvcGVyID0gImF1dG8iJywgJ2NvbmZpZy5kZXZlbG9wZXIgPSAiYXV0byJcbmRlZmluZSBjb25maWcuY29uc29sZSA9IFRydWUnKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKY29uZmlnKCkKCiM9PT09PT09PT09PT09ICAuL3NjcmlwdHMvbWVjaGFuaWNzL3V0aWxpdGllcy5ycHkgPT09PT09PT09CmRlZiB1dGlsaXRpZXMoKToKICAgIGZuPSIuL3NjcmlwdHMvbWVjaGFuaWNzL3V0aWxpdGllcy5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD0nKD9QPHRhYnM+ICspZGVmIHVuaXF1ZVwob3JpZ2luYWxcKTonCiAgICByZXBsPScgICAgZGVmIHJlbW92ZUNoZWF0aW5nKEMpOlxyXG4gICAgICAgIEMuSGlzdG9yeS5yZW1vdmUoImNoZWF0ZWRfb25fZmxpcnRpbmdfaW5fcHVibGljIilcclxuICAgICAgICBDLkhpc3RvcnkucmVtb3ZlKCJjaGVhdGVkX29uX2RhdGUiKVxyXG4gICAgICAgIEMuSGlzdG9yeS5yZW1vdmUoImNoZWF0ZWRfb25fcmVsYXRpb25zaGlwIilcclxuICAgICAgICBpZiBDLkhpc3RvcnkucGVybWFuZW50LmdldCgiY2hlYXRlZF9vbl9mbGlydGluZ19pbl9wdWJsaWMiKTpcclxuICAgICAgICAgICAgZGVsIEMuSGlzdG9yeS5wZXJtYW5lbnRbImNoZWF0ZWRfb25fZmxpcnRpbmdfaW5fcHVibGljIl1cclxuICAgICAgICBpZiBDLkhpc3RvcnkucGVybWFuZW50LmdldCgiY2hlYXRlZF9vbl9kYXRlIik6XHJcbiAgICAgICAgICAgIGRlbCBDLkhpc3RvcnkucGVybWFuZW50WyJjaGVhdGVkX29uX2RhdGUiXVxyXG4gICAgICAgIGlmIEMuSGlzdG9yeS5wZXJtYW5lbnQuZ2V0KCJjaGVhdGVkX29uX3JlbGF0aW9uc2hpcCIpOlxyXG4gICAgICAgICAgICBkZWwgQy5IaXN0b3J5LnBlcm1hbmVudFsiY2hlYXRlZF9vbl9yZWxhdGlvbnNoaXAiXVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIGZvciBvdGhlcl9DIGluIGFsbF9Db21wYW5pb25zOlxyXG4gICAgICAgICAgICBQbGF5ZXIuSGlzdG9yeS5yZW1vdmUoZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X2ZsaXJ0aW5nX2luX3B1YmxpYyIpXHJcbiAgICAgICAgICAgIFBsYXllci5IaXN0b3J5LnJlbW92ZShmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fZGF0ZSIpXHJcbiAgICAgICAgICAgIFBsYXllci5IaXN0b3J5LnJlbW92ZShmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fcmVsYXRpb25zaGlwIilcclxuICAgICAgICAgICAgaWYgUGxheWVyLkhpc3RvcnkucGVybWFuZW50LmdldChmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fZmxpcnRpbmdfaW5fcHVibGljIik6XHJcbiAgICAgICAgICAgICAgICBkZWwgUGxheWVyLkhpc3RvcnkucGVybWFuZW50W2YiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9mbGlydGluZ19pbl9wdWJsaWMiXVxyXG4gICAgICAgICAgICBpZiBQbGF5ZXIuSGlzdG9yeS5wZXJtYW5lbnQuZ2V0KGYiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9kYXRlIik6XHJcbiAgICAgICAgICAgICAgICBkZWwgUGxheWVyLkhpc3RvcnkucGVybWFuZW50W2YiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9kYXRlIl1cclxuICAgICAgICAgICAgaWYgUGxheWVyLkhpc3RvcnkucGVybWFuZW50LmdldChmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fcmVsYXRpb25zaGlwIik6XHJcbiAgICAgICAgICAgICAgICBkZWwgUGxheWVyLkhpc3RvcnkucGVybWFuZW50W2YiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9yZWxhdGlvbnNoaXAiXVxyXG4gICAgICAgIHJldHVyblxyXG5cclxuXGc8dGFicz5kZWYgdW5pcXVlKG9yaWdpbmFsKTonCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICBwYXR0PScoP1A8dGFicz4gKylkZWYgdW5pcXVlXChvcmlnaW5hbFwpOicKICAgIHJlcGw9J1xnPHRhYnM+ZGVmIGFkZEFiaWxpdHlQb2ludHMocCk6XHJcbiAgICAgICAgaWYgbm90IGhhc2F0dHIoUGxheWVyLCAiYWJpbGl0eV9wb2ludHMiKTpcclxuICAgICAgICAgICAgUGxheWVyLmFiaWxpdHlfcG9pbnRzID0gMFxyXG4gICAgICAgIGlmIHAgPiAwOlxyXG4gICAgICAgICAgICBQbGF5ZXIuYWJpbGl0
set cheat2=eV9wb2ludHMgKz0gcFxyXG5cclxuXGc8dGFicz5kZWYgdW5pcXVlKG9yaWdpbmFsKTonCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgp1dGlsaXRpZXMoKQoKIz09PT09PT09PT09IC4vc2NyaXB0cy9iYXNlL3BsYXllci5ycHkKZGVmIGJhc2VQbGF5ZXIoKToKICAgIGZuPSIuL3NjcmlwdHMvYmFzZS9wbGF5ZXIucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQogICAgCiAgICBwYXR0PScoP1A8dGFicz4gKylwb2ludHMgLT0gYWJpbGl0aWVzXFthYmlsaXR5XF1cWyJjb3N0IlxdJwogICAgcmVwbD0nXGc8dGFicz5wb2ludHMgLT0gYWJpbGl0aWVzW2FiaWxpdHldWyJjb3N0Il1cclxuXHJcbiAgICAgICAgICAgIGlmIGhhc2F0dHIoc2VsZiwgImFiaWxpdHlfcG9pbnRzIik6XHJcbiAgICAgICAgICAgICAgICBwb2ludHMgKz0gc2VsZi5hYmlsaXR5X3BvaW50cycKICAgIAogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgpiYXNlUGxheWVyKCkKCgojPT09PT09PT09PT09PSAgLi9zY3JpcHRzL2ludGVyZmFjZS9QbGF5ZXJfbWVudS5ycHkgPT09PT09PT09CmRlZiBwbGF5ZXJfbWVudSgpOgogICAgZm49Ii4vc2NyaXB0cy9pbnRlcmZhY2UvUGxheWVyX21lbnUucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICN0dXJucyB0ZXh0IGNhc2ggbnVtYmVyIGludG8gdGV4dGJ1dHRvbgogICAgcGF0dD0nICAgIHRleHQgIlwkXFtQbGF5ZXJcLmNhc2hcXSIgKD9QPHBvcz5hbmNob3IgXChbMC05Ll0rLCBbMC05Ll0rXCkgcG9zIFwoWzAtOS5dKywgWzAtOS5dK1wpKTpbXHJcbl0rICAgICAgICBzaXplICg/UDxzaXplPlswLTldKyknCiAgICByZXBsPScgICAgdGV4dGJ1dHRvbiAie3NpemU9XGc8c2l6ZT59IiArICIkW1BsYXllci5jYXNoXSIgXGc8cG9zPjpcclxuICAgICAgICBhY3Rpb24gU2V0VmFyaWFibGUoIlBsYXllci5jYXNoIiwgUGxheWVyLmNhc2ggKyA1MDAwMCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjdHVybnMgdGV4dCBmb3IgYWJpbGl0eSBwb2ludHMgaW50byB0ZXh0IGJ1dHRvbgogICAgcGF0dD0nICAgIHRleHQgIlxbUGxheWVyLnNraWxsX3BvaW50c1xdIiAoP1A8cG9zPmFuY2hvciBcKFswLTkuXSssIFswLTkuXStcKSBwb3MgXChbMC05Ll0rLCBbMC05Ll0rXCkpOltcclxuXSsgICAgICAgIGZvbnQgIig/UDxmb250PlthLXpBLVpfXStcLlthLXpBLVpdezMsNn0pIlsgXHJcbl0rICAgICAgICBzaXplICg/UDxzaXplPlswLTldKyknCiAgICByZXBsPScgICAgdGV4dGJ1dHRvbiAie3NpemU9XGc8c2l6ZT59e2ZvbnQ9XGc8Zm9udD59IiArICJbUGxheWVyLmFiaWxpdHlfcG9pbnRzXSIgXGc8cG9zPjpcbiAgICAgICAgYWN0aW9uIEZ1bmN0aW9uKGFkZEFiaWxpdHlQb2ludHMsIDUpJyAKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICNhbGxvd3MgZm9yIGRyYWdnYWJsZSBwbGF5ZXIgeHAgYmFyCiAgICBwYXR0PSd2YWx1ZSBcKFBsYXllclwuWFAgLSBQbGF5ZXJcLlhQX2dvYWxcLzFcLjc1XCkgcmFuZ2UgXChQbGF5ZXJcLlhQX2dvYWwgLSBQbGF5ZXJcLlhQX2dvYWxcLzFcLjc1XCknCiAgICByZXBsPSd2YWx1ZSBGaWVsZFZhbHVlKFBsYXllciwgIlhQIiwgUGxheWVyLlhQX2dvYWwpIHJhbmdlIChQbGF5ZXIuWFBfZ29hbCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjdHVybnMgdGV4dCBmb3IgYm90aCBsb3ZlIGFuZCB0cnVzdCBpbnRvIHRleHRidXR0b25zCiAgICBwYXR0PScoP1A8dGFiczE+ICspdGV4dCAiXFtjdXJyZW50X3JlbGF0aW9uc2hpcHNfRW50cnlcLig/UDxsdD5sb3ZlfHRydXN0KVxdIig/UDxwb3M+IGFuY2hvciBcKFswLTkuXSssIFswLTkuXStcKSBwb3MgXCgwXC5bMC05XSssIDBcLlswLTldK1wpKTpbIFxyXG5dK2ZvbnQgIig/UDxmb250PlthLXpBLVpfXStcLlthLXpBLVpdezMsNn0pIlsgXHJcbl0rc2l6ZSAoP1A8c2l6ZT5bMC05XSspWyBcclxuXStjb2xvciAiW2EtejAtOSNdKyInCiAgICByZXBsPSdcZzx0YWJzMT50ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn17Zm9udD1cZzxmb250Pn0iICsgIltjdXJyZW50X3JlbGF0aW9uc2hpcHNfRW50cnkuXGc8bHQ+XSJcZzxwb3M+OlxuXGc8dGFiczE+ICAgIGFjdGlvbiBTZXRWYXJpYWJsZSgiY3VycmVudF9yZWxhdGlvbnNoaXBzX0VudHJ5LlxnPGx0PiIsIGN1cnJlbnRfcmVsYXRpb25zaGlwc19FbnRyeS5cZzxsdD4gKyAxMDApJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCiAgIAogICAgI3R1cm4gZW1vdGlvbiBpY29ucyBpbnRvIGJ1dHRvbnMgdG8gdHVybiBvZmYgc2FpZCBzdGF0dXMKICAgIHBhdHQ9Jyg/UDx0YWJzMT4gKylhZGQgKD9QPGY+Zj8pImltYWdlcy9pbnRlcmZhY2UvUGxheWVyX21lbnUvcmVsYXRpb25zaGlwc18oP1A8c3RhdHVzPm1hZHxob3JueXxueW1waG98XFtzdGF0dXNcXSlcLndlYnAiIHpvb20gaGlnaF9yZXNvbHV0aW9uX2ludGVyZmFjZV9hZGp1c3RtZW50JwogICAgcmVwbD0nXGc8dGFiczE+aW1hZ2VidXR0b24gaWRsZSBcZzxmPiJpbWFnZXMvaW50ZXJmYWNlL1BsYXllcl9tZW51L3JlbGF0aW9uc2hpcHNfXGc8c3RhdHVzPi53ZWJwIiBhY3Rpb24gU2V0RGljdChjdXJyZW50X3JlbGF0aW9uc2hpcHNfRW50cnkuc3RhdHVzLCBcZzxmPiJcZzxzdGF0dXM+IiwgMCknCiAgICByZXBsPSdcZzx0YWJzMT5pbWFnZWJ1dHRvbiBpZGxlIFxnPGY+ImltYWdlcy9pbnRlcmZhY2UvUGxheWVyX21lbnUvcmVsYXRpb25zaGlwc19cZzxzdGF0dXM+LndlYnAiOlxyXG5cZzx0YWJzMT4gICAgYXQgdHJhbnNmb3JtOlxyXG5cZzx0YWJzMT4gICAgICAgIHpvb20gaGlnaF9yZXNvbHV0aW9uX2ludGVyZmFjZV9hZGp1c3RtZW50XHJcblxnPHRhYnMxPiAgICBhY3Rpb24gU2V0RGljdChjdXJyZW50X3JlbGF0aW9uc2hpcHNfRW50cnkuc3RhdHVzLCBcZzxmPiJcZzxzdGF0dXM+IiwgMCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjYWRkaW5nIGJ1dHRvbiB0aGF0IGFsbG93cyBmb3IgcmVtb3ZhbCBvZiBjaGVhdGluZwogICAgcGF0dD0nICAgICAgICB0ZXh0ICJSRUxBVElPTlNISVAgU1RBVFVTIiBhbmNob3IgXCgwXC4wLCAwXC41XCkgcG9zIFwoMFwuNDk1LCAwXC4zOThcKTpbXHJcbl0rICAgICAgICAgICAgZm9udCAiYWdlbmN5X2ZiXC50dGYiW1xyXG5dK1tcclxuXSsgICAgICAgICAgICBzaXplICg/UDxzaXplPjI4KScKICAgIHJlcGw9JyAgICAgICAgdGV4dGJ1dHRvbiAie3NpemU9Mjh9e2ZvbnQ9YWdlbmN5X2ZiLnR0Zn0gUkVMQVRJT05TSElQIFNUQVRVUyIgYW5jaG9yICgwLjAsIDAuNSkgcG9zICgw
set cheat3=LjQ5NSwgMC4zOTgpOlxyXG4gICAgICAgICAgICBhY3Rpb24gRnVuY3Rpb24ocmVtb3ZlQ2hlYXRpbmcsIGN1cnJlbnRfcmVsYXRpb25zaGlwc19FbnRyeSknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjZnJpZW5kc2hpcCBpcyB0aGUgYmVzdCB0aGluZyBldmVyISAoYWxsb3dzIGZvciBjbGlja2luZyBvbiBmcmllbmRzaGlwIHRvIGluY3JlYXNlIGl0IGJ5IDUwKQogICAgcGF0dD0nKD9QPHRhYnM+ICspYWRkICJpbWFnZXMvaW50ZXJmYWNlL3Bob3Rvcy9cW0NcXVwud2VicCIgYWxpZ24gKD9QPGFsZ24+XChbYS16MC05LC4gXStcKSkgem9vbSAoP1A8em9vbT4wXC5bMC05XSspJwogICAgcmVwbD0nXGc8dGFicz5pbWFnZWJ1dHRvbiBpZGxlIGYiaW1hZ2VzL2ludGVyZmFjZS9waG90b3Mve0N9LndlYnAiIGFsaWduIFxnPGFsZ24+OlxuXGc8dGFicz4gICAgYXQgdHJhbnNmb3JtOlxuXGc8dGFicz4gICAgICAgIHpvb20gMC4xM1xyXG5cZzx0YWJzPiAgICBhY3Rpb24gU2V0RGljdChjdXJyZW50X3JlbGF0aW9uc2hpcHNfRW50cnkuZnJpZW5kc2hpcCwgZiJ7Q30iLCBjdXJyZW50X3JlbGF0aW9uc2hpcHNfRW50cnkuZnJpZW5kc2hpcFtDXSArIDUwKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCnBsYXllcl9tZW51KCkKCgojPT09PT09PT09PT09PSAgLi9zY3JpcHRzL2ludGVyZmFjZS9hY3Rpb25zLnJweSA9PT09PT09PT0KZGVmIGFjdGlvbnMoKToKICAgIGZuPSIuL3NjcmlwdHMvaW50ZXJmYWNlL2FjdGlvbnMucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICNzZXRzIHRleHQgc3RhbWluYSBpbnRvIHRleHRidXR0b24KICAgIHBhdHQ9JyAgICAgICAgdGV4dCAiXFtQbGF5ZXIuc3RhbWluYVxdIiAoP1A8cG9zPmFuY2hvciBcKFswLTkuXSssIFswLTkuXStcKSBwb3MgXChbMC05Ll0rLCBbMC05Ll0rXCkpOlsgXHJcbl0rICAgICAgICAgICAgc2l6ZSAoP1A8c2l6ZT5bMC05XSspJwogICAgcmVwbD0nICAgICAgICB0ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn0iICsgIltQbGF5ZXIuc3RhbWluYV0iIFxnPHBvcz46XG4gICAgICAgICAgICBhY3Rpb24gU2V0VmFyaWFibGUoIlBsYXllci5zdGFtaW5hIiwgUGxheWVyLm1heF9zdGFtaW5hICsgUGxheWVyLnN0YW1pbmEpJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgcGF0dD0nICAgICAgICB0ZXh0ICJcW0NoYXJhY3Rlci5zdGFtaW5hXF0iICg/UDxwb3M+YW5jaG9yIFwoWzAtOS5dKywgWzAtOS5dK1wpIHBvcyBcKFswLTkuXSssIFswLTkuXStcKSk6WyBcclxuXSsgICAgICAgICAgICBzaXplICg/UDxzaXplPlswLTldKyknCiAgICByZXBsPScgICAgICAgIHRleHRidXR0b24gIntzaXplPVxnPHNpemU+fSIgKyAiW0NoYXJhY3Rlci5zdGFtaW5hXSIgXGc8cG9zPjpcbiAgICAgICAgICAgIGFjdGlvbiBTZXRWYXJpYWJsZSgiZm9jdXNlZF9DaGFyYWN0ZXIuc3RhbWluYSIsIGZvY3VzZWRfQ2hhcmFjdGVyLm1heF9zdGFtaW5hICsgQ2hhcmFjdGVyLnN0YW1pbmEpJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI3NldHMgcGxheWVyIGFuZCBjaGFyYWN0ZXIgZGVzaXJlIHZhbHVlcyBpbnRvIGZpZWxkIHZhbHVlcywgYWthLCBpbnRlcmFjdGFibGUgc2xpZGluZyBiYXJzCiAgICBwYXR0PSd2YWx1ZSAoP1A8Y3A+UGxheWVyfENoYXJhY3RlcikuZGVzaXJlJwogICAgcmVwbD0ndmFsdWUgRmllbGRWYWx1ZShcZzxjcD4sICJkZXNpcmUiLCAxMDApJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgphY3Rpb25zKCkKCiM9PT09PT09PT09PSAuL3NjcmlwdHMvbWVjaGFuaWNzL2FwcHJvdmFsLnJweQpkZWYgYXBwcm92YWwoKToKICAgIGZuPSIuL3NjcmlwdHMvbWVjaGFuaWNzL2FwcHJvdmFsLnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjYnJlYWtzIGFwcHJvdmFsIGxpbWl0CiAgICBwYXR0PSdbMC05XXszLH0sJwogICAgcmVwbD0nOTk5OTksJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHBhdHQ9JywgWzAtOV17Myx9XF0nCiAgICByZXBsPScsIDk5OTk5XScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCmFwcHJvdmFsKCkKCgojIz09PT09PT09PT09IGFsbG93aW5nIHNleCBpbiBwdWJsaWMuIFByb3BzIHRvIFJvbkNob24uIDIgQ2hlY2tzIGluIHBsYWNlIHRvIHByZXZlbnQgdGhpcy4KIyMgRGlkIEkgZG8gdGhpcyBiZWNhdXNlIGRhcmtzdGVsIGNvdWxkbid0IGdldCBvdmVyIGhpbXNlbGY/IFllcC4gSXMgaXQgYSBiaXQgaW1tYXR1cmU/IFllcC4gRG8gSSBmZWVsIGFzaGFtZWQ/IE5vcGUuIElmIHlvdSBkb24ndCB3YW50IGNvZGUgdG8gY2hhbmdlLCBkb24ndCBwb2tlIGEgcHJvZ3JhbW1lci4KIyM9PT09PT09PT09PSAuL3NjcmlwdHMvc2V4L3JlcXVlc3QucnB5CiM9PT09PT09PT09PSAuL3NjcmlwdHMvbWVjaGFuaWNzL2FwcHJvdmFsLnJweQpkZWYgYWxsb3dQdWJsaWNTZXgoKToKICAgIGZuPSIuL3NjcmlwdHMvc2V4L3JlcXVlc3QucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICNza2lwcyBiZWRyb29tIGNoZWNrIGZvciBwbGFjZSB0byBoYXZlIHNleAogICAgcGF0dD0nZWxpZiBQbGF5ZXIubG9jYXRpb24gbm90IGluIGJlZHJvb21zIGFuZCAiYmdfc2hvd2VyIiBub3QgaW4gUGxheWVyLmxvY2F0aW9uJwogICAgcmVwbD0nZWxpZiBGYWxzZSBhbmQgUGxheWVyLmxvY2F0aW9uIG5vdCBpbiBiZWRyb29tcyBhbmQgImJnX3Nob3dlciIgbm90IGluIFBsYXllci5sb2NhdGlvbicKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCgogICAgI3NraXBzIHBlb3BsZSBhcm91bmQgY2hlY2sKICAgIHBhdHQ9JyAgICBlbGlmIGxlblwoUHJlc2VudFwpID4gMTonCiAgICByZXBsPScgICAgZWxpZiBGYWxzZSBhbmQgbGVuKFByZXNlbnQpID4gMTonCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgoKICAgIGZuPSIuL3NjcmlwdHMvaW50ZXJmYWNlL2ludGVyYWN0aW9ucy5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgI3NraXBzIGJlZHJvb20g
set cheat4=Y2hlY2tzIGFuZCBudW1iZXIgb2YgcGVvcGxlIGNoZWNrcyBmb3IgcGxhY2UgdG8gaGF2ZSBzZXggR1VJCiAgICBwYXR0PSdpZiBhcHByb3ZhbF9jaGVja1woQ2hhcmFjdGVyLCB0aHJlc2hvbGQgPSAiaG9va3VwIlwpIGFuZCBsZW5cKFByZXNlbnRcKSA9PSAxIGFuZCBQbGF5ZXIubG9jYXRpb24gaW4gXFtDaGFyYWN0ZXIuaG9tZSwgUGxheWVyLmhvbWVcXSBhbmQgbm90IGdldF9QcmVzZW50XChsb2NhdGlvbiA9IFBsYXllci5sb2NhdGlvbi5yZXBsYWNlXCgiXyIsICJfc2hvd2VyXyJcKVwpXFswXF0nCiAgICByZXBsPSdpZiBhcHByb3ZhbF9jaGVjayhDaGFyYWN0ZXIsIHRocmVzaG9sZCA9ICJob29rdXAiKSBhbmQgbGVuKFByZXNlbnQpID49IDEnCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgphbGxvd1B1YmxpY1NleCgpCgoKIz09PT09PT09PT09IC4vc2NyaXB0cy9tZWNoYW5pY3MvbW92ZW1lbnQucnB5CmRlZiBtb3ZlbWVudCgpOgogICAgZm49Ii4vc2NyaXB0cy9tZWNoYW5pY3MvbW92ZW1lbnQucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICNjaGFyYWN0ZXIgd29uJ3Qgd2lwZSBvZmYgY3VtIHdoZW4gZXhpdGluZyBiZWQgcm9vbSBhZnRlciB3ZWFyaW5nIGN1bSAxMCB0aW1lcwogICAgcGF0dD0nICAgICAgICAgICAgICAgIGlmIHRlbXBfQ2hhcmFjdGVyc1xbMFxdXC5zcHVua1xbbG9jYXRpb25cXScKICAgIHJlcGw9JyAgICAgICAgICAgICAgICBpZiB0ZW1wX0NoYXJhY3RlcnNbMF0uSGlzdG9yeS5jaGVjaygid2Vhcl9jdW0iKSA8IDEwIGFuZCB0ZW1wX0NoYXJhY3RlcnNbMF0uc3B1bmtbbG9jYXRpb25dJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKbW92ZW1lbnQoKQoKCgpwcmludChmIiAgICBTdWNjZXNzISBDaGVhdHMgYXJlIG5vdyBlbmFibGVkISIpCg==
REM --------------------------------------------------------------------------------
REM !! DO NOT EDIT BELOW THIS LINE !!
REM --------------------------------------------------------------------------------
set "v=1.9beta"
title TNH Inject v%v%
:init
REM --------------------------------------------------------------------------------
REM Splash screen
REM --------------------------------------------------------------------------------
cls

echo  ----------------------------------------------------
echo.
echo  The Null Hypothesis Cheat Injector 
echo.             
echo   Vesrion: %v%
echo   by Sleepingkirby
echo   built on top of RL Cheat Injector by SLDR @ F95zone.com
echo  ----------------------------------------------------
echo.
echo.


REM --------------------------------------------------------------------------------
REM We need powershell for later, make sure it exists
REM --------------------------------------------------------------------------------
if not exist "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe" (
	echo    ! Error: Powershell is required, unable to continue.
	echo             This is included in Windows 7, 8, 10. XP/Vista users can
	echo             download it here: http://support.microsoft.com/kb/968929
	echo.
	pause>nul|set/p=.            Press any key to exit...
	exit
)

REM --------------------------------------------------------------------------------
REM Set our paths, and make sure we can find python exe
REM --------------------------------------------------------------------------------
set "currentdir=%~dp0%"
set "pythondir=%currentdir%..\lib\py3-windows-x86_64\"
set "renpydir=%currentdir%..\renpy\"
set "gamedir=%currentdir%"
if exist "game" if exist "lib" if exist "renpy" (
	set "pythondir=%currentdir%lib\py3-windows-x86_64\"
	set "renpydir=%currentdir%renpy\"
	set "gamedir=%currentdir%game\"
)

if not exist "%pythondir%python.exe" (
	echo    ! Error: Cannot locate python.exe, unable to continue.
	echo             Are you sure we're in the game's root directory?
	echo.
	pause>nul|set/p=.            Press any key to exit...
	exit
)

:menu
REM --------------------------------------------------------------------------------
REM Menu selection
REM --------------------------------------------------------------------------------
set exitoption=
echo   Available Options:
echo     1) Apply cheat
echo     2) Quit
echo.
set /p option=.  Enter a number: 
echo.
echo  ----------------------------------------------------
echo.
if "%option%" == "2" (
    goto quit
)

if exist "%gamedir%scripts\interface\Player_menu.rpy.orig" (
echo Backup files found. This probably means it was already patched. No need to further action. Exitting...
)

echo No backup's found. Safe to progress.

REM --------------------------------------------------------------------------------
REM Write _rpatool.py from our base64 strings
REM --------------------------------------------------------------------------------
set "rpatool=%currentdir%_rpatool.py"
echo   Creating rpatool...
if exist "%rpatool%.tmp" (
	del "%rpatool%.tmp"
)
if exist "%rpatool%" (
	del "%rpatool%"
)

echo %rpatool1%>> "%rpatool%.tmp"
echo %rpatool2%>> "%rpatool%.tmp"
echo %rpatool3%>> "%rpatool%.tmp"
echo %rpatool4%>> "%rpatool%.tmp"
echo %rpatool5%>> "%rpatool%.tmp"
echo %rpatool6%>> "%rpatool%.tmp"
set "rpatoolps=%rpatool:[=`[%"
set "rpatoolps=%rpatoolps:]=`]%"
set "rpatoolps=%rpatoolps:^=^^%"
set "rpatoolps=%rpatoolps:&=^&%"
powershell.exe -nologo -noprofile -noninteractive -command "& { [IO.File]::WriteAllBytes(\"%rpatoolps%\", [Convert]::FromBase64String([IO.File]::ReadAllText(\"%rpatoolps%.tmp\"))) }"

echo.

REM --------------------------------------------------------------------------------
REM Unpack RPA
REM --------------------------------------------------------------------------------
echo   Searching for RPA packages
cd "%gamedir%"
set "PYTHONPATH=%pythondir%Lib"
for %%f in (*.rpa) do (
	echo    + Unpacking "%%~nf%%~xf" - %%~zf bytes
	"%pythondir%python.exe" -O "%rpatool%" -x "%%f"
)
echo.

REM --------------------------------------------------------------------------------
REM Clean up
REM --------------------------------------------------------------------------------
echo   Cleaning up temporary files...
del "%rpatool%.tmp"
del "%rpatool%"
echo.
if "%option%" == "2" (
	goto finish
)

:cheat
REM --------------------------------------------------------------------------------
REM Make sure cheat.py doesn't already exist
REM --------------------------------------------------------------------------------
set "cheat=%currentdir%_cheat.py"
echo   Creating cheat...
if exist "%cheat%.tmp" (
	del "%cheat%.tmp"
)
if exist "%cheat%" (
	del "%cheat%"
)

REM --------------------------------------------------------------------------------
REM Create cheat.py
REM --------------------------------------------------------------------------------
echo %cheat1%>> "%cheat%.tmp"
echo %cheat2%>> "%cheat%.tmp"
echo %cheat3%>> "%cheat%.tmp"
echo %cheat4%>> "%cheat%.tmp"
set "cheatps=%cheat:[=`[%"
set "cheatps=%cheatps:]=`]%"
set "cheatps=%cheatps:^=^^%"
set "cheatps=%cheatps:&=^&%"
powershell.exe -nologo -noprofile -noninteractive -command "& { [IO.File]::WriteAllBytes(\"%cheatps%\", [Convert]::FromBase64String([IO.File]::ReadAllText(\"%cheatps%.tmp\"))) }"

REM --------------------------------------------------------------------------------
REM Run cheat.py
REM --------------------------------------------------------------------------------
cd "%gamedir%"
"%pythondir%python.exe" -O "%cheat%"

echo.

REM --------------------------------------------------------------------------------
REM Delete temporary files
REM --------------------------------------------------------------------------------
echo   Cleaning up temporary files...
del "%cheat%.tmp"
del "%cheat%"
echo.
goto finish


:finish
REM --------------------------------------------------------------------------------
REM We are done
REM --------------------------------------------------------------------------------
echo  ----------------------------------------------------
echo.
echo    Finished!
echo.
echo    Enter "1" to go back to the menu, or any other
set /p exitoption=.   key to exit: 
echo.
echo  ----------------------------------------------------
echo.
if "%exitoption%"=="1" goto menu

:quit
exit
