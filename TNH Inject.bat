@echo off
REM The following variables are Base64 encoded strings for unrpyc and rpatool
REM Due to batch limitations on variable lengths, they need to be split into
REM multiple variables, and joined later using powershell.
REM --------------------------------------------------------------------------------
REM rpatool f2520ad - https://github.com/Shizmob/rpatool
REM --------------------------------------------------------------------------------
set rpatool1=IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IGNvZGVjcwppbXBvcnQgcGlja2xlCmltcG9ydCBlcnJubwppbXBvcnQgcmFuZG9tCnRyeToKICAgIGltcG9ydCBwaWNrbGU1IGFzIHBpY2tsZQpleGNlcHQ6CiAgICBpbXBvcnQgcGlja2xlCiAgICBpZiBzeXMudmVyc2lvbl9pbmZvIDwgKDMsIDgpOgogICAgICAgIHByaW50KCd3YXJuaW5nOiBwaWNrbGU1IG1vZHVsZSBjb3VsZCBub3QgYmUgbG9hZGVkIGFuZCBQeXRob24gdmVyc2lvbiBpcyA8IDMuOCwnLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcHJpbnQoJyAgICAgICAgIG5ld2VyIFJlblwnUHkgZ2FtZXMgbWF5IGZhaWwgdG8gdW5wYWNrIScsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvID49ICgzLCA1KToKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgIGlmIHRoaXMgb2NjdXJzLCBmaXggaXQgYnkgaW5zdGFsbGluZyBwaWNrbGU1OicsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgICAgICB7fSAtbSBwaXAgaW5zdGFsbCBwaWNrbGU1Jy5mb3JtYXQoc3lzLmV4ZWN1dGFibGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgIGlmIHRoaXMgb2NjdXJzLCBwbGVhc2UgdXBncmFkZSB0byBhIG5ld2VyIFB5dGhvbiAoPj0gMy41KS4nLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcHJpbnQoZmlsZT1zeXMuc3RkZXJyKQoKCmlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPj0gMzoKICAgIGRlZiBfdW5pY29kZSh0ZXh0KToKICAgICAgICByZXR1cm4gdGV4dAoKICAgIGRlZiBfcHJpbnRhYmxlKHRleHQpOgogICAgICAgIHJldHVybiB0ZXh0CgogICAgZGVmIF91bm1hbmdsZShkYXRhKToKICAgICAgICBpZiB0eXBlKGRhdGEpID09IGJ5dGVzOgogICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBkYXRhLmVuY29kZSgnbGF0aW4xJykKCiAgICBkZWYgX3VucGlja2xlKGRhdGEpOgogICAgICAgICMgU3BlY2lmeSBsYXRpbjEgZW5jb2RpbmcgdG8gcHJldmVudCByYXcgYnl0ZSB2YWx1ZXMgZnJvbSBjYXVzaW5nIGFuIEFTQ0lJIGRlY29kZSBlcnJvci4KICAgICAgICByZXR1cm4gcGlja2xlLmxvYWRzKGRhdGEsIGVuY29kaW5nPSdsYXRpbjEnKQplbGlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMjoKICAgIGRlZiBfdW5pY29kZSh0ZXh0KToKICAgICAgICBpZiBpc2luc3RhbmNlKHRleHQsIHVuaWNvZGUpOgogICAgICAgICAgICByZXR1cm4gdGV4dAogICAgICAgIHJldHVybiB0ZXh0LmRlY29kZSgndXRmLTgnKQoKICAgIGRlZiBfcHJpbnRhYmxlKHRleHQpOgogICAgICAgIHJldHVybiB0ZXh0LmVuY29kZSgndXRmLTgnKQoKICAgIGRlZiBfdW5tYW5nbGUoZGF0YSk6CiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBkZWYgX3VucGlja2xlKGRhdGEpOgogICAgICAgIHJldHVybiBwaWNrbGUubG9hZHMoZGF0YSkKCmNsYXNzIFJlblB5QXJjaGl2ZToKICAgIGZpbGUgPSBOb25lCiAgICBoYW5kbGUgPSBOb25lCgogICAgZmlsZXMgPSB7fQogICAgaW5kZXhlcyA9IHt9CgogICAgdmVyc2lvbiA9IE5vbmUKICAgIHBhZGxlbmd0aCA9IDAKICAgIGtleSA9IE5vbmUKICAgIHZlcmJvc2UgPSBGYWxzZQoKICAgIFJQQTJfTUFHSUMgPSAnUlBBLTIuMCAnCiAgICBSUEEzX01BR0lDID0gJ1JQQS0zLjAgJwogICAgUlBBM18yX01BR0lDID0gJ1JQQS0zLjIgJwoKICAgICMgRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG90aGVyd2lzZSBQeXRob24zLXBhY2tlZCBhcmNoaXZlcyB3b24ndCBiZSByZWFkIGJ5IFB5dGhvbjIKICAgIFBJQ0tMRV9QUk9UT0NPTCA9IDIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZmlsZSA9IE5vbmUsIHZlcnNpb24gPSAzLCBwYWRsZW5ndGggPSAwLCBrZXkgPSAweERFQURCRUVGLCB2ZXJib3NlID0gRmFsc2UpOgogICAgICAgIHNlbGYucGFkbGVuZ3RoID0gcGFkbGVuZ3RoCiAgICAgICAgc2VsZi5rZXkgPSBrZXkKICAgICAgICBzZWxmLnZlcmJvc2UgPSB2ZXJib3NlCgogICAgICAgIGlmIGZpbGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYubG9hZChmaWxlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudmVyc2lvbiA9IHZlcnNpb24KCiAgICBkZWYgX19kZWxfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLmhhbmRsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5oYW5kbGUuY2xvc2UoKQoKICAgICMgRGV0ZXJtaW5lIGFyY2hpdmUgdmVyc2lvbi4KICAgIGRlZiBnZXRfdmVyc2lvbihzZWxmKToKICAgICAgICBzZWxmLmhhbmRsZS5zZWVrKDApCiAgICAgICAgbWFnaWMgPSBzZWxmLmhhbmRsZS5yZWFkbGluZSgpLmRlY29kZSgndXRmLTgnKQoKICAgICAgICBpZiBtYWdpYy5zdGFydHN3aXRoKHNlbGYuUlBBM18yX01BR0lDKToKICAgICAgICAgICAgcmV0dXJuIDMuMgogICAgICAgIGVsaWYgbWFnaWMuc3RhcnRzd2l0aChzZWxmLlJQQTNfTUFHSUMpOgogICAgICAgICAgICByZXR1cm4gMwogICAgICAgIGVsaWYgbWFnaWMuc3RhcnRzd2l0aChzZWxmLlJQQTJfTUFHSUMpOgogICAgICAgICAgICByZXR1cm4gMgogICAgICAgIGVsaWYgc2VsZi5maWxlLmVuZHN3aXRoKCcucnBpJyk6CiAgICAgICAgICAgIHJldHVybiAxCgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3RoZSBnaXZlbiBmaWxlIGlzIG5vdCBhIHZhbGlkIFJlblwnUHkgYXJjaGl2ZSwgb3IgYW4gdW5zdXBwb3J0ZWQgdmVyc2lvbicpCgogICAgIyBFeHRyYWN0IGZpbGUgaW5kZXhlcyBmcm9tIG9wZW5lZCBhcmNoaXZlLgogICAgZGVmIGV4dHJhY3RfaW5kZXhlcyhzZWxmKToKICAgICAgICBzZWxmLmhhbmRsZS5zZWVrKDApCiAgICAgICAgaW5kZXhlcyA9IE5vbmUKCiAgICAgICAgaWYgc2VsZi52ZXJzaW9uIGluIFsyLCAzLCAzLjJdOgogICAgICAgICAgICAjIEZldGNoIG1ldGFkYXRhLgogICAgICAgICAgICBtZXRhZGF0YSA9IHNlbGYuaGFuZGxlLnJlYWRsaW5lKCkKICAgICAgICAgICAgdmFscyA9IG1ldGFkYXRhLnNwbGl0KCkKICAgICAgICAgICAgb2Zmc2V0ID0gaW50KHZhbHNbMV0sIDE2KQogICAgICAgICAgICBpZiBzZWxmLnZlcnNpb24gPT0gMzoKICAgICAgICAgICAgICAgIHNlbGYua2V5ID0gMAogICAgICAgICAgICAgICAgZm9yIHN1YmtleSBpbiB2YWxzWzI6XToKICAgICAgICAgICAgICAgICAgICBzZWxmLmtleSBePSBpbnQoc3Via2V5LCAxNikKICAgICAgICAgICAgZWxpZiBzZWxmLnZlcnNpb24gPT0gMy4yOgogICAgICAgICAgICAgICAgc2VsZi5rZXkgPSAwCiAgICAgICAgICAgICAgICBmb3Igc3Via2V5IGluIHZhbHNbMzpdOgogICAgICAgICAgICAgICAgICAgIHNlbGYua2V5IF49IGludChzdWJrZXksIDE2KQoKICAgICAgICAgICAgIyBMb2FkIGluIGluZGV4ZXMuCiAgICAgICAgICAgIHNlbGYuaGFuZGxlLnNlZWsob2Zmc2V0KQogICAgICAgICAgICBjb250ZW50cyA9IGNvZGVjcy5kZWNvZGUoc2VsZi5oYW5kbGUucmVhZCgpLCAnemxpYicpCiAgICAgICAgICAgIGluZGV4ZXMgPSBfdW5waWNrbGUoY29udGVudHMpCgogICAgICAg
set rpatool2=ICAgICAjIERlb2JmdXNjYXRlIGluZGV4ZXMuCiAgICAgICAgICAgIGlmIHNlbGYudmVyc2lvbiBpbiBbMywgMy4yXToKICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRfaW5kZXhlcyA9IGluZGV4ZXMKICAgICAgICAgICAgICAgIGluZGV4ZXMgPSB7fQogICAgICAgICAgICAgICAgZm9yIGkgaW4gb2JmdXNjYXRlZF9pbmRleGVzLmtleXMoKToKICAgICAgICAgICAgICAgICAgICBpZiBsZW4ob2JmdXNjYXRlZF9pbmRleGVzW2ldWzBdKSA9PSAyOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2ldID0gWyAob2Zmc2V0IF4gc2VsZi5rZXksIGxlbmd0aCBeIHNlbGYua2V5KSBmb3Igb2Zmc2V0LCBsZW5ndGggaW4gb2JmdXNjYXRlZF9pbmRleGVzW2ldIF0KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2ldID0gWyAob2Zmc2V0IF4gc2VsZi5rZXksIGxlbmd0aCBeIHNlbGYua2V5LCBwcmVmaXgpIGZvciBvZmZzZXQsIGxlbmd0aCwgcHJlZml4IGluIG9iZnVzY2F0ZWRfaW5kZXhlc1tpXSBdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW5kZXhlcyA9IHBpY2tsZS5sb2Fkcyhjb2RlY3MuZGVjb2RlKHNlbGYuaGFuZGxlLnJlYWQoKSwgJ3psaWInKSkKCiAgICAgICAgcmV0dXJuIGluZGV4ZXMKCiAgICAjIEdlbmVyYXRlIHBzZXVkb3JhbmRvbSBwYWRkaW5nIChmb3Igd2hhdGV2ZXIgcmVhc29uKS4KICAgIGRlZiBnZW5lcmF0ZV9wYWRkaW5nKHNlbGYpOgogICAgICAgIGxlbmd0aCA9IHJhbmRvbS5yYW5kaW50KDEsIHNlbGYucGFkbGVuZ3RoKQoKICAgICAgICBwYWRkaW5nID0gJycKICAgICAgICB3aGlsZSBsZW5ndGggPiAwOgogICAgICAgICAgICBwYWRkaW5nICs9IGNocihyYW5kb20ucmFuZGludCgxLCAyNTUpKQogICAgICAgICAgICBsZW5ndGggLT0gMQoKICAgICAgICByZXR1cm4gYnl0ZXMocGFkZGluZywgJ3V0Zi04JykKCiAgICAjIENvbnZlcnRzIGEgZmlsZW5hbWUgdG8gYXJjaGl2ZSBmb3JtYXQuCiAgICBkZWYgY29udmVydF9maWxlbmFtZShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgKGRyaXZlLCBmaWxlbmFtZSkgPSBvcy5wYXRoLnNwbGl0ZHJpdmUob3MucGF0aC5ub3JtcGF0aChmaWxlbmFtZSkucmVwbGFjZShvcy5zZXAsICcvJykpCiAgICAgICAgcmV0dXJuIGZpbGVuYW1lCgogICAgIyBEZWJ1ZyAodmVyYm9zZSkgbWVzc2FnZXMuCiAgICBkZWYgdmVyYm9zZV9wcmludChzZWxmLCBtZXNzYWdlKToKICAgICAgICBpZiBzZWxmLnZlcmJvc2U6CiAgICAgICAgICAgIHByaW50KG1lc3NhZ2UpCgoKICAgICMgTGlzdCBmaWxlcyBpbiBhcmNoaXZlIGFuZCBjdXJyZW50IGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgbGlzdChzZWxmKToKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmluZGV4ZXMua2V5cygpKSArIGxpc3Qoc2VsZi5maWxlcy5rZXlzKCkpCgogICAgIyBDaGVjayBpZiBhIGZpbGUgZXhpc3RzIGluIHRoZSBhcmNoaXZlLgogICAgZGVmIGhhc19maWxlKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQogICAgICAgIHJldHVybiBmaWxlbmFtZSBpbiBzZWxmLmluZGV4ZXMua2V5cygpIG9yIGZpbGVuYW1lIGluIHNlbGYuZmlsZXMua2V5cygpCgogICAgIyBSZWFkIGZpbGUgZnJvbSBhcmNoaXZlIG9yIGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgcmVhZChzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZmlsZW5hbWUgPSBzZWxmLmNvbnZlcnRfZmlsZW5hbWUoX3VuaWNvZGUoZmlsZW5hbWUpKQoKICAgICAgICAjIENoZWNrIGlmIHRoZSBmaWxlIGV4aXN0cyBpbiBvdXIgaW5kZXhlcy4KICAgICAgICBpZiBmaWxlbmFtZSBub3QgaW4gc2VsZi5maWxlcyBhbmQgZmlsZW5hbWUgbm90IGluIHNlbGYuaW5kZXhlczoKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcihlcnJuby5FTk9FTlQsICd0aGUgcmVxdWVzdGVkIGZpbGUgezB9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBnaXZlbiBSZW5cJ1B5IGFyY2hpdmUnLmZvcm1hdCgKICAgICAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpKSkKCiAgICAgICAgIyBJZiBpdCdzIGluIG91ciBvcGVuZWQgYXJjaGl2ZSBpbmRleCwgYW5kIG91ciBhcmNoaXZlIGhhbmRsZSBpc24ndCB2YWxpZCwgc29tZXRoaW5nIGlzIG9idmlvdXNseSB3cm9uZy4KICAgICAgICBpZiBmaWxlbmFtZSBub3QgaW4gc2VsZi5maWxlcyBhbmQgZmlsZW5hbWUgaW4gc2VsZi5pbmRleGVzIGFuZCBzZWxmLmhhbmRsZSBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBJT0Vycm9yKGVycm5vLkVOT0VOVCwgJ3RoZSByZXF1ZXN0ZWQgZmlsZSB7MH0gZG9lcyBub3QgZXhpc3QgaW4gdGhlIGdpdmVuIFJlblwnUHkgYXJjaGl2ZScuZm9ybWF0KAogICAgICAgICAgICAgICAgX3ByaW50YWJsZShmaWxlbmFtZSkpKQoKICAgICAgICAjIENoZWNrIG91ciBzaW1wbGlmaWVkIGludGVybmFsIGluZGV4ZXMgZmlyc3QsIGluIGNhc2Ugc29tZW9uZSB3YW50cyB0byByZWFkIGEgZmlsZSB0aGV5IGFkZGVkIGJlZm9yZSB3aXRob3V0IHNhdmluZywgZm9yIHNvbWUgdW5ob2x5IHJlYXNvbi4KICAgICAgICBpZiBmaWxlbmFtZSBpbiBzZWxmLmZpbGVzOgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlYWRpbmcgZmlsZSB7MH0gZnJvbSBpbnRlcm5hbCBzdG9yYWdlLi4uJy5mb3JtYXQoX3ByaW50YWJsZShmaWxlbmFtZSkpKQogICAgICAgICAgICByZXR1cm4gc2VsZi5maWxlc1tmaWxlbmFtZV0KICAgICAgICAjIFdlIG5lZWQgdG8gcmVhZCB0aGUgZmlsZSBmcm9tIG91ciBvcGVuIGFyY2hpdmUuCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBSZWFkIG9mZnNldCBhbmQgbGVuZ3RoLCBzZWVrIHRvIHRoZSBvZmZzZXQgYW5kIHJlYWQgdGhlIGZpbGUgY29udGVudHMuCiAgICAgICAgICAgIGlmIGxlbihzZWxmLmluZGV4ZXNbZmlsZW5hbWVdWzBdKSA9PSAzOgogICAgICAgICAgICAgICAgKG9mZnNldCwgbGVuZ3RoLCBwcmVmaXgpID0gc2VsZi5pbmRleGVzW2ZpbGVuYW1lXVswXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgKG9mZnNldCwgbGVuZ3RoKSA9IHNlbGYuaW5kZXhlc1tmaWxlbmFtZV1bMF0KICAgICAgICAgICAgICAgIHByZWZpeCA9ICcnCgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlYWRpbmcgZmlsZSB7MH0gZnJvbSBkYXRhIGZpbGUgezF9Li4uIChvZmZzZXQgPSB7Mn0sIGxlbmd0aCA9IHszfSBieXRlcyknLmZvcm1hdCgKICAgICAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpLCBzZWxmLmZpbGUsIG9mZnNldCwgbGVuZ3RoKSkKICAgICAgICAgICAgc2VsZi5oYW5kbGUuc2VlayhvZmZzZXQpCiAgICAgICAgICAgIHJldHVybiBfdW5tYW5nbGUocHJlZml4KSArIHNlbGYuaGFuZGxlLnJlYWQobGVuZ3RoIC0gbGVuKHByZWZpeCkpCgogICAgIyBNb2RpZnkgYSBmaWxlIGluIGFyY2hpdmUgb3IgaW50ZXJuYWwgc3RvcmFnZS4KICAgIGRlZiBjaGFuZ2Uoc2VsZiwgZmlsZW5hbWUsIGNvbnRlbnRzKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQoKICAgICAgICAjIE91ciAnY2hhbmdlJyBpcyBiYXNpY2FsbHkgcmVtb3ZpbmcgdGhlIGZpbGUgZnJvbSBvdXIgaW5kZXhlcyBmaXJz
set rpatool3=dCwgYW5kIHRoZW4gcmUtYWRkaW5nIGl0LgogICAgICAgIHNlbGYucmVtb3ZlKGZpbGVuYW1lKQogICAgICAgIHNlbGYuYWRkKGZpbGVuYW1lLCBjb250ZW50cykKCiAgICAjIEFkZCBhIGZpbGUgdG8gdGhlIGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgYWRkKHNlbGYsIGZpbGVuYW1lLCBjb250ZW50cyk6CiAgICAgICAgZmlsZW5hbWUgPSBzZWxmLmNvbnZlcnRfZmlsZW5hbWUoX3VuaWNvZGUoZmlsZW5hbWUpKQogICAgICAgIGlmIGZpbGVuYW1lIGluIHNlbGYuZmlsZXMgb3IgZmlsZW5hbWUgaW4gc2VsZi5pbmRleGVzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdmaWxlIHswfSBhbHJlYWR5IGV4aXN0cyBpbiBhcmNoaXZlJy5mb3JtYXQoX3ByaW50YWJsZShmaWxlbmFtZSkpKQoKICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ0FkZGluZyBmaWxlIHswfSB0byBhcmNoaXZlLi4uIChsZW5ndGggPSB7MX0gYnl0ZXMpJy5mb3JtYXQoCiAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpLCBsZW4oY29udGVudHMpKSkKICAgICAgICBzZWxmLmZpbGVzW2ZpbGVuYW1lXSA9IGNvbnRlbnRzCgogICAgIyBSZW1vdmUgYSBmaWxlIGZyb20gYXJjaGl2ZSBvciBpbnRlcm5hbCBzdG9yYWdlLgogICAgZGVmIHJlbW92ZShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZmlsZW5hbWUgPSBfdW5pY29kZShmaWxlbmFtZSkKICAgICAgICBpZiBmaWxlbmFtZSBpbiBzZWxmLmZpbGVzOgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlbW92aW5nIGZpbGUgezB9IGZyb20gaW50ZXJuYWwgc3RvcmFnZS4uLicuZm9ybWF0KF9wcmludGFibGUoZmlsZW5hbWUpKSkKICAgICAgICAgICAgZGVsIHNlbGYuZmlsZXNbZmlsZW5hbWVdCiAgICAgICAgZWxpZiBmaWxlbmFtZSBpbiBzZWxmLmluZGV4ZXM6CiAgICAgICAgICAgIHNlbGYudmVyYm9zZV9wcmludCgnUmVtb3ZpbmcgZmlsZSB7MH0gZnJvbSBhcmNoaXZlIGluZGV4ZXMuLi4nLmZvcm1hdChfcHJpbnRhYmxlKGZpbGVuYW1lKSkpCiAgICAgICAgICAgIGRlbCBzZWxmLmluZGV4ZXNbZmlsZW5hbWVdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcihlcnJuby5FTk9FTlQsICd0aGUgcmVxdWVzdGVkIGZpbGUgezB9IGRvZXMgbm90IGV4aXN0IGluIHRoaXMgYXJjaGl2ZScuZm9ybWF0KF9wcmludGFibGUoZmlsZW5hbWUpKSkKCiAgICAjIExvYWQgYXJjaGl2ZS4KICAgIGRlZiBsb2FkKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQoKICAgICAgICBpZiBzZWxmLmhhbmRsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5oYW5kbGUuY2xvc2UoKQogICAgICAgIHNlbGYuZmlsZSA9IGZpbGVuYW1lCiAgICAgICAgc2VsZi5maWxlcyA9IHt9CiAgICAgICAgc2VsZi5oYW5kbGUgPSBvcGVuKHNlbGYuZmlsZSwgJ3JiJykKICAgICAgICBzZWxmLnZlcnNpb24gPSBzZWxmLmdldF92ZXJzaW9uKCkKICAgICAgICBzZWxmLmluZGV4ZXMgPSBzZWxmLmV4dHJhY3RfaW5kZXhlcygpCgogICAgIyBTYXZlIGN1cnJlbnQgc3RhdGUgaW50byBhIG5ldyBmaWxlLCBtZXJnaW5nIGFyY2hpdmUgYW5kIGludGVybmFsIHN0b3JhZ2UsIHJlYnVpbGRpbmcgaW5kZXhlcywgYW5kIG9wdGlvbmFsbHkgc2F2aW5nIGluIGFub3RoZXIgZm9ybWF0IHZlcnNpb24uCiAgICBkZWYgc2F2ZShzZWxmLCBmaWxlbmFtZSA9IE5vbmUpOgogICAgICAgIGZpbGVuYW1lID0gX3VuaWNvZGUoZmlsZW5hbWUpCgogICAgICAgIGlmIGZpbGVuYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIGZpbGVuYW1lID0gc2VsZi5maWxlCiAgICAgICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbm8gdGFyZ2V0IGZpbGUgZm91bmQgZm9yIHNhdmluZyBhcmNoaXZlJykKICAgICAgICBpZiBzZWxmLnZlcnNpb24gIT0gMiBhbmQgc2VsZi52ZXJzaW9uICE9IDM6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3NhdmluZyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgdmVyc2lvbiAyIGFuZCAzIGFyY2hpdmVzJykKCiAgICAgICAgc2VsZi52ZXJib3NlX3ByaW50KCdSZWJ1aWxkaW5nIGFyY2hpdmUgaW5kZXguLi4nKQogICAgICAgICMgRmlsbCBvdXIgb3duIGZpbGVzIHN0cnVjdHVyZSB3aXRoIHRoZSBmaWxlcyBhZGRlZCBvciBjaGFuZ2VkIGluIHRoaXMgc2Vzc2lvbi4KICAgICAgICBmaWxlcyA9IHNlbGYuZmlsZXMKICAgICAgICAjIEZpcnN0LCByZWFkIGZpbGVzIGZyb20gdGhlIGN1cnJlbnQgYXJjaGl2ZSBpbnRvIG91ciBmaWxlcyBzdHJ1Y3R1cmUuCiAgICAgICAgZm9yIGZpbGUgaW4gbGlzdChzZWxmLmluZGV4ZXMua2V5cygpKToKICAgICAgICAgICAgY29udGVudCA9IHNlbGYucmVhZChmaWxlKQogICAgICAgICAgICAjIFJlbW92ZSBmcm9tIGluZGV4ZXMgYXJyYXkgb25jZSByZWFkLCBhZGQgdG8gb3VyIG93biBhcnJheS4KICAgICAgICAgICAgZGVsIHNlbGYuaW5kZXhlc1tmaWxlXQogICAgICAgICAgICBmaWxlc1tmaWxlXSA9IGNvbnRlbnQKCiAgICAgICAgIyBQcmVkaWN0IGhlYWRlciBsZW5ndGgsIHdlJ2xsIHdyaXRlIHRoYXQgb25lIGxhc3QuCiAgICAgICAgb2Zmc2V0ID0gMAogICAgICAgIGlmIHNlbGYudmVyc2lvbiA9PSAzOgogICAgICAgICAgICBvZmZzZXQgPSAzNAogICAgICAgIGVsaWYgc2VsZi52ZXJzaW9uID09IDI6CiAgICAgICAgICAgIG9mZnNldCA9IDI1CiAgICAgICAgYXJjaGl2ZSA9IG9wZW4oZmlsZW5hbWUsICd3YicpCiAgICAgICAgYXJjaGl2ZS5zZWVrKG9mZnNldCkKCiAgICAgICAgIyBCdWlsZCBvdXIgb3duIGluZGV4ZXMgd2hpbGUgd3JpdGluZyBmaWxlcyB0byB0aGUgYXJjaGl2ZS4KICAgICAgICBpbmRleGVzID0ge30KICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1dyaXRpbmcgZmlsZXMgdG8gYXJjaGl2ZSBmaWxlLi4uJykKICAgICAgICBmb3IgZmlsZSwgY29udGVudCBpbiBmaWxlcy5pdGVtcygpOgogICAgICAgICAgICAjIEdlbmVyYXRlIHJhbmRvbSBwYWRkaW5nLCBmb3Igd2hhdGV2ZXIgcmVhc29uLgogICAgICAgICAgICBpZiBzZWxmLnBhZGxlbmd0aCA+IDA6CiAgICAgICAgICAgICAgICBwYWRkaW5nID0gc2VsZi5nZW5lcmF0ZV9wYWRkaW5nKCkKICAgICAgICAgICAgICAgIGFyY2hpdmUud3JpdGUocGFkZGluZykKICAgICAgICAgICAgICAgIG9mZnNldCArPSBsZW4ocGFkZGluZykKCiAgICAgICAgICAgIGFyY2hpdmUud3JpdGUoY29udGVudCkKICAgICAgICAgICAgIyBVcGRhdGUgaW5kZXguCiAgICAgICAgICAgIGlmIHNlbGYudmVyc2lvbiA9PSAzOgogICAgICAgICAgICAgICAgaW5kZXhlc1tmaWxlXSA9IFsgKG9mZnNldCBeIHNlbGYua2V5LCBsZW4oY29udGVudCkgXiBzZWxmLmtleSkgXQogICAgICAgICAgICBlbGlmIHNlbGYudmVyc2lvbiA9PSAyOgogICAgICAgICAgICAgICAgaW5kZXhlc1tmaWxlXSA9IFsgKG9mZnNldCwgbGVuKGNvbnRlbnQpKSBdCiAgICAgICAgICAgIG9mZnNldCArPSBsZW4oY29udGVudCkKCiAgICAgICAgIyBXcml0ZSB0aGUgaW5kZXhlcy4KICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1dyaXRpbmcgYXJjaGl2ZSBpbmRleCB0byBhcmNoaXZlIGZpbGUuLi4nKQogICAgICAgIGFy
set rpatool4=Y2hpdmUud3JpdGUoY29kZWNzLmVuY29kZShwaWNrbGUuZHVtcHMoaW5kZXhlcywgc2VsZi5QSUNLTEVfUFJPVE9DT0wpLCAnemxpYicpKQogICAgICAgICMgTm93IHdyaXRlIHRoZSBoZWFkZXIuCiAgICAgICAgc2VsZi52ZXJib3NlX3ByaW50KCdXcml0aW5nIGhlYWRlciB0byBhcmNoaXZlIGZpbGUuLi4gKHZlcnNpb24gPSBSUEF2ezB9KScuZm9ybWF0KHNlbGYudmVyc2lvbikpCiAgICAgICAgYXJjaGl2ZS5zZWVrKDApCiAgICAgICAgaWYgc2VsZi52ZXJzaW9uID09IDM6CiAgICAgICAgICAgIGFyY2hpdmUud3JpdGUoY29kZWNzLmVuY29kZSgne317OjAxNnh9IHs6MDh4fVxuJy5mb3JtYXQoc2VsZi5SUEEzX01BR0lDLCBvZmZzZXQsIHNlbGYua2V5KSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYXJjaGl2ZS53cml0ZShjb2RlY3MuZW5jb2RlKCd7fXs6MDE2eH1cbicuZm9ybWF0KHNlbGYuUlBBMl9NQUdJQywgb2Zmc2V0KSkpCiAgICAgICAgIyBXZSdyZSBkb25lLCBjbG9zZSBpdC4KICAgICAgICBhcmNoaXZlLmNsb3NlKCkKCiAgICAgICAgIyBSZWxvYWQgdGhlIGZpbGUgaW4gb3VyIGlubmVyIGRhdGFiYXNlLgogICAgICAgIHNlbGYubG9hZChmaWxlbmFtZSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBpbXBvcnQgYXJncGFyc2UKCiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigKICAgICAgICBkZXNjcmlwdGlvbj0nQSB0b29sIGZvciB3b3JraW5nIHdpdGggUmVuXCdQeSBhcmNoaXZlIGZpbGVzLicsCiAgICAgICAgZXBpbG9nPSdUaGUgRklMRSBhcmd1bWVudCBjYW4gb3B0aW9uYWxseSBiZSBpbiBBUkNISVZFPVJFQUwgZm9ybWF0LCBtYXBwaW5nIGEgZmlsZSBpbiB0aGUgYXJjaGl2ZSBmaWxlIHN5c3RlbSB0byBhIGZpbGUgb24geW91ciByZWFsIGZpbGUgc3lzdGVtLiBBbiBleGFtcGxlIG9mIHRoaXM6IHJwYXRvb2wgLXggdGVzdC5ycGEgc2NyaXB0LnJweWM9L2hvbWUvZm9vL3Rlc3QucnB5YycsCiAgICAgICAgYWRkX2hlbHA9RmFsc2UpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnYXJjaGl2ZScsIG1ldGF2YXI9J0FSQ0hJVkUnLCBoZWxwPSdUaGUgUmVuXCdweSBhcmNoaXZlIGZpbGUgdG8gb3BlcmF0ZSBvbi4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnZmlsZXMnLCBtZXRhdmFyPSdGSUxFJywgbmFyZ3M9JyonLCBhY3Rpb249J2FwcGVuZCcsIGhlbHA9J1plcm8gb3IgbW9yZSBmaWxlcyB0byBvcGVyYXRlIG9uLicpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWwnLCAnLS1saXN0JywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nTGlzdCBmaWxlcyBpbiBhcmNoaXZlIEFSQ0hJVkUuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy14JywgJy0tZXh0cmFjdCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0V4dHJhY3QgRklMRXMgZnJvbSBBUkNISVZFLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYycsICctLWNyZWF0ZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0NyZWF0aXZlIEFSQ0hJVkUgZnJvbSBGSUxFcy4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWQnLCAnLS1kZWxldGUnLCBhY3Rpb249J3N0b3JlX3RydWUnLCBoZWxwPSdEZWxldGUgRklMRXMgZnJvbSBBUkNISVZFLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYScsICctLWFwcGVuZCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0FwcGVuZCBGSUxFcyB0byBBUkNISVZFLicpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLTInLCAnLS10d28nLCBhY3Rpb249J3N0b3JlX3RydWUnLCBoZWxwPSdVc2UgdGhlIFJQQXYyIGZvcm1hdCBmb3IgY3JlYXRpbmcvYXBwZW5kaW5nIHRvIGFyY2hpdmVzLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctMycsICctLXRocmVlJywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nVXNlIHRoZSBSUEF2MyBmb3JtYXQgZm9yIGNyZWF0aW5nL2FwcGVuZGluZyB0byBhcmNoaXZlcyAoZGVmYXVsdCkuJykKCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctaycsICctLWtleScsIG1ldGF2YXI9J0tFWScsIGhlbHA9J1RoZSBvYmZ1c2NhdGlvbiBrZXkgdXNlZCBmb3IgY3JlYXRpbmcgUlBBdjMgYXJjaGl2ZXMsIGluIGhleGFkZWNpbWFsIChkZWZhdWx0OiAweERFQURCRUVGKS4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLXAnLCAnLS1wYWRkaW5nJywgbWV0YXZhcj0nQ09VTlQnLCBoZWxwPSdUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgb2YgcGFkZGluZyB0byBhZGQgYmV0d2VlbiBmaWxlcyAoZGVmYXVsdDogMCkuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1vJywgJy0tb3V0ZmlsZScsIGhlbHA9J0FuIGFsdGVybmF0aXZlIG91dHB1dCBhcmNoaXZlIGZpbGUgd2hlbiBhcHBlbmRpbmcgdG8gb3IgZGVsZXRpbmcgZnJvbSBhcmNoaXZlcywgb3Igb3V0cHV0IGRpcmVjdG9yeSB3aGVuIGV4dHJhY3RpbmcuJykKCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctaCcsICctLWhlbHAnLCBhY3Rpb249J2hlbHAnLCBoZWxwPSdQcmludCB0aGlzIGhlbHAgYW5kIGV4aXQuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy12JywgJy0tdmVyYm9zZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0JlIGEgYml0IG1vcmUgdmVyYm9zZSB3aGlsZSBwZXJmb3JtaW5nIG9wZXJhdGlvbnMuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1WJywgJy0tdmVyc2lvbicsIGFjdGlvbj0ndmVyc2lvbicsIHZlcnNpb249J3JwYXRvb2wgdjAuOCcsIGhlbHA9J1Nob3cgdmVyc2lvbiBpbmZvcm1hdGlvbi4nKQogICAgYXJndW1lbnRzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgICMgRGV0ZXJtaW5lIFJQQSB2ZXJzaW9uLgogICAgaWYgYXJndW1lbnRzLnR3bzoKICAgICAgICB2ZXJzaW9uID0gMgogICAgZWxzZToKICAgICAgICB2ZXJzaW9uID0gMwoKICAgICMgRGV0ZXJtaW5lIFJQQXYzIGtleS4KICAgIGlmICdrZXknIGluIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzLmtleSBpcyBub3QgTm9uZToKICAgICAgICBrZXkgPSBpbnQoYXJndW1lbnRzLmtleSwgMTYpCiAgICBlbHNlOgogICAgICAgIGtleSA9IDB4REVBREJFRUYKCiAgICAjIERldGVybWluZSBwYWRkaW5nIGJ5dGVzLgogICAgaWYgJ3BhZGRpbmcnIGluIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzLnBhZGRpbmcgaXMgbm90IE5vbmU6CiAgICAgICAgcGFkZGluZyA9IGludChhcmd1bWVudHMucGFkZGluZykKICAgIGVsc2U6CiAgICAgICAgcGFkZGluZyA9IDAKCiAgICAjIERldGVybWluZSBvdXRwdXQgZmlsZS9kaXJlY3RvcnkgYW5kIGlucHV0IGFyY2hpdmUKICAgIGlmIGFyZ3VtZW50cy5jcmVhdGU6CiAgICAgICAgYXJjaGl2ZSA9IE5vbmUKICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMuYXJjaGl2ZSkKICAgIGVsc2U6CiAgICAgICAgYXJjaGl2ZSA9IF91bmljb2RlKGFyZ3VtZW50cy5hcmNoaXZlKQogICAgICAgIGlmICdvdXRmaWxlJyBpbiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50cy5vdXRmaWxlIGlzIG5vdCBOb25lOgogICAgICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMub3V0ZmlsZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIERlZmF1bHQgb3V0cHV0IGRpcmVjdG9yeSBmb3IgZXh0cmFj
set rpatool5=dGlvbiBpcyB0aGUgY3VycmVudCBkaXJlY3RvcnkuCiAgICAgICAgICAgIGlmIGFyZ3VtZW50cy5leHRyYWN0OgogICAgICAgICAgICAgICAgb3V0cHV0ID0gJy4nCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMuYXJjaGl2ZSkKCiAgICAjIE5vcm1hbGl6ZSBmaWxlcy4KICAgIGlmIGxlbihhcmd1bWVudHMuZmlsZXMpID4gMCBhbmQgaXNpbnN0YW5jZShhcmd1bWVudHMuZmlsZXNbMF0sIGxpc3QpOgogICAgICAgIGFyZ3VtZW50cy5maWxlcyA9IGFyZ3VtZW50cy5maWxlc1swXQoKICAgIHRyeToKICAgICAgICBhcmNoaXZlID0gUmVuUHlBcmNoaXZlKGFyY2hpdmUsIHBhZGxlbmd0aD1wYWRkaW5nLCBrZXk9a2V5LCB2ZXJzaW9uPXZlcnNpb24sIHZlcmJvc2U9YXJndW1lbnRzLnZlcmJvc2UpCiAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgIHByaW50KCdDb3VsZCBub3Qgb3BlbiBhcmNoaXZlIGZpbGUgezB9IGZvciByZWFkaW5nOiB7MX0nLmZvcm1hdChhcmNoaXZlLCBlKSwgZmlsZT1zeXMuc3RkZXJyKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgYXJndW1lbnRzLmNyZWF0ZSBvciBhcmd1bWVudHMuYXBwZW5kOgogICAgICAgICMgV2UgbmVlZCB0aGlzIHNlcGVyYXRlIGZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IHByb2Nlc3MgZGlyZWN0b3JpZXMuCiAgICAgICAgZGVmIGFkZF9maWxlKGZpbGVuYW1lKToKICAgICAgICAgICAgIyBJZiB0aGUgYXJjaGl2ZSBwYXRoIGRpZmZlcnMgZnJvbSB0aGUgYWN0dWFsIGZpbGUgcGF0aCwgYXMgZ2l2ZW4gaW4gdGhlIGFyZ3VtZW50LAogICAgICAgICAgICAjIGV4dHJhY3QgdGhlIGFyY2hpdmUgcGF0aCBhbmQgYWN0dWFsIGZpbGUgcGF0aC4KICAgICAgICAgICAgaWYgZmlsZW5hbWUuZmluZCgnPScpICE9IC0xOgogICAgICAgICAgICAgICAgKG91dGZpbGUsIGZpbGVuYW1lKSA9IGZpbGVuYW1lLnNwbGl0KCc9JywgMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG91dGZpbGUgPSBmaWxlbmFtZQoKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2RpcihmaWxlbmFtZSk6CiAgICAgICAgICAgICAgICBmb3IgZmlsZSBpbiBvcy5saXN0ZGlyKGZpbGVuYW1lKToKICAgICAgICAgICAgICAgICAgICAjIFdlIG5lZWQgdG8gZG8gdGhpcyBpbiBvcmRlciB0byBtYWludGFpbiBhIHBvc3NpYmxlIEFSQ0hJVkU9UkVBTCBtYXBwaW5nIGJldHdlZW4gZGlyZWN0b3JpZXMuCiAgICAgICAgICAgICAgICAgICAgYWRkX2ZpbGUob3V0ZmlsZSArIG9zLnNlcCArIGZpbGUgKyAnPScgKyBmaWxlbmFtZSArIG9zLnNlcCArIGZpbGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVuYW1lLCAncmInKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgICAgICAgICBhcmNoaXZlLmFkZChvdXRmaWxlLCBmaWxlLnJlYWQoKSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwcmludCgnQ291bGQgbm90IGFkZCBmaWxlIHswfSB0byBhcmNoaXZlOiB7MX0nLmZvcm1hdChmaWxlbmFtZSwgZSksIGZpbGU9c3lzLnN0ZGVycikKCiAgICAgICAgIyBJdGVyYXRlIG92ZXIgdGhlIGdpdmVuIGZpbGVzIHRvIGFkZCB0byBhcmNoaXZlLgogICAgICAgIGZvciBmaWxlbmFtZSBpbiBhcmd1bWVudHMuZmlsZXM6CiAgICAgICAgICAgIGFkZF9maWxlKF91bmljb2RlKGZpbGVuYW1lKSkKCiAgICAgICAgIyBTZXQgdmVyc2lvbiBmb3Igc2F2aW5nLCBhbmQgc2F2ZS4KICAgICAgICBhcmNoaXZlLnZlcnNpb24gPSB2ZXJzaW9uCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhcmNoaXZlLnNhdmUob3V0cHV0KQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoJ0NvdWxkIG5vdCBzYXZlIGFyY2hpdmUgZmlsZTogezB9Jy5mb3JtYXQoZSksIGZpbGU9c3lzLnN0ZGVycikKICAgIGVsaWYgYXJndW1lbnRzLmRlbGV0ZToKICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgZ2l2ZW4gZmlsZXMgdG8gZGVsZXRlIGZyb20gdGhlIGFyY2hpdmUuCiAgICAgICAgZm9yIGZpbGVuYW1lIGluIGFyZ3VtZW50cy5maWxlczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYXJjaGl2ZS5yZW1vdmUoZmlsZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KCdDb3VsZCBub3QgZGVsZXRlIGZpbGUgezB9IGZyb20gYXJjaGl2ZTogezF9Jy5mb3JtYXQoZmlsZW5hbWUsIGUpLCBmaWxlPXN5cy5zdGRlcnIpCgogICAgICAgICMgU2V0IHZlcnNpb24gZm9yIHNhdmluZywgYW5kIHNhdmUuCiAgICAgICAgYXJjaGl2ZS52ZXJzaW9uID0gdmVyc2lvbgogICAgICAgIHRyeToKICAgICAgICAgICAgYXJjaGl2ZS5zYXZlKG91dHB1dCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KCdDb3VsZCBub3Qgc2F2ZSBhcmNoaXZlIGZpbGU6IHswfScuZm9ybWF0KGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBlbGlmIGFyZ3VtZW50cy5leHRyYWN0OgogICAgICAgICMgRWl0aGVyIGV4dHJhY3QgdGhlIGdpdmVuIGZpbGVzLCBvciBhbGwgZmlsZXMgaWYgbm8gZmlsZXMgYXJlIGdpdmVuLgogICAgICAgIGlmIGxlbihhcmd1bWVudHMuZmlsZXMpID4gMDoKICAgICAgICAgICAgZmlsZXMgPSBhcmd1bWVudHMuZmlsZXMKICAgICAgICBlbHNlOgogICAgICAgICAgICBmaWxlcyA9IGFyY2hpdmUubGlzdCgpCgogICAgICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgaWYgbm90IHByZXNlbnQuCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKG91dHB1dCk6CiAgICAgICAgICAgIG9zLm1ha2VkaXJzKG91dHB1dCkKCiAgICAgICAgIyBJdGVyYXRlIG92ZXIgZmlsZXMgdG8gZXh0cmFjdC4KICAgICAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgIGlmIGZpbGVuYW1lLmZpbmQoJz0nKSAhPSAtMToKICAgICAgICAgICAgICAgIChvdXRmaWxlLCBmaWxlbmFtZSkgPSBmaWxlbmFtZS5zcGxpdCgnPScsIDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvdXRmaWxlID0gZmlsZW5hbWUKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gYXJjaGl2ZS5yZWFkKGZpbGVuYW1lKQoKICAgICAgICAgICAgICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgZm9yIGZpbGUgaWYgbm90IHByZXNlbnQuCiAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguam9pbihvdXRwdXQsIG91dGZpbGUpKSk6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguam9pbihvdXRwdXQsIG91dGZpbGUpKSkKCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKG91dHB1dCwgb3V0ZmlsZSksICd3YicpIGFzIGZpbGU6CiAgICAgICAgICAgICAgICAgICAgZmlsZS53cml0ZShjb250ZW50cykKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoJ0NvdWxkIG5vdCBleHRy
set rpatool6=YWN0IGZpbGUgezB9IGZyb20gYXJjaGl2ZTogezF9Jy5mb3JtYXQoZmlsZW5hbWUsIGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBlbGlmIGFyZ3VtZW50cy5saXN0OgogICAgICAgICMgUHJpbnQgdGhlIHNvcnRlZCBmaWxlIGxpc3QuCiAgICAgICAgbGlzdCA9IGFyY2hpdmUubGlzdCgpCiAgICAgICAgbGlzdC5zb3J0KCkKICAgICAgICBmb3IgZmlsZSBpbiBsaXN0OgogICAgICAgICAgICBwcmludChmaWxlKQogICAgZWxzZToKICAgICAgICBwcmludCgnTm8gb3BlcmF0aW9uIGdpdmVuIDooJykKICAgICAgICBwcmludCgnVXNlIHswfSAtLWhlbHAgZm9yIHVzYWdlIGRldGFpbHMuJy5mb3JtYXQoc3lzLmFyZ3ZbMF0pKQoK
REM --------------------------------------------------------------------------------
REM SLDR Rogue-Like cheat.py (4864 chars max)
REM --------------------------------------------------------------------------------
set cheat1=aW1wb3J0IHJlCgp2ID0gIjIuOCIKdGFiID0gIiAiICogNApuZXdsaW5lID0gIlxuIgoKIz09PT09PT09PT09PT0gIC4vaW50ZXJmYWNlcy9tYWluX21lbnUucnB5ID09PT09PT09PQpkZWYgbWFpbl9tZW51KCk6CiAgICBmbj0iLi9pbnRlcmZhY2VzL21haW5fbWVudS5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD1yJyAgICB0ZXh0ICJcW2NvbmZpZy52ZXJzaW9uXF0iIGFuY2hvciBcKDEuMCwgMC41XCkgcG9zIFwoMC4xNTcsIDAuOTZcKTpbXHJcbl0rICtzaXplIDI1JwogICAgcmVwbD1yJyAgICB0ZXh0ICJbY29uZmlnLnZlcnNpb25dIiBhbmNob3IgKDEuMCwgMC41KSBwb3MgKDAuMTU3LCAwLjk2KTpcbiAgICAgICAgc2l6ZSAyNVxuICAgIGZyYW1lOlxuICAgICAgICB4YWxpZ24gLjVcbiAgICAgICAgeWFsaWduIDBcbiAgICAgICAgdGV4dCgiQ2hlYXRzIGVuYWJsZWQhIiknCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgptYWluX21lbnUoKQoKIz09PT09PT09PT09PT0gIC4vaW50ZXJmYWNlcy9iYXNlLnJweSA9PT09PT09PT0KZGVmIHF1aWNrX21lbnUoKToKICAgIGZuPSIuL2ludGVyZmFjZXMvYmFzZS5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD1yJyAgICAgICAgdGV4dGJ1dHRvbiBfXCgiUS5Mb2FkIlwpOltcclxuXSsgICAgICAgICAgICBhY3Rpb24gUXVpY2tMb2FkXChcKScKICAgIHJlcGw9cicgICAgICAgIHRleHRidXR0b24gXygiUS5Mb2FkIik6XG4gICAgICAgICAgICBhY3Rpb24gUXVpY2tMb2FkKClcblxuICAgICAgICB0ZXh0YnV0dG9uIF8oIkNoZWF0VicrdisnIik6XG4gICAgICAgICAgICBhY3Rpb24gTnVsbEFjdGlvbigpJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKcXVpY2tfbWVudSgpCgojPT09PT09PT09PT09PSBjb25maWcucnB5ID09PT09PT09PQpkZWYgY29uc29sZSgpOgogICAgZm49Ii4uL3JlbnB5L2NvbW1vbi8wMGNvbnNvbGUucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgIGZjID0gZmMucmVwbGFjZSgnY29uZmlnLmNvbnNvbGUgPSBGYWxzZScsICdjb25maWcuY29uc29sZSA9IFRydWUnKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKY29uc29sZSgpCgojPT09PT09PT09PT09PSAgLi9zY3JpcHRzL21lY2hhbmljcy91dGlsaXRpZXMucnB5ID09PT09PT09PQpkZWYgdXRpbGl0aWVzKCk6CiAgICBmbj0iLi9jb3JlL21lY2hhbmljcy91dGlsaXRpZXMucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQogICAgcGF0dD1yJyg/UDx0YWJzPiArKWRlZiB1bmlxdWVcKG9yaWdpbmFsOicKICAgIHJlcGw9cicgICAgZGVmIHJlbW92ZUNoZWF0aW5nKEMpOlxyXG4gICAgICAgIEMucmVtb3ZlX3RyYWl0KCJjaGVhdGVkX29uX2ZsaXJ0aW5nIilcclxuICAgICAgICBDLnJlbW92ZV90cmFpdCgiY2hlYXRlZF9vbl9mbGlydGluZ19pbl9wdWJsaWMiKVxyXG4gICAgICAgIEMucmVtb3ZlX3RyYWl0KCJjaGVhdGVkX29uX2RhdGUiKVxyXG4gICAgICAgIEMucmVtb3ZlX3RyYWl0KCJjaGVhdGVkX29uX3JlbGF0aW9uc2hpcCIpXHJcbiAgICAgICAgQy5IaXN0b3J5LnJlbW92ZSgiY2hlYXRlZF9vbl9mbGlydGluZyIpXHJcbiAgICAgICAgQy5IaXN0b3J5LnJlbW92ZSgiY2hlYXRlZF9vbl9mbGlydGluZ19pbl9wdWJsaWMiKVxyXG4gICAgICAgIEMuSGlzdG9yeS5yZW1vdmUoImNoZWF0ZWRfb25fZGF0ZSIpXHJcbiAgICAgICAgQy5IaXN0b3J5LnJlbW92ZSgiY2hlYXRlZF9vbl9yZWxhdGlvbnNoaXAiKVxyXG4gICAgICAgIGlmICJwZXJtYW5lbnQiIGluIEMuSGlzdG9yeS50cmFja2VycyBhbmQgImNoZWF0ZWRfb25fZmxpcnRpbmdfaW5fcHVibGljIiBpbiBDLkhpc3RvcnkudHJhY2tlcnNbInBlcm1hbmVudCJdOlxyXG4gICAgICAgICAgICBkZWwgQy5IaXN0b3J5LnRyYWNrZXJzWyJwZXJtYW5lbnQiXVsiY2hlYXRlZF9vbl9mbGlydGluZ19pbl9wdWJsaWMiXVxyXG4gICAgICAgIGlmICJwZXJtYW5lbnQiIGluIEMuSGlzdG9yeS50cmFja2VycyBhbmQgImNoZWF0ZWRfb25fZGF0ZSIgaW4gQy5IaXN0b3J5LnRyYWNrZXJzWyJwZXJtYW5lbnQiXTpcclxuICAgICAgICAgICAgZGVsIEMuSGlzdG9yeS50cmFja2Vyc1sicGVybWFuZW50Il1bImNoZWF0ZWRfb25fZGF0ZSJdXHJcbiAgICAgICAgaWYgInBlcm1hbmVudCIgaW4gQy5IaXN0b3J5LnRyYWNrZXJzIGFuZCAiY2hlYXRlZF9vbl9yZWxhdGlvbnNoaXAiIGluIEMuSGlzdG9yeS50cmFja2Vyc1sicGVybWFuZW50Il06XHJcbiAgICAgICAgICAgIGRlbCBDLkhpc3RvcnkudHJhY2tlcnNbInBlcm1hbmVudCJdWyJjaGVhdGVkX29uX3JlbGF0aW9uc2hpcCJdXHJcblxyXG4gICAgICAgIGZvciBvdGhlcl9DIGluIEdhbWVTdGF0ZS5hbGxfQ29tcGFuaW9uczpcclxuICAgICAgICAgICAgaWYgaGFzYXR0cihvdGhlcl9DLCAidGFnIik6XHJcbiAgICAgICAgICAgICAgICBQbGF5ZXIuSGlzdG9yeS5yZW1vdmUoZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X2ZsaXJ0aW5nX2luX3B1YmxpYyIpXHJcbiAgICAgICAgICAgICAgICBQbGF5ZXIuSGlzdG9yeS5yZW1vdmUoZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X2RhdGUiKVxyXG4gICAgICAgICAgICAgICAgUGxheWVyLkhpc3RvcnkucmVtb3ZlKGYiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9yZWxhdGlvbnNoaXAiKVxyXG4gICAgICAgICAgICAgICAgaWYgInBlcm1hbmVudCIgaW4gUGxheWVyLkhpc3RvcnkudHJhY2tlcnMgYW5kIGYiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9mbGlydGluZ19pbl9wdWJsaWMiIGluIFBsYXllci5IaXN0b3J5LnRyYWNrZXJzWyJwZXJtYW5lbnQiXTpcclxuICAgICAgICAgICAgICAgICAgIGRlbCBQbGF5ZXIuSGlzdG9yeS5wZXJtYW5lbnRbZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X2ZsaXJ0aW5nX2luX3B1YmxpYyJdXHJcbiAgICAgICAgICAgICAgICBpZiAicGVybWFuZW50IiBpbiBQbGF5ZXIuSGlzdG9yeS50cmFja2VycyBhbmQgZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X2RhdGUiIGluIFBsYXllci5IaXN0b3J5LnRyYWNrZXJzWyJwZXJtYW5lbnQiXTpcclxuICAgICAgICAgICAgICAgICAgIGRlbCBQbGF5ZXIuSGlzdG9yeS50cmFja2Vyc1sicGVybWFuZW50Il1bZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9
set cheat2=X2RhdGUiXVxyXG4gICAgICAgICAgICAgICAgaWYgInBlcm1hbmVudCIgaW4gUGxheWVyLkhpc3RvcnkudHJhY2tlcnMgYW5kIGYiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9yZWxhdGlvbnNoaXAiIGluIFBsYXllci5IaXN0b3J5LnRyYWNrZXJzWyJwZXJtYW5lbnQiXTpcclxuICAgICAgICAgICAgICAgICAgIGRlbCBQbGF5ZXIuSGlzdG9yeS5wZXJtYW5lbnRbZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X3JlbGF0aW9uc2hpcCJdXHJcbiAgICAgICAgcmV0dXJuXHJcblxyXG5cZzx0YWJzPmRlZiB1bmlxdWUob3JpZ2luYWw6JwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKdXRpbGl0aWVzKCkKCiM9PT09PT09PT09PT09ICAuL2ludGVyZmFjZXMvUGxheWVyX21lbnUucnB5ID09PT09PT09PQpkZWYgcGxheWVyX21lbnUoKToKICAgIGZuPSIuL2ludGVyZmFjZXMvUGxheWVyX21lbnUucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICN0dXJucyB0ZXh0IGNhc2ggbnVtYmVyIGludG8gdGV4dGJ1dHRvbgogICAgcGF0dD1yJyAgICB0ZXh0ICJcJFxbUGxheWVyXC5jYXNoXF0iICg/UDxwb3M+YW5jaG9yIFwoWzAtOS5dKywgWzAtOS5dK1wpIHBvcyBcKFswLTkuXSssIFswLTkuXStcKSk6W1xyXG5dKyAgICAgICAgc2l6ZSAoP1A8c2l6ZT5bMC05XSspJwogICAgcmVwbD1yJyAgICB0ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn0iICsgIiRbUGxheWVyLmNhc2hdIiBcZzxwb3M+OlxyXG4gICAgICAgIGFjdGlvbiBTZXRWYXJpYWJsZSgiUGxheWVyLmNhc2giLCBpbnQoUGxheWVyLmNhc2gpICsgaW50KDUwMDAwKSknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjdHVybnMgdGV4dCBmb3IgYWJpbGl0eSBwb2ludHMgaW50byB0ZXh0IGJ1dHRvbgogICAgcGF0dD1yJyAgICB0ZXh0ICJcW1BsYXllci5za2lsbF9wb2ludHNcXSIgKD9QPHBvcz5hbmNob3IgXChbMC05Ll0rLCBbMC05Ll0rXCkgcG9zIFwoWzAtOS5dKywgWzAtOS5dK1wpKTpbXHJcbl0rICAgICAgICBmb250ICIoP1A8Zm9udD5bYS16QS1aX10rXC5bYS16QS1aXXszLDZ9KSJbIFxyXG5dKyAgICAgICAgc2l6ZSAoP1A8c2l6ZT5bMC05XSspJwogICAgcmVwbD1yJyAgICB0ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn17Zm9udD1cZzxmb250Pn0iICsgIltQbGF5ZXIuc2tpbGxfcG9pbnRzXSIgXGc8cG9zPjpcbiAgICAgICAgYWN0aW9uIEZ1bmN0aW9uKFBsYXllci5IaXN0b3J5LnVwZGF0ZSwgImJvdWdodF9za2lsbF9wb2ludCIpJyAKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICNhbGxvd3MgZm9yIGRyYWdnYWJsZSBwbGF5ZXIgeHAgYmFyCiAgICBwYXR0PXIndmFsdWUgXChQbGF5ZXJcLlhQIC0gUGxheWVyXC5YUF9nb2FsIFwvIDFcLjc1XCkgcmFuZ2UgXChQbGF5ZXJcLlhQX2dvYWwgLSBQbGF5ZXJcLlhQX2dvYWwgXC8gMVwuNzVcKScKICAgIHJlcGw9cid2YWx1ZSBGaWVsZFZhbHVlKFBsYXllciwgIlhQIiwgUGxheWVyLlhQX2dvYWwpIHJhbmdlIChQbGF5ZXIuWFBfZ29hbCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjYWxsb3dzIGZvciBkcmFnZ2FibGUgcGxheWVyIHhwIGJhciBmb3IgbGV2ZWwgMQogICAgcGF0dD1yJ3ZhbHVlIFBsYXllclwuWFAgcmFuZ2UgUGxheWVyXC5YUF9nb2FsJwogICAgcmVwbD1yJ3ZhbHVlIEZpZWxkVmFsdWUoUGxheWVyLCAiWFAiLCBQbGF5ZXIuWFBfZ29hbCkgcmFuZ2UgKFBsYXllci5YUF9nb2FsKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICN0dXJucyB0ZXh0IGZvciBib3RoIGxvdmUgYW5kIHRydXN0IGludG8gdGV4dGJ1dHRvbnMKICAgIHBhdHQ9cicoP1A8dGFiczE+ICspdGV4dCAiXFtyZWxhdGlvbnNoaXBzX0VudHJ5XC4oP1A8bHQ+bG92ZXx0cnVzdClcXSIoP1A8cG9zPiBhbmNob3IgXChbMC05Ll0rLCBbMC05Ll0rXCkgcG9zIFwoMFwuWzAtOV0rLCAwXC5bMC05XStcKSk6WyBcclxuXStmb250ICIoP1A8Zm9udD5bYS16QS1aX10rXC5bYS16QS1aXXszLDZ9KSJbIFxyXG5dK3NpemUgKD9QPHNpemU+WzAtOV0rKVsgXHJcbl0rY29sb3IgIlthLXowLTkjXSsiJwogICAgcmVwbD1yJ1xnPHRhYnMxPnRleHRidXR0b24gIntzaXplPVxnPHNpemU+fXtmb250PVxnPGZvbnQ+fSIgKyAiW3JlbGF0aW9uc2hpcHNfRW50cnkuXGc8bHQ+XSJcZzxwb3M+OlxyXG5cZzx0YWJzMT4gICAgYWN0aW9uIFNldEZpZWxkKHJlbGF0aW9uc2hpcHNfRW50cnksICJcZzxsdD4iLCByZWxhdGlvbnNoaXBzX0VudHJ5LlxnPGx0PiArIDEwMCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKICAgCiAgICAjdHVybiBlbW90aW9uIGljb25zIGludG8gYnV0dG9ucyB0byB0dXJuIG9mZiBzYWlkIHN0YXR1cwogICAgI3BhdHQ9Jyg/UDx0YWJzMT4gKylhZGQgKD9QPGY+Zj8pImltYWdlcy9pbnRlcmZhY2VzL1BsYXllcl9tZW51L3JlbGF0aW9uc2hpcHNfKD9QPHN0YXR1cz5tYWR8aG9ybnl8bnltcGhvfFxbc3RhdHVzXF0pXC53ZWJwIiB6b29tIGhpZ2hfcmVzb2x1dGlvbl9pbnRlcmZhY2VfYWRqdXN0bWVudCcKICAgICNyZXBsPSdcZzx0YWJzMT5pbWFnZWJ1dHRvbiBpZGxlIFxnPGY+ImltYWdlcy9pbnRlcmZhY2VzL1BsYXllcl9tZW51L3JlbGF0aW9uc2hpcHNfXGc8c3RhdHVzPi53ZWJwIiBhY3Rpb24gU2V0RGljdChyZWxhdGlvbnNoaXBzX0VudHJ5LnN0YXR1cywgXGc8Zj4iXGc8c3RhdHVzPiIsIDApJwogICAgI3JlcGw9J1xnPHRhYnMxPmltYWdlYnV0dG9uIGlkbGUgXGc8Zj4iaW1hZ2VzL2ludGVyZmFjZXMvUGxheWVyX21lbnUvcmVsYXRpb25zaGlwc19cZzxzdGF0dXM+LndlYnAiOlxyXG5cZzx0YWJzMT4gICAgYXQgdHJhbnNmb3JtOlxyXG5cZzx0YWJzMT4gICAgICAgIHpvb20gaGlnaF9yZXNvbHV0aW9uX2ludGVyZmFjZV9hZGp1c3RtZW50XHJcblxnPHRhYnMxPiAgICBhY3Rpb24gU2V0RGljdChyZWxhdGlvbnNoaXBzX0VudHJ5LnN0YXR1cywgXGc8Zj4iXGc8c3RhdHVzPiIsIDApJwogICAgI2ZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICNzZXR0aW5nIHRoZSByZWxhdGlvbnNoaXBzX3N0YXR1cygpIGZ1bmN0aW9uIHRvIGluc2VydCB0aGUgdGV4dCBhcyBhIHRleHQgYnV0dG9uIHRvIHR1cm4gb2ZmIG1vb2Qgc3RhdHVzZXMKICAgIHBhdHQ9cicoP1A8dDE+ICspdGV4dCAiXFtzdGF0dXMudXBwZXJcKFwpXF0iIGFuY2hvciBcKDBcLjUsIDBcLjVcKSBwb3MgXCgwXC41LCAwXC44NVwpOltcclxuXSsoP1A8dDI+ICspc2l6ZSBwcm9wZXJ0aWVzXC5nZXRcKCJ0ZXh0X3NpemUiLCAxNlwpKD9QPGJyPltcclxuIF0rKWNvbG9yIHByb3BlcnRpZXNcLmdldFwoInRleHRfY29sb3IiLCAiIzAwMDAwMCJcKScKICAgIHJlcGw9cidcZzx0MT50ZXh0YnV0dG9uICJ7c2l6ZT1bcHJvcGVy
set cheat3=dGllcy5nZXQoXFwidGV4dF9zaXplXFwiLCAxNildfXtjb2xvcj1bcHJvcGVydGllcy5nZXQoXFwidGV4dF9jb2xvclxcIiwgXFwiIzAwMDAwMFxcIildfSIgKyAiW3N0YXR1cy51cHBlcigpXSIgYW5jaG9yICgwLjUsIDAuNSkgcG9zICgwLjUsIDAuODUpOlxyXG5cZzx0Mj5hY3Rpb24gU2V0RGljdChwcm9wZXJ0aWVzLmdldCgiY2hhciIpLl9zdGF0dXMsIHN0YXR1cywgMCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKICAgIAogICAgI2FkZGluZyB0aGUgY2hhcmFjdGVyIGludG8gdGhlIHJlbGF0aW9uc2hpcHNfc3RhdHVzKCkgY2FsbAogICAgcGF0dD1yJyg/UDx0MT4gezIsfSl1c2UgcmVsYXRpb25zaGlwc19zdGF0dXNcKFtcclxuXSsoP1A8dDI+IHsyLH0pKD9QPHN0YXR1cz5bYS16QS1aIl0rKSxbXHJcbl0rJwogICAgcmVwbD1yJ1xnPHQxPnVzZSByZWxhdGlvbnNoaXBzX3N0YXR1cyhcclxuXGc8dDI+XGc8c3RhdHVzPixcclxuXGc8dDI+Y2hhciA9IHJlbGF0aW9uc2hpcHNfRW50cnksXHJcbicKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKCiAgICAjYWRkaW5nIGJ1dHRvbiB0aGF0IGFsbG93cyBmb3IgcmVtb3ZhbCBvZiBjaGVhdGluZwogICAgIyAgICAgICAgdGV4dCAiUkVMQVRJT05TSElQIFNUQVRVUyIgYW5jaG9yICgwLjAsIDAuNSkgcG9zICgwLjQ5NSwgMC4yOTcpOgogICAgcGF0dD1yJyAgICAgICAgdGV4dCAiUkVMQVRJT05TSElQIFNUQVRVUyIgYW5jaG9yIFwoMFwuMCwgMFwuNVwpIHBvcyBcKCg/UDxwb3NYPlswLTkuXSspLCAoP1A8cG9zWT5bMC05Ll0rKVwpOltcclxuXSsgICAgICAgICAgICBmb250ICJhZ2VuY3lfZmJcLnR0ZiJbXHJcbl0rW1xyXG5dKyAgICAgICAgICAgIHNpemUgMjgnCiAgICByZXBsPXInICAgICAgICB0ZXh0YnV0dG9uICJ7c2l6ZT0yOH17Zm9udD1hZ2VuY3lfZmIudHRmfSBSRUxBVElPTlNISVAgU1RBVFVTIiBhbmNob3IgKDAuMCwgMC41KSBwb3MgKFxnPHBvc1g+LCBcZzxwb3NZPik6XHJcbiAgICAgICAgICAgIGFjdGlvbiBGdW5jdGlvbihyZW1vdmVDaGVhdGluZywgcmVsYXRpb25zaGlwc19FbnRyeSknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjZnJpZW5kc2hpcCBpcyB0aGUgYmVzdCB0aGluZyBldmVyISAoYWxsb3dzIGZvciBjbGlja2luZyBvbiBmcmllbmRzaGlwIHRvIGluY3JlYXNlIGl0IGJ5IDUwKQogICAgcGF0dD1yJyg/UDx0YWJzPiArKWFkZCAiaW1hZ2VzXC9pbnRlcmZhY2VzXC9mdWxsXC9waG90b3NcL1xbQ1xdXC53ZWJwIiBhbGlnbiAoP1A8YWxnbj5cKFswLTkuLCBdK1wpKSB6b29tICg/UDx6b29tPjBcLlswLTldKyknCiAgICByZXBsPXInXGc8dGFicz5pbWFnZWJ1dHRvbiBpZGxlIGYiaW1hZ2VzL2ludGVyZmFjZXMvZnVsbC9waG90b3Mve0N9LndlYnAiIGFsaWduIFxnPGFsZ24+OlxyXG5cZzx0YWJzPiAgICBhdCB0cmFuc2Zvcm06XHJcblxnPHRhYnM+ICAgICAgICB6b29tIDAuMTNcclxuXGc8dGFicz4gICAgYWN0aW9uIFNldERpY3QocmVsYXRpb25zaGlwc19FbnRyeS5mcmllbmRzaGlwLCBmIntDfSIsIHJlbGF0aW9uc2hpcHNfRW50cnkuZnJpZW5kc2hpcFtDXSArIDUwKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKCiAgICAjUG9pbnRzIHdpbGwgYWRkICJzdHVkaWVkIiBvciAidHJhaW5lZCIgdG8gcGxheWVyIGhpc3RvcnkKICAgIHBhdHQ9cicgICAgdGV4dCAiUG9pbnRzIiAoP1A8cG9zPmFuY2hvciBcKFswLTkuXSssIFswLTkuXStcKSBwb3MgXChbMC05Ll0rLCBbMC05Ll0rXCkpOlsgXHJcbl0rICAgICAgICBzaXplICg/UDxzaXplPlswLTldKyknCiAgICByZXBsPXInICAgIHRleHRidXR0b24gIntzaXplPVxnPHNpemU+fSIgKyAiUG9pbnRzIiBcZzxwb3M+OlxyXG4gICAgICAgIGFjdGlvbiBGdW5jdGlvbihQbGF5ZXIuSGlzdG9yeS51cGRhdGUsICJ0cmFpbmVkIiBpZiBza2lsbHNfbGVhZGVyYm9hcmRfdHlwZSA9PSAiY29tYmF0IiBlbHNlICJzdHVkaWVkIiknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCnBsYXllcl9tZW51KCkKCgojPT09PT09PT09PT09PSAgLi9pbnRlcmZhY2VzL3NleC5ycHkgPT09PT09PT09CmRlZiBzZXgoKToKICAgIGZuPSIuL2ludGVyZmFjZXMvc2V4LnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjc2V0cyB0ZXh0IHN0YW1pbmEgaW50byB0ZXh0YnV0dG9uCiAgICBwYXR0PXInICAgICAgICB0ZXh0ICJcW1BsYXllci5zdGFtaW5hXF0iICg/UDxwb3M+YW5jaG9yIFwoWzAtOS5dKywgWzAtOS5dK1wpIHBvcyBcKFswLTkuXSssIFswLTkuXStcKSk6WyBcclxuXSsgICAgICAgICAgICBzaXplICg/UDxzaXplPlswLTldKyknCiAgICByZXBsPXInICAgICAgICB0ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn0iICsgIltQbGF5ZXIuc3RhbWluYV0iIFxnPHBvcz46XG4gICAgICAgICAgICBhY3Rpb24gU2V0VmFyaWFibGUoIlBsYXllci5zdGFtaW5hIiwgUGxheWVyLm1heF9zdGFtaW5hICsgUGxheWVyLnN0YW1pbmEpJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI2FzIG9mIHYwLjZiLCB0aGUgbG92ZSBpbnRlcmVzdCBoYXMgbm8gc3RhbWluYSBzdGF0CiAgICAjcGF0dD0nICAgICAgICB0ZXh0ICJcW0NoYXJhY3Rlci5zdGFtaW5hXF0iICg/UDxwb3M+YW5jaG9yIFwoWzAtOS5dKywgWzAtOS5dK1wpIHBvcyBcKFswLTkuXSssIFswLTkuXStcKSk6WyBcclxuXSsgICAgICAgICAgICBzaXplICg/UDxzaXplPlswLTldKyknCiAgICAjcmVwbD0nICAgICAgICB0ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn0iICsgIltDaGFyYWN0ZXIuc3RhbWluYV0iIFxnPHBvcz46XG4gICAgICAgICAgICBhY3Rpb24gU2V0VmFyaWFibGUoImZvY3VzZWRfQ2hhcmFjdGVyLnN0YW1pbmEiLCBmb2N1c2VkX0NoYXJhY3Rlci5tYXhfc3RhbWluYSArIENoYXJhY3Rlci5zdGFtaW5hKScKICAgICNmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjc2V0cyBwbGF5ZXIgZGVzaXJlIHZhbHVlcyBpbnRvIGZpZWxkIHZhbHVlcywgYWthLCBpbnRlcmFjdGFibGUgc2xpZGluZyBiYXJzCiAgICBwYXR0PXIndmFsdWUgUGxheWVyLmRlc2lyZScKICAgIHJlcGw9cid2YWx1ZSBGaWVsZFZhbHVlKFBsYXllciwgImRlc2lyZSIsIHJhbmdlPTEuMCwgc3RlcD0wLjEpJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI2NoYXJhY3RlciBkZXNpcmUgd2FzIHJlZGVzaWduZWQgaW4gMC42Yi4gVGhlIGJhciB3YXMgc3BsaXQgaW50byAyLiBPbmUgYXQgYmVsb3cgMS4wIGFuZCBvbmUgYXQgYW5kIGFib3ZlIDEuMAogICAgcGF0dD1yJ3ZhbHVlIENoYXJhY3Rlci5kZXNpcmUgcmFuZ2UgMS4wJwogICAgcmVwbD1yJ3ZhbHVlIERpY3RWYWx1ZShDaGFyYWN0ZXIuZGVzaXJlcywgIm9yZ2FzbSIsIHJhbmdlPTEuMCwgc3RlcD0w
set cheat4=LjEpJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCiAgICAKICAgIHBhdHQ9cid2YWx1ZSBDaGFyYWN0ZXJcLmRlc2lyZXNcWyJvcmdhc20iXF0gcmFuZ2UgMVwuMCcKICAgIHJlcGw9cid2YWx1ZSBEaWN0VmFsdWUoQ2hhcmFjdGVyLmRlc2lyZXMsICJvcmdhc20iLCByYW5nZT0xLjAsIHN0ZXA9MC4xKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCnNleCgpCgojPT09PT09PT09PT0gLi9jb3JlL21lY2hhbmljcy9hcHByb3ZhbC5ycHkKZGVmIGFwcHJvdmFsKCk6CiAgICBmbj0iLi9jb3JlL21lY2hhbmljcy9hcHByb3ZhbC5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgIyNicmVha3MgYXBwcm92YWwgbGltaXQKICAgIHBhdHQ9cidtYXhfc3RhdCA9IG1heF9zdGF0c1xbc2Vhc29uIC0gMVxdIGlmIHBlcnNpc3RlbnRcLnN0YXRfY2FwcyBlbHNlIDEwMDAnCiAgICByZXBsPXInbWF4X3N0YXQgPSBtYXhfc3RhdHNbc2Vhc29uIC0gMV0gaWYgcGVyc2lzdGVudC5zdGF0X2NhcHMgZWxzZSA5OTk5OScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCmFwcHJvdmFsKCkKCgojIz09PT09PT09PT09IGFsbG93aW5nIHNleCBpbiBwdWJsaWMuIFByb3BzIHRvIFJvbkNob24uIDIgQ2hlY2tzIGluIHBsYWNlIHRvIHByZXZlbnQgdGhpcy4KIyMgRGlkIEkgZG8gdGhpcyBiZWNhdXNlIGRhcmtzdGVsIGNvdWxkbid0IGdldCBvdmVyIGhpbXNlbGY/IFllcC4gSXMgaXQgYSBiaXQgaW1tYXR1cmU/IFllcC4gRG8gSSBmZWVsIGFzaGFtZWQ/IE5vcGUuIElmIHlvdSBkb24ndCB3YW50IGNvZGUgdG8gY2hhbmdlLCBkb24ndCBwb2tlIGEgcHJvZ3JhbW1lci4KIyM9PT09PT09PT09PSAuL3NjcmlwdHMvc2V4L3JlcXVlc3QucnB5CiM9PT09PT09PT09PSAuL2NvcmUvbWVjaGFuaWNzL3NleC9yZXF1ZXN0LnJweQpkZWYgYWxsb3dQdWJsaWNTZXgoKToKICAgIGZuPSIuL2NvcmUvbWVjaGFuaWNzL3NleC9yZXF1ZXN0LnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjc2tpcHMgYmVkcm9vbSBjaGVjayBmb3IgcGxhY2UgdG8gaGF2ZSBzZXgKICAgIHBhdHQ9cidcKFBsYXllclwubG9jYXRpb24gbm90IGluIEJlZHJvb21zIGFuZCAiYmdfc2hvd2VyIiBub3QgaW4gUGxheWVyXC5sb2NhdGlvblwpIG9yIFByZXNlbnQgLSBce0NoYXJhY3Rlclx9JwogICAgcmVwbD1yJ0ZhbHNlJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgoKICAgIGZuPSIuL2ludGVyZmFjZXMvaW50ZXJhY3Rpb25zLnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjc2tpcHMgYmVkcm9vbSBjaGVja3MgYW5kIG51bWJlciBvZiBwZW9wbGUgY2hlY2tzIGZvciBwbGFjZSB0byBoYXZlIHNleCBHVUkKICAgIHBhdHQ9cidpZiBjaGVja19hcHByb3ZhbFwoQ2hhcmFjdGVyLCB0aHJlc2hvbGQgPSAiaG9va3VwIlwpIGFuZCBsZW5cKFByZXNlbnRcKSA9PSAxIGFuZCBQbGF5ZXIubG9jYXRpb24gaW4gXHtDaGFyYWN0ZXIuaG9tZSwgUGxheWVyLmhvbWVcfSBhbmQgbm90IGdldF9QcmVzZW50XChsb2NhdGlvbiA9IFBsYXllci5sb2NhdGlvbi5yZXBsYWNlXCgiXyIsICJfc2hvd2VyXyJcKVwpXFswXF0nCiAgICByZXBsPXInaWYgY2hlY2tfYXBwcm92YWwoQ2hhcmFjdGVyLCB0aHJlc2hvbGQgPSAiaG9va3VwIikgYW5kIGxlbihQcmVzZW50KSA+PSAxJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKYWxsb3dQdWJsaWNTZXgoKQoKIz09PT09PT09PT09IC4vY29yZS9tZWNoYW5pY3MvY2xvdGhpbmcucnB5CmRlZiBhbGxvd1dlYXJDdW0oKToKIy4vY29yZS9tZWNoYW5pY3MvY2xvdGhpbmcucnB5CiAgZm49Jy4vY29yZS9tZWNoYW5pY3MvY2xvdGhpbmcucnB5JwogIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICBmYyA9IGZpbGUucmVhZCgpCgogICMgd2lsbCBsZWF2ZSBjdW0gb24gaWYgd29yZSBjdW0gMTAgb3IgbW9yZSB0aW1lcwogIHBhdHQ9cidpZiBzcHVuazonCiAgcmVwbD1yJ2lmIEMuSGlzdG9yeS5jaGVjaygid2Vhcl9jdW0iKSA8IDEwIGFuZCBzcHVuazonCgogIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgZmlsZS53cml0ZShmYykKCiAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKICAKICAjICAgICAgICAgICAgICAgICAgICBlbGlmIEMuZGVzdGluYXRpb24gaW4gcHVibGljX0xvY2F0aW9ucyBhbmQgbm90IEMuY2hlY2tfdHJhaXQoImV4aGliaXRpb25pc3QiKToKICAjIHRoaXMgaXMgZml4aW5nIGEgYnVnIHdpdGggdGhlIGN1cnJlbnQgY29kZSBmb3Igd2Fsa2luZyBhcm91bmQgd2l0aCBjdW0uIFRoZSBjbGVhbl9jdW0oKSBmdW5jdGlvbiBjYW4gY3Jhc2ggYmVjYXVzZSBpdCdzIHJ1bm5pbmcgYW4gaW50ZXJhY3Rpb24gd2hlbiB5b3UncmUgaW4gYW4gaW50ZXJhY3Rpb24KICAjPT09PT09PT09PT0gY29yZS9tZWNoYW5pY3MvYmVoYXZpb3IucnB5CiAgZm49Jy4vY29yZS9tZWNoYW5pY3MvYmVoYXZpb3IucnB5JwogIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICBmYyA9IGZpbGUucmVhZCgpCgogICMgd2lsbCBsZWF2ZSBjdW0gb24gaWYgd29yZSBjdW0gMTAgb3IgbW9yZSB0aW1lcwogIHBhdHQ9cidlbGlmIENcLmRlc3RpbmF0aW9uIGluIHB1YmxpY19Mb2NhdGlvbnMgYW5kIG5vdCBDXC5jaGVja190cmFpdFwoImV4aGliaXRpb25pc3QiXCknCiAgcmVwbD1yJ2VsaWYgQy5kZXN0aW5hdGlvbiBpbiBwdWJsaWNfTG9jYXRpb25zIGFuZCBub3QgQy5jaGVja190cmFpdCgiZXhoaWJpdGlvbmlzdCIpIGFuZCBGYWxzZScKICAKICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgIGZpbGUud3JpdGUoZmMpCgogIHByaW50KGYie2ZufSBwYXRjaGVkIikKCgphbGxvd1dlYXJDdW0oKQoKCiM9PT09PT09PT09PSAuL2RlZmluaXRpb25zL3BsYXllci5ycHkKZGVmIGFjaGlldmVtZW50UG9pbnRzKCk6CiAgICBmbj0iLi9kZWZpbml0aW9ucy9wbGF5ZXIucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgIHBhdHQ9cicoP1A8dGFi
set cheat5=cz4gKylzZWxmXC5jYWxsX3NpZ246IHN0ciA9IHNlbGZcLm5hbWUnCiAgICByZXBsPXInXGc8dGFicz5zZWxmLmNhbGxfc2lnbjogc3RyID0gc2VsZi5uYW1lXHJcblxnPHRhYnM+c2VsZi5hY2hpZXZlUG9pbnRzID0gMCcKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICBwYXR0PXInKD9QPHRhYnM+ICspcG9pbnRzID0gMCcKICAgIHJlcGw9cidcZzx0YWJzPnBvaW50cyA9IDAgKyBzZWxmLmFjaGlldmVQb2ludHMnCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgogICAgZm49Ii4vaW50ZXJmYWNlcy9waG9uZS5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD1yJyg/UDx0MT4gKyl0ZXh0ICJcW1BsYXllclwuYWNoaWV2ZW1lbnRfcG9pbnRzXF0iKD9QPGFuY2hvcj4gYW5jaG9yIFwoWzAtOSwuIF0rXCkpKD9QPHBvcz4gcG9zIFwoWzAtOSwuIF0rXCkpOltcclxuXSsoP1A8dDI+ICspc2l6ZSAoP1A8c2l6ZT5bMC05XSspW1xyXG4gXStjb2xvciAiKD9QPGNvbG9yPiNbMC05QS1GYS1mXSspIicKICAgIHJlcGw9cidcZzx0MT50ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn17Y29sb3I9XGc8Y29sb3I+fSIgKyAiW1BsYXllci5hY2hpZXZlbWVudF9wb2ludHNdIlxnPGFuY2hvcj5cZzxwb3M+OlxyXG5cZzx0Mj5hY3Rpb24gU2V0VmFyaWFibGUoIlBsYXllci5hY2hpZXZlUG9pbnRzIiwgaW50KFBsYXllci5hY2hpZXZlUG9pbnRzKSArIGludCg1MDApKScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCgoKYWNoaWV2ZW1lbnRQb2ludHMoKQoKCgpwcmludChmIiAgICBTdWNjZXNzISBDaGVhdHMgYXJlIG5vdyBlbmFibGVkISIpCg==
REM --------------------------------------------------------------------------------
REM !! DO NOT EDIT BELOW THIS LINE !!
REM --------------------------------------------------------------------------------
set "v=2.8"
title TNH Inject v%v%
:init
REM --------------------------------------------------------------------------------
REM Splash screen
REM --------------------------------------------------------------------------------
cls

echo  ----------------------------------------------------
echo.
echo  The Null Hypothesis Cheat Injector 
echo.             
echo   Vesrion: %v%
echo   by Sleepingkirby
echo   built on top of RL Cheat Injector by SLDR @ F95zone.com
echo  ----------------------------------------------------
echo.
echo.


REM --------------------------------------------------------------------------------
REM We need powershell for later, make sure it exists
REM --------------------------------------------------------------------------------
if not exist "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe" (
	echo    ! Error: Powershell is required, unable to continue.
	echo             This is included in Windows 7, 8, 10. XP/Vista users can
	echo             download it here: http://support.microsoft.com/kb/968929
	echo.
	pause>nul|set/p=.            Press any key to exit...
	exit
)

REM --------------------------------------------------------------------------------
REM Set our paths, and make sure we can find python exe
REM --------------------------------------------------------------------------------
set "currentdir=%~dp0%"
set "pythondir=%currentdir%..\lib\py3-windows-x86_64\"
set "renpydir=%currentdir%..\renpy\"
set "gamedir=%currentdir%"
if exist "game" if exist "lib" if exist "renpy" (
	set "pythondir=%currentdir%lib\py3-windows-x86_64\"
	set "renpydir=%currentdir%renpy\"
	set "gamedir=%currentdir%game\"
)

if not exist "%pythondir%python.exe" (
	echo    ! Error: Cannot locate python.exe, unable to continue.
	echo             Are you sure we're in the "game" directory?
	echo.
	pause>nul|set/p=.            Press any key to exit...
	exit
)

:menu
REM --------------------------------------------------------------------------------
REM Menu selection
REM --------------------------------------------------------------------------------
set exitoption=
echo   Available Options:
echo     1) Apply cheat
echo     2) Quit
echo.
set /p option=.  Enter a number: 
echo.
echo  ----------------------------------------------------
echo.
if "%option%" == "2" (
    goto quit
)

if exist "%gamedir%scripts\interface\Player_menu.rpy.orig" (
echo Backup files found. This probably means it was already patched. No need to further action. Exitting...
)

echo No backup's found. Safe to progress.

REM --------------------------------------------------------------------------------
REM Write _rpatool.py from our base64 strings
REM --------------------------------------------------------------------------------
set "rpatool=%currentdir%_rpatool.py"
echo   Creating rpatool...
if exist "%rpatool%.tmp" (
	del "%rpatool%.tmp"
)
if exist "%rpatool%" (
	del "%rpatool%"
)

echo %rpatool1%>> "%rpatool%.tmp"
echo %rpatool2%>> "%rpatool%.tmp"
echo %rpatool3%>> "%rpatool%.tmp"
echo %rpatool4%>> "%rpatool%.tmp"
echo %rpatool5%>> "%rpatool%.tmp"
echo %rpatool6%>> "%rpatool%.tmp"
set "rpatoolps=%rpatool:[=`[%"
set "rpatoolps=%rpatoolps:]=`]%"
set "rpatoolps=%rpatoolps:^=^^%"
set "rpatoolps=%rpatoolps:&=^&%"
powershell.exe -nologo -noprofile -noninteractive -command "& { [IO.File]::WriteAllBytes(\"%rpatoolps%\", [Convert]::FromBase64String([IO.File]::ReadAllText(\"%rpatoolps%.tmp\"))) }"

echo.

REM --------------------------------------------------------------------------------
REM Unpack RPA
REM --------------------------------------------------------------------------------
echo   Searching for RPA packages
cd "%gamedir%"
set "PYTHONPATH=%pythondir%Lib"
for %%f in (*.rpa) do (
	echo    + Unpacking "%%~nf%%~xf" - %%~zf bytes
	"%pythondir%python.exe" -O "%rpatool%" -x "%%f"
)
echo.

REM --------------------------------------------------------------------------------
REM Clean up
REM --------------------------------------------------------------------------------
echo   Cleaning up temporary files...
del "%rpatool%.tmp"
del "%rpatool%"
echo.
if "%option%" == "2" (
	goto finish
)

:cheat
REM --------------------------------------------------------------------------------
REM Make sure cheat.py doesn't already exist
REM --------------------------------------------------------------------------------
set "cheat=%currentdir%_cheat.py"
echo   Creating cheat...
if exist "%cheat%.tmp" (
	del "%cheat%.tmp"
)
if exist "%cheat%" (
	del "%cheat%"
)

REM --------------------------------------------------------------------------------
REM Create cheat.py
REM --------------------------------------------------------------------------------
echo %cheat1%>> "%cheat%.tmp"
echo %cheat2%>> "%cheat%.tmp"
echo %cheat3%>> "%cheat%.tmp"
echo %cheat4%>> "%cheat%.tmp"
echo %cheat5%>> "%cheat%.tmp"
set "cheatps=%cheat:[=`[%"
set "cheatps=%cheatps:]=`]%"
set "cheatps=%cheatps:^=^^%"
set "cheatps=%cheatps:&=^&%"
powershell.exe -nologo -noprofile -noninteractive -command "& { [IO.File]::WriteAllBytes(\"%cheatps%\", [Convert]::FromBase64String([IO.File]::ReadAllText(\"%cheatps%.tmp\"))) }"

REM --------------------------------------------------------------------------------
REM Run cheat.py
REM --------------------------------------------------------------------------------
cd "%gamedir%"
"%pythondir%python.exe" -O "%cheat%"

echo.

REM --------------------------------------------------------------------------------
REM Delete temporary files
REM --------------------------------------------------------------------------------
echo   Cleaning up temporary files...
del "%cheat%.tmp"
del "%cheat%"
echo.
goto finish


:finish
REM --------------------------------------------------------------------------------
REM We are done
REM --------------------------------------------------------------------------------
echo  ----------------------------------------------------
echo.
echo    Finished!
echo.
echo    Enter "1" to go back to the menu, or any other
set /p exitoption=.   key to exit: 
echo.
echo  ----------------------------------------------------
echo.
if "%exitoption%"=="1" goto menu

:quit
exit
