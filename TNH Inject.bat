@echo off
REM The following variables are Base64 encoded strings for unrpyc and rpatool
REM Due to batch limitations on variable lengths, they need to be split into
REM multiple variables, and joined later using powershell.
REM --------------------------------------------------------------------------------
REM rpatool f2520ad - https://github.com/Shizmob/rpatool
REM --------------------------------------------------------------------------------
set rpatool1=IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwoKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBwcmludF9mdW5jdGlvbgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IGNvZGVjcwppbXBvcnQgcGlja2xlCmltcG9ydCBlcnJubwppbXBvcnQgcmFuZG9tCnRyeToKICAgIGltcG9ydCBwaWNrbGU1IGFzIHBpY2tsZQpleGNlcHQ6CiAgICBpbXBvcnQgcGlja2xlCiAgICBpZiBzeXMudmVyc2lvbl9pbmZvIDwgKDMsIDgpOgogICAgICAgIHByaW50KCd3YXJuaW5nOiBwaWNrbGU1IG1vZHVsZSBjb3VsZCBub3QgYmUgbG9hZGVkIGFuZCBQeXRob24gdmVyc2lvbiBpcyA8IDMuOCwnLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcHJpbnQoJyAgICAgICAgIG5ld2VyIFJlblwnUHkgZ2FtZXMgbWF5IGZhaWwgdG8gdW5wYWNrIScsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICBpZiBzeXMudmVyc2lvbl9pbmZvID49ICgzLCA1KToKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgIGlmIHRoaXMgb2NjdXJzLCBmaXggaXQgYnkgaW5zdGFsbGluZyBwaWNrbGU1OicsIGZpbGU9c3lzLnN0ZGVycikKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgICAgICB7fSAtbSBwaXAgaW5zdGFsbCBwaWNrbGU1Jy5mb3JtYXQoc3lzLmV4ZWN1dGFibGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoJyAgICAgICAgIGlmIHRoaXMgb2NjdXJzLCBwbGVhc2UgdXBncmFkZSB0byBhIG5ld2VyIFB5dGhvbiAoPj0gMy41KS4nLCBmaWxlPXN5cy5zdGRlcnIpCiAgICAgICAgcHJpbnQoZmlsZT1zeXMuc3RkZXJyKQoKCmlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPj0gMzoKICAgIGRlZiBfdW5pY29kZSh0ZXh0KToKICAgICAgICByZXR1cm4gdGV4dAoKICAgIGRlZiBfcHJpbnRhYmxlKHRleHQpOgogICAgICAgIHJldHVybiB0ZXh0CgogICAgZGVmIF91bm1hbmdsZShkYXRhKToKICAgICAgICBpZiB0eXBlKGRhdGEpID09IGJ5dGVzOgogICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBkYXRhLmVuY29kZSgnbGF0aW4xJykKCiAgICBkZWYgX3VucGlja2xlKGRhdGEpOgogICAgICAgICMgU3BlY2lmeSBsYXRpbjEgZW5jb2RpbmcgdG8gcHJldmVudCByYXcgYnl0ZSB2YWx1ZXMgZnJvbSBjYXVzaW5nIGFuIEFTQ0lJIGRlY29kZSBlcnJvci4KICAgICAgICByZXR1cm4gcGlja2xlLmxvYWRzKGRhdGEsIGVuY29kaW5nPSdsYXRpbjEnKQplbGlmIHN5cy52ZXJzaW9uX2luZm9bMF0gPT0gMjoKICAgIGRlZiBfdW5pY29kZSh0ZXh0KToKICAgICAgICBpZiBpc2luc3RhbmNlKHRleHQsIHVuaWNvZGUpOgogICAgICAgICAgICByZXR1cm4gdGV4dAogICAgICAgIHJldHVybiB0ZXh0LmRlY29kZSgndXRmLTgnKQoKICAgIGRlZiBfcHJpbnRhYmxlKHRleHQpOgogICAgICAgIHJldHVybiB0ZXh0LmVuY29kZSgndXRmLTgnKQoKICAgIGRlZiBfdW5tYW5nbGUoZGF0YSk6CiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBkZWYgX3VucGlja2xlKGRhdGEpOgogICAgICAgIHJldHVybiBwaWNrbGUubG9hZHMoZGF0YSkKCmNsYXNzIFJlblB5QXJjaGl2ZToKICAgIGZpbGUgPSBOb25lCiAgICBoYW5kbGUgPSBOb25lCgogICAgZmlsZXMgPSB7fQogICAgaW5kZXhlcyA9IHt9CgogICAgdmVyc2lvbiA9IE5vbmUKICAgIHBhZGxlbmd0aCA9IDAKICAgIGtleSA9IE5vbmUKICAgIHZlcmJvc2UgPSBGYWxzZQoKICAgIFJQQTJfTUFHSUMgPSAnUlBBLTIuMCAnCiAgICBSUEEzX01BR0lDID0gJ1JQQS0zLjAgJwogICAgUlBBM18yX01BR0lDID0gJ1JQQS0zLjIgJwoKICAgICMgRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG90aGVyd2lzZSBQeXRob24zLXBhY2tlZCBhcmNoaXZlcyB3b24ndCBiZSByZWFkIGJ5IFB5dGhvbjIKICAgIFBJQ0tMRV9QUk9UT0NPTCA9IDIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZmlsZSA9IE5vbmUsIHZlcnNpb24gPSAzLCBwYWRsZW5ndGggPSAwLCBrZXkgPSAweERFQURCRUVGLCB2ZXJib3NlID0gRmFsc2UpOgogICAgICAgIHNlbGYucGFkbGVuZ3RoID0gcGFkbGVuZ3RoCiAgICAgICAgc2VsZi5rZXkgPSBrZXkKICAgICAgICBzZWxmLnZlcmJvc2UgPSB2ZXJib3NlCgogICAgICAgIGlmIGZpbGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYubG9hZChmaWxlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudmVyc2lvbiA9IHZlcnNpb24KCiAgICBkZWYgX19kZWxfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLmhhbmRsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5oYW5kbGUuY2xvc2UoKQoKICAgICMgRGV0ZXJtaW5lIGFyY2hpdmUgdmVyc2lvbi4KICAgIGRlZiBnZXRfdmVyc2lvbihzZWxmKToKICAgICAgICBzZWxmLmhhbmRsZS5zZWVrKDApCiAgICAgICAgbWFnaWMgPSBzZWxmLmhhbmRsZS5yZWFkbGluZSgpLmRlY29kZSgndXRmLTgnKQoKICAgICAgICBpZiBtYWdpYy5zdGFydHN3aXRoKHNlbGYuUlBBM18yX01BR0lDKToKICAgICAgICAgICAgcmV0dXJuIDMuMgogICAgICAgIGVsaWYgbWFnaWMuc3RhcnRzd2l0aChzZWxmLlJQQTNfTUFHSUMpOgogICAgICAgICAgICByZXR1cm4gMwogICAgICAgIGVsaWYgbWFnaWMuc3RhcnRzd2l0aChzZWxmLlJQQTJfTUFHSUMpOgogICAgICAgICAgICByZXR1cm4gMgogICAgICAgIGVsaWYgc2VsZi5maWxlLmVuZHN3aXRoKCcucnBpJyk6CiAgICAgICAgICAgIHJldHVybiAxCgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3RoZSBnaXZlbiBmaWxlIGlzIG5vdCBhIHZhbGlkIFJlblwnUHkgYXJjaGl2ZSwgb3IgYW4gdW5zdXBwb3J0ZWQgdmVyc2lvbicpCgogICAgIyBFeHRyYWN0IGZpbGUgaW5kZXhlcyBmcm9tIG9wZW5lZCBhcmNoaXZlLgogICAgZGVmIGV4dHJhY3RfaW5kZXhlcyhzZWxmKToKICAgICAgICBzZWxmLmhhbmRsZS5zZWVrKDApCiAgICAgICAgaW5kZXhlcyA9IE5vbmUKCiAgICAgICAgaWYgc2VsZi52ZXJzaW9uIGluIFsyLCAzLCAzLjJdOgogICAgICAgICAgICAjIEZldGNoIG1ldGFkYXRhLgogICAgICAgICAgICBtZXRhZGF0YSA9IHNlbGYuaGFuZGxlLnJlYWRsaW5lKCkKICAgICAgICAgICAgdmFscyA9IG1ldGFkYXRhLnNwbGl0KCkKICAgICAgICAgICAgb2Zmc2V0ID0gaW50KHZhbHNbMV0sIDE2KQogICAgICAgICAgICBpZiBzZWxmLnZlcnNpb24gPT0gMzoKICAgICAgICAgICAgICAgIHNlbGYua2V5ID0gMAogICAgICAgICAgICAgICAgZm9yIHN1YmtleSBpbiB2YWxzWzI6XToKICAgICAgICAgICAgICAgICAgICBzZWxmLmtleSBePSBpbnQoc3Via2V5LCAxNikKICAgICAgICAgICAgZWxpZiBzZWxmLnZlcnNpb24gPT0gMy4yOgogICAgICAgICAgICAgICAgc2VsZi5rZXkgPSAwCiAgICAgICAgICAgICAgICBmb3Igc3Via2V5IGluIHZhbHNbMzpdOgogICAgICAgICAgICAgICAgICAgIHNlbGYua2V5IF49IGludChzdWJrZXksIDE2KQoKICAgICAgICAgICAgIyBMb2FkIGluIGluZGV4ZXMuCiAgICAgICAgICAgIHNlbGYuaGFuZGxlLnNlZWsob2Zmc2V0KQogICAgICAgICAgICBjb250ZW50cyA9IGNvZGVjcy5kZWNvZGUoc2VsZi5oYW5kbGUucmVhZCgpLCAnemxpYicpCiAgICAgICAgICAgIGluZGV4ZXMgPSBfdW5waWNrbGUoY29udGVudHMpCgogICAgICAg
set rpatool2=ICAgICAjIERlb2JmdXNjYXRlIGluZGV4ZXMuCiAgICAgICAgICAgIGlmIHNlbGYudmVyc2lvbiBpbiBbMywgMy4yXToKICAgICAgICAgICAgICAgIG9iZnVzY2F0ZWRfaW5kZXhlcyA9IGluZGV4ZXMKICAgICAgICAgICAgICAgIGluZGV4ZXMgPSB7fQogICAgICAgICAgICAgICAgZm9yIGkgaW4gb2JmdXNjYXRlZF9pbmRleGVzLmtleXMoKToKICAgICAgICAgICAgICAgICAgICBpZiBsZW4ob2JmdXNjYXRlZF9pbmRleGVzW2ldWzBdKSA9PSAyOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2ldID0gWyAob2Zmc2V0IF4gc2VsZi5rZXksIGxlbmd0aCBeIHNlbGYua2V5KSBmb3Igb2Zmc2V0LCBsZW5ndGggaW4gb2JmdXNjYXRlZF9pbmRleGVzW2ldIF0KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW2ldID0gWyAob2Zmc2V0IF4gc2VsZi5rZXksIGxlbmd0aCBeIHNlbGYua2V5LCBwcmVmaXgpIGZvciBvZmZzZXQsIGxlbmd0aCwgcHJlZml4IGluIG9iZnVzY2F0ZWRfaW5kZXhlc1tpXSBdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW5kZXhlcyA9IHBpY2tsZS5sb2Fkcyhjb2RlY3MuZGVjb2RlKHNlbGYuaGFuZGxlLnJlYWQoKSwgJ3psaWInKSkKCiAgICAgICAgcmV0dXJuIGluZGV4ZXMKCiAgICAjIEdlbmVyYXRlIHBzZXVkb3JhbmRvbSBwYWRkaW5nIChmb3Igd2hhdGV2ZXIgcmVhc29uKS4KICAgIGRlZiBnZW5lcmF0ZV9wYWRkaW5nKHNlbGYpOgogICAgICAgIGxlbmd0aCA9IHJhbmRvbS5yYW5kaW50KDEsIHNlbGYucGFkbGVuZ3RoKQoKICAgICAgICBwYWRkaW5nID0gJycKICAgICAgICB3aGlsZSBsZW5ndGggPiAwOgogICAgICAgICAgICBwYWRkaW5nICs9IGNocihyYW5kb20ucmFuZGludCgxLCAyNTUpKQogICAgICAgICAgICBsZW5ndGggLT0gMQoKICAgICAgICByZXR1cm4gYnl0ZXMocGFkZGluZywgJ3V0Zi04JykKCiAgICAjIENvbnZlcnRzIGEgZmlsZW5hbWUgdG8gYXJjaGl2ZSBmb3JtYXQuCiAgICBkZWYgY29udmVydF9maWxlbmFtZShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgKGRyaXZlLCBmaWxlbmFtZSkgPSBvcy5wYXRoLnNwbGl0ZHJpdmUob3MucGF0aC5ub3JtcGF0aChmaWxlbmFtZSkucmVwbGFjZShvcy5zZXAsICcvJykpCiAgICAgICAgcmV0dXJuIGZpbGVuYW1lCgogICAgIyBEZWJ1ZyAodmVyYm9zZSkgbWVzc2FnZXMuCiAgICBkZWYgdmVyYm9zZV9wcmludChzZWxmLCBtZXNzYWdlKToKICAgICAgICBpZiBzZWxmLnZlcmJvc2U6CiAgICAgICAgICAgIHByaW50KG1lc3NhZ2UpCgoKICAgICMgTGlzdCBmaWxlcyBpbiBhcmNoaXZlIGFuZCBjdXJyZW50IGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgbGlzdChzZWxmKToKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmluZGV4ZXMua2V5cygpKSArIGxpc3Qoc2VsZi5maWxlcy5rZXlzKCkpCgogICAgIyBDaGVjayBpZiBhIGZpbGUgZXhpc3RzIGluIHRoZSBhcmNoaXZlLgogICAgZGVmIGhhc19maWxlKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQogICAgICAgIHJldHVybiBmaWxlbmFtZSBpbiBzZWxmLmluZGV4ZXMua2V5cygpIG9yIGZpbGVuYW1lIGluIHNlbGYuZmlsZXMua2V5cygpCgogICAgIyBSZWFkIGZpbGUgZnJvbSBhcmNoaXZlIG9yIGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgcmVhZChzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZmlsZW5hbWUgPSBzZWxmLmNvbnZlcnRfZmlsZW5hbWUoX3VuaWNvZGUoZmlsZW5hbWUpKQoKICAgICAgICAjIENoZWNrIGlmIHRoZSBmaWxlIGV4aXN0cyBpbiBvdXIgaW5kZXhlcy4KICAgICAgICBpZiBmaWxlbmFtZSBub3QgaW4gc2VsZi5maWxlcyBhbmQgZmlsZW5hbWUgbm90IGluIHNlbGYuaW5kZXhlczoKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcihlcnJuby5FTk9FTlQsICd0aGUgcmVxdWVzdGVkIGZpbGUgezB9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBnaXZlbiBSZW5cJ1B5IGFyY2hpdmUnLmZvcm1hdCgKICAgICAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpKSkKCiAgICAgICAgIyBJZiBpdCdzIGluIG91ciBvcGVuZWQgYXJjaGl2ZSBpbmRleCwgYW5kIG91ciBhcmNoaXZlIGhhbmRsZSBpc24ndCB2YWxpZCwgc29tZXRoaW5nIGlzIG9idmlvdXNseSB3cm9uZy4KICAgICAgICBpZiBmaWxlbmFtZSBub3QgaW4gc2VsZi5maWxlcyBhbmQgZmlsZW5hbWUgaW4gc2VsZi5pbmRleGVzIGFuZCBzZWxmLmhhbmRsZSBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBJT0Vycm9yKGVycm5vLkVOT0VOVCwgJ3RoZSByZXF1ZXN0ZWQgZmlsZSB7MH0gZG9lcyBub3QgZXhpc3QgaW4gdGhlIGdpdmVuIFJlblwnUHkgYXJjaGl2ZScuZm9ybWF0KAogICAgICAgICAgICAgICAgX3ByaW50YWJsZShmaWxlbmFtZSkpKQoKICAgICAgICAjIENoZWNrIG91ciBzaW1wbGlmaWVkIGludGVybmFsIGluZGV4ZXMgZmlyc3QsIGluIGNhc2Ugc29tZW9uZSB3YW50cyB0byByZWFkIGEgZmlsZSB0aGV5IGFkZGVkIGJlZm9yZSB3aXRob3V0IHNhdmluZywgZm9yIHNvbWUgdW5ob2x5IHJlYXNvbi4KICAgICAgICBpZiBmaWxlbmFtZSBpbiBzZWxmLmZpbGVzOgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlYWRpbmcgZmlsZSB7MH0gZnJvbSBpbnRlcm5hbCBzdG9yYWdlLi4uJy5mb3JtYXQoX3ByaW50YWJsZShmaWxlbmFtZSkpKQogICAgICAgICAgICByZXR1cm4gc2VsZi5maWxlc1tmaWxlbmFtZV0KICAgICAgICAjIFdlIG5lZWQgdG8gcmVhZCB0aGUgZmlsZSBmcm9tIG91ciBvcGVuIGFyY2hpdmUuCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBSZWFkIG9mZnNldCBhbmQgbGVuZ3RoLCBzZWVrIHRvIHRoZSBvZmZzZXQgYW5kIHJlYWQgdGhlIGZpbGUgY29udGVudHMuCiAgICAgICAgICAgIGlmIGxlbihzZWxmLmluZGV4ZXNbZmlsZW5hbWVdWzBdKSA9PSAzOgogICAgICAgICAgICAgICAgKG9mZnNldCwgbGVuZ3RoLCBwcmVmaXgpID0gc2VsZi5pbmRleGVzW2ZpbGVuYW1lXVswXQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgKG9mZnNldCwgbGVuZ3RoKSA9IHNlbGYuaW5kZXhlc1tmaWxlbmFtZV1bMF0KICAgICAgICAgICAgICAgIHByZWZpeCA9ICcnCgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlYWRpbmcgZmlsZSB7MH0gZnJvbSBkYXRhIGZpbGUgezF9Li4uIChvZmZzZXQgPSB7Mn0sIGxlbmd0aCA9IHszfSBieXRlcyknLmZvcm1hdCgKICAgICAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpLCBzZWxmLmZpbGUsIG9mZnNldCwgbGVuZ3RoKSkKICAgICAgICAgICAgc2VsZi5oYW5kbGUuc2VlayhvZmZzZXQpCiAgICAgICAgICAgIHJldHVybiBfdW5tYW5nbGUocHJlZml4KSArIHNlbGYuaGFuZGxlLnJlYWQobGVuZ3RoIC0gbGVuKHByZWZpeCkpCgogICAgIyBNb2RpZnkgYSBmaWxlIGluIGFyY2hpdmUgb3IgaW50ZXJuYWwgc3RvcmFnZS4KICAgIGRlZiBjaGFuZ2Uoc2VsZiwgZmlsZW5hbWUsIGNvbnRlbnRzKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQoKICAgICAgICAjIE91ciAnY2hhbmdlJyBpcyBiYXNpY2FsbHkgcmVtb3ZpbmcgdGhlIGZpbGUgZnJvbSBvdXIgaW5kZXhlcyBmaXJz
set rpatool3=dCwgYW5kIHRoZW4gcmUtYWRkaW5nIGl0LgogICAgICAgIHNlbGYucmVtb3ZlKGZpbGVuYW1lKQogICAgICAgIHNlbGYuYWRkKGZpbGVuYW1lLCBjb250ZW50cykKCiAgICAjIEFkZCBhIGZpbGUgdG8gdGhlIGludGVybmFsIHN0b3JhZ2UuCiAgICBkZWYgYWRkKHNlbGYsIGZpbGVuYW1lLCBjb250ZW50cyk6CiAgICAgICAgZmlsZW5hbWUgPSBzZWxmLmNvbnZlcnRfZmlsZW5hbWUoX3VuaWNvZGUoZmlsZW5hbWUpKQogICAgICAgIGlmIGZpbGVuYW1lIGluIHNlbGYuZmlsZXMgb3IgZmlsZW5hbWUgaW4gc2VsZi5pbmRleGVzOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdmaWxlIHswfSBhbHJlYWR5IGV4aXN0cyBpbiBhcmNoaXZlJy5mb3JtYXQoX3ByaW50YWJsZShmaWxlbmFtZSkpKQoKICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ0FkZGluZyBmaWxlIHswfSB0byBhcmNoaXZlLi4uIChsZW5ndGggPSB7MX0gYnl0ZXMpJy5mb3JtYXQoCiAgICAgICAgICAgIF9wcmludGFibGUoZmlsZW5hbWUpLCBsZW4oY29udGVudHMpKSkKICAgICAgICBzZWxmLmZpbGVzW2ZpbGVuYW1lXSA9IGNvbnRlbnRzCgogICAgIyBSZW1vdmUgYSBmaWxlIGZyb20gYXJjaGl2ZSBvciBpbnRlcm5hbCBzdG9yYWdlLgogICAgZGVmIHJlbW92ZShzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZmlsZW5hbWUgPSBfdW5pY29kZShmaWxlbmFtZSkKICAgICAgICBpZiBmaWxlbmFtZSBpbiBzZWxmLmZpbGVzOgogICAgICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1JlbW92aW5nIGZpbGUgezB9IGZyb20gaW50ZXJuYWwgc3RvcmFnZS4uLicuZm9ybWF0KF9wcmludGFibGUoZmlsZW5hbWUpKSkKICAgICAgICAgICAgZGVsIHNlbGYuZmlsZXNbZmlsZW5hbWVdCiAgICAgICAgZWxpZiBmaWxlbmFtZSBpbiBzZWxmLmluZGV4ZXM6CiAgICAgICAgICAgIHNlbGYudmVyYm9zZV9wcmludCgnUmVtb3ZpbmcgZmlsZSB7MH0gZnJvbSBhcmNoaXZlIGluZGV4ZXMuLi4nLmZvcm1hdChfcHJpbnRhYmxlKGZpbGVuYW1lKSkpCiAgICAgICAgICAgIGRlbCBzZWxmLmluZGV4ZXNbZmlsZW5hbWVdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcihlcnJuby5FTk9FTlQsICd0aGUgcmVxdWVzdGVkIGZpbGUgezB9IGRvZXMgbm90IGV4aXN0IGluIHRoaXMgYXJjaGl2ZScuZm9ybWF0KF9wcmludGFibGUoZmlsZW5hbWUpKSkKCiAgICAjIExvYWQgYXJjaGl2ZS4KICAgIGRlZiBsb2FkKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBmaWxlbmFtZSA9IF91bmljb2RlKGZpbGVuYW1lKQoKICAgICAgICBpZiBzZWxmLmhhbmRsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5oYW5kbGUuY2xvc2UoKQogICAgICAgIHNlbGYuZmlsZSA9IGZpbGVuYW1lCiAgICAgICAgc2VsZi5maWxlcyA9IHt9CiAgICAgICAgc2VsZi5oYW5kbGUgPSBvcGVuKHNlbGYuZmlsZSwgJ3JiJykKICAgICAgICBzZWxmLnZlcnNpb24gPSBzZWxmLmdldF92ZXJzaW9uKCkKICAgICAgICBzZWxmLmluZGV4ZXMgPSBzZWxmLmV4dHJhY3RfaW5kZXhlcygpCgogICAgIyBTYXZlIGN1cnJlbnQgc3RhdGUgaW50byBhIG5ldyBmaWxlLCBtZXJnaW5nIGFyY2hpdmUgYW5kIGludGVybmFsIHN0b3JhZ2UsIHJlYnVpbGRpbmcgaW5kZXhlcywgYW5kIG9wdGlvbmFsbHkgc2F2aW5nIGluIGFub3RoZXIgZm9ybWF0IHZlcnNpb24uCiAgICBkZWYgc2F2ZShzZWxmLCBmaWxlbmFtZSA9IE5vbmUpOgogICAgICAgIGZpbGVuYW1lID0gX3VuaWNvZGUoZmlsZW5hbWUpCgogICAgICAgIGlmIGZpbGVuYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIGZpbGVuYW1lID0gc2VsZi5maWxlCiAgICAgICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbm8gdGFyZ2V0IGZpbGUgZm91bmQgZm9yIHNhdmluZyBhcmNoaXZlJykKICAgICAgICBpZiBzZWxmLnZlcnNpb24gIT0gMiBhbmQgc2VsZi52ZXJzaW9uICE9IDM6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3NhdmluZyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgdmVyc2lvbiAyIGFuZCAzIGFyY2hpdmVzJykKCiAgICAgICAgc2VsZi52ZXJib3NlX3ByaW50KCdSZWJ1aWxkaW5nIGFyY2hpdmUgaW5kZXguLi4nKQogICAgICAgICMgRmlsbCBvdXIgb3duIGZpbGVzIHN0cnVjdHVyZSB3aXRoIHRoZSBmaWxlcyBhZGRlZCBvciBjaGFuZ2VkIGluIHRoaXMgc2Vzc2lvbi4KICAgICAgICBmaWxlcyA9IHNlbGYuZmlsZXMKICAgICAgICAjIEZpcnN0LCByZWFkIGZpbGVzIGZyb20gdGhlIGN1cnJlbnQgYXJjaGl2ZSBpbnRvIG91ciBmaWxlcyBzdHJ1Y3R1cmUuCiAgICAgICAgZm9yIGZpbGUgaW4gbGlzdChzZWxmLmluZGV4ZXMua2V5cygpKToKICAgICAgICAgICAgY29udGVudCA9IHNlbGYucmVhZChmaWxlKQogICAgICAgICAgICAjIFJlbW92ZSBmcm9tIGluZGV4ZXMgYXJyYXkgb25jZSByZWFkLCBhZGQgdG8gb3VyIG93biBhcnJheS4KICAgICAgICAgICAgZGVsIHNlbGYuaW5kZXhlc1tmaWxlXQogICAgICAgICAgICBmaWxlc1tmaWxlXSA9IGNvbnRlbnQKCiAgICAgICAgIyBQcmVkaWN0IGhlYWRlciBsZW5ndGgsIHdlJ2xsIHdyaXRlIHRoYXQgb25lIGxhc3QuCiAgICAgICAgb2Zmc2V0ID0gMAogICAgICAgIGlmIHNlbGYudmVyc2lvbiA9PSAzOgogICAgICAgICAgICBvZmZzZXQgPSAzNAogICAgICAgIGVsaWYgc2VsZi52ZXJzaW9uID09IDI6CiAgICAgICAgICAgIG9mZnNldCA9IDI1CiAgICAgICAgYXJjaGl2ZSA9IG9wZW4oZmlsZW5hbWUsICd3YicpCiAgICAgICAgYXJjaGl2ZS5zZWVrKG9mZnNldCkKCiAgICAgICAgIyBCdWlsZCBvdXIgb3duIGluZGV4ZXMgd2hpbGUgd3JpdGluZyBmaWxlcyB0byB0aGUgYXJjaGl2ZS4KICAgICAgICBpbmRleGVzID0ge30KICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1dyaXRpbmcgZmlsZXMgdG8gYXJjaGl2ZSBmaWxlLi4uJykKICAgICAgICBmb3IgZmlsZSwgY29udGVudCBpbiBmaWxlcy5pdGVtcygpOgogICAgICAgICAgICAjIEdlbmVyYXRlIHJhbmRvbSBwYWRkaW5nLCBmb3Igd2hhdGV2ZXIgcmVhc29uLgogICAgICAgICAgICBpZiBzZWxmLnBhZGxlbmd0aCA+IDA6CiAgICAgICAgICAgICAgICBwYWRkaW5nID0gc2VsZi5nZW5lcmF0ZV9wYWRkaW5nKCkKICAgICAgICAgICAgICAgIGFyY2hpdmUud3JpdGUocGFkZGluZykKICAgICAgICAgICAgICAgIG9mZnNldCArPSBsZW4ocGFkZGluZykKCiAgICAgICAgICAgIGFyY2hpdmUud3JpdGUoY29udGVudCkKICAgICAgICAgICAgIyBVcGRhdGUgaW5kZXguCiAgICAgICAgICAgIGlmIHNlbGYudmVyc2lvbiA9PSAzOgogICAgICAgICAgICAgICAgaW5kZXhlc1tmaWxlXSA9IFsgKG9mZnNldCBeIHNlbGYua2V5LCBsZW4oY29udGVudCkgXiBzZWxmLmtleSkgXQogICAgICAgICAgICBlbGlmIHNlbGYudmVyc2lvbiA9PSAyOgogICAgICAgICAgICAgICAgaW5kZXhlc1tmaWxlXSA9IFsgKG9mZnNldCwgbGVuKGNvbnRlbnQpKSBdCiAgICAgICAgICAgIG9mZnNldCArPSBsZW4oY29udGVudCkKCiAgICAgICAgIyBXcml0ZSB0aGUgaW5kZXhlcy4KICAgICAgICBzZWxmLnZlcmJvc2VfcHJpbnQoJ1dyaXRpbmcgYXJjaGl2ZSBpbmRleCB0byBhcmNoaXZlIGZpbGUuLi4nKQogICAgICAgIGFy
set rpatool4=Y2hpdmUud3JpdGUoY29kZWNzLmVuY29kZShwaWNrbGUuZHVtcHMoaW5kZXhlcywgc2VsZi5QSUNLTEVfUFJPVE9DT0wpLCAnemxpYicpKQogICAgICAgICMgTm93IHdyaXRlIHRoZSBoZWFkZXIuCiAgICAgICAgc2VsZi52ZXJib3NlX3ByaW50KCdXcml0aW5nIGhlYWRlciB0byBhcmNoaXZlIGZpbGUuLi4gKHZlcnNpb24gPSBSUEF2ezB9KScuZm9ybWF0KHNlbGYudmVyc2lvbikpCiAgICAgICAgYXJjaGl2ZS5zZWVrKDApCiAgICAgICAgaWYgc2VsZi52ZXJzaW9uID09IDM6CiAgICAgICAgICAgIGFyY2hpdmUud3JpdGUoY29kZWNzLmVuY29kZSgne317OjAxNnh9IHs6MDh4fVxuJy5mb3JtYXQoc2VsZi5SUEEzX01BR0lDLCBvZmZzZXQsIHNlbGYua2V5KSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgYXJjaGl2ZS53cml0ZShjb2RlY3MuZW5jb2RlKCd7fXs6MDE2eH1cbicuZm9ybWF0KHNlbGYuUlBBMl9NQUdJQywgb2Zmc2V0KSkpCiAgICAgICAgIyBXZSdyZSBkb25lLCBjbG9zZSBpdC4KICAgICAgICBhcmNoaXZlLmNsb3NlKCkKCiAgICAgICAgIyBSZWxvYWQgdGhlIGZpbGUgaW4gb3VyIGlubmVyIGRhdGFiYXNlLgogICAgICAgIHNlbGYubG9hZChmaWxlbmFtZSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBpbXBvcnQgYXJncGFyc2UKCiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigKICAgICAgICBkZXNjcmlwdGlvbj0nQSB0b29sIGZvciB3b3JraW5nIHdpdGggUmVuXCdQeSBhcmNoaXZlIGZpbGVzLicsCiAgICAgICAgZXBpbG9nPSdUaGUgRklMRSBhcmd1bWVudCBjYW4gb3B0aW9uYWxseSBiZSBpbiBBUkNISVZFPVJFQUwgZm9ybWF0LCBtYXBwaW5nIGEgZmlsZSBpbiB0aGUgYXJjaGl2ZSBmaWxlIHN5c3RlbSB0byBhIGZpbGUgb24geW91ciByZWFsIGZpbGUgc3lzdGVtLiBBbiBleGFtcGxlIG9mIHRoaXM6IHJwYXRvb2wgLXggdGVzdC5ycGEgc2NyaXB0LnJweWM9L2hvbWUvZm9vL3Rlc3QucnB5YycsCiAgICAgICAgYWRkX2hlbHA9RmFsc2UpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnYXJjaGl2ZScsIG1ldGF2YXI9J0FSQ0hJVkUnLCBoZWxwPSdUaGUgUmVuXCdweSBhcmNoaXZlIGZpbGUgdG8gb3BlcmF0ZSBvbi4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnZmlsZXMnLCBtZXRhdmFyPSdGSUxFJywgbmFyZ3M9JyonLCBhY3Rpb249J2FwcGVuZCcsIGhlbHA9J1plcm8gb3IgbW9yZSBmaWxlcyB0byBvcGVyYXRlIG9uLicpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWwnLCAnLS1saXN0JywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nTGlzdCBmaWxlcyBpbiBhcmNoaXZlIEFSQ0hJVkUuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy14JywgJy0tZXh0cmFjdCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0V4dHJhY3QgRklMRXMgZnJvbSBBUkNISVZFLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYycsICctLWNyZWF0ZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0NyZWF0aXZlIEFSQ0hJVkUgZnJvbSBGSUxFcy4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWQnLCAnLS1kZWxldGUnLCBhY3Rpb249J3N0b3JlX3RydWUnLCBoZWxwPSdEZWxldGUgRklMRXMgZnJvbSBBUkNISVZFLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctYScsICctLWFwcGVuZCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0FwcGVuZCBGSUxFcyB0byBBUkNISVZFLicpCgogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLTInLCAnLS10d28nLCBhY3Rpb249J3N0b3JlX3RydWUnLCBoZWxwPSdVc2UgdGhlIFJQQXYyIGZvcm1hdCBmb3IgY3JlYXRpbmcvYXBwZW5kaW5nIHRvIGFyY2hpdmVzLicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctMycsICctLXRocmVlJywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nVXNlIHRoZSBSUEF2MyBmb3JtYXQgZm9yIGNyZWF0aW5nL2FwcGVuZGluZyB0byBhcmNoaXZlcyAoZGVmYXVsdCkuJykKCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctaycsICctLWtleScsIG1ldGF2YXI9J0tFWScsIGhlbHA9J1RoZSBvYmZ1c2NhdGlvbiBrZXkgdXNlZCBmb3IgY3JlYXRpbmcgUlBBdjMgYXJjaGl2ZXMsIGluIGhleGFkZWNpbWFsIChkZWZhdWx0OiAweERFQURCRUVGKS4nKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLXAnLCAnLS1wYWRkaW5nJywgbWV0YXZhcj0nQ09VTlQnLCBoZWxwPSdUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgb2YgcGFkZGluZyB0byBhZGQgYmV0d2VlbiBmaWxlcyAoZGVmYXVsdDogMCkuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1vJywgJy0tb3V0ZmlsZScsIGhlbHA9J0FuIGFsdGVybmF0aXZlIG91dHB1dCBhcmNoaXZlIGZpbGUgd2hlbiBhcHBlbmRpbmcgdG8gb3IgZGVsZXRpbmcgZnJvbSBhcmNoaXZlcywgb3Igb3V0cHV0IGRpcmVjdG9yeSB3aGVuIGV4dHJhY3RpbmcuJykKCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctaCcsICctLWhlbHAnLCBhY3Rpb249J2hlbHAnLCBoZWxwPSdQcmludCB0aGlzIGhlbHAgYW5kIGV4aXQuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy12JywgJy0tdmVyYm9zZScsIGFjdGlvbj0nc3RvcmVfdHJ1ZScsIGhlbHA9J0JlIGEgYml0IG1vcmUgdmVyYm9zZSB3aGlsZSBwZXJmb3JtaW5nIG9wZXJhdGlvbnMuJykKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy1WJywgJy0tdmVyc2lvbicsIGFjdGlvbj0ndmVyc2lvbicsIHZlcnNpb249J3JwYXRvb2wgdjAuOCcsIGhlbHA9J1Nob3cgdmVyc2lvbiBpbmZvcm1hdGlvbi4nKQogICAgYXJndW1lbnRzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgICMgRGV0ZXJtaW5lIFJQQSB2ZXJzaW9uLgogICAgaWYgYXJndW1lbnRzLnR3bzoKICAgICAgICB2ZXJzaW9uID0gMgogICAgZWxzZToKICAgICAgICB2ZXJzaW9uID0gMwoKICAgICMgRGV0ZXJtaW5lIFJQQXYzIGtleS4KICAgIGlmICdrZXknIGluIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzLmtleSBpcyBub3QgTm9uZToKICAgICAgICBrZXkgPSBpbnQoYXJndW1lbnRzLmtleSwgMTYpCiAgICBlbHNlOgogICAgICAgIGtleSA9IDB4REVBREJFRUYKCiAgICAjIERldGVybWluZSBwYWRkaW5nIGJ5dGVzLgogICAgaWYgJ3BhZGRpbmcnIGluIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzLnBhZGRpbmcgaXMgbm90IE5vbmU6CiAgICAgICAgcGFkZGluZyA9IGludChhcmd1bWVudHMucGFkZGluZykKICAgIGVsc2U6CiAgICAgICAgcGFkZGluZyA9IDAKCiAgICAjIERldGVybWluZSBvdXRwdXQgZmlsZS9kaXJlY3RvcnkgYW5kIGlucHV0IGFyY2hpdmUKICAgIGlmIGFyZ3VtZW50cy5jcmVhdGU6CiAgICAgICAgYXJjaGl2ZSA9IE5vbmUKICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMuYXJjaGl2ZSkKICAgIGVsc2U6CiAgICAgICAgYXJjaGl2ZSA9IF91bmljb2RlKGFyZ3VtZW50cy5hcmNoaXZlKQogICAgICAgIGlmICdvdXRmaWxlJyBpbiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50cy5vdXRmaWxlIGlzIG5vdCBOb25lOgogICAgICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMub3V0ZmlsZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIERlZmF1bHQgb3V0cHV0IGRpcmVjdG9yeSBmb3IgZXh0cmFj
set rpatool5=dGlvbiBpcyB0aGUgY3VycmVudCBkaXJlY3RvcnkuCiAgICAgICAgICAgIGlmIGFyZ3VtZW50cy5leHRyYWN0OgogICAgICAgICAgICAgICAgb3V0cHV0ID0gJy4nCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvdXRwdXQgPSBfdW5pY29kZShhcmd1bWVudHMuYXJjaGl2ZSkKCiAgICAjIE5vcm1hbGl6ZSBmaWxlcy4KICAgIGlmIGxlbihhcmd1bWVudHMuZmlsZXMpID4gMCBhbmQgaXNpbnN0YW5jZShhcmd1bWVudHMuZmlsZXNbMF0sIGxpc3QpOgogICAgICAgIGFyZ3VtZW50cy5maWxlcyA9IGFyZ3VtZW50cy5maWxlc1swXQoKICAgIHRyeToKICAgICAgICBhcmNoaXZlID0gUmVuUHlBcmNoaXZlKGFyY2hpdmUsIHBhZGxlbmd0aD1wYWRkaW5nLCBrZXk9a2V5LCB2ZXJzaW9uPXZlcnNpb24sIHZlcmJvc2U9YXJndW1lbnRzLnZlcmJvc2UpCiAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgIHByaW50KCdDb3VsZCBub3Qgb3BlbiBhcmNoaXZlIGZpbGUgezB9IGZvciByZWFkaW5nOiB7MX0nLmZvcm1hdChhcmNoaXZlLCBlKSwgZmlsZT1zeXMuc3RkZXJyKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgaWYgYXJndW1lbnRzLmNyZWF0ZSBvciBhcmd1bWVudHMuYXBwZW5kOgogICAgICAgICMgV2UgbmVlZCB0aGlzIHNlcGVyYXRlIGZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IHByb2Nlc3MgZGlyZWN0b3JpZXMuCiAgICAgICAgZGVmIGFkZF9maWxlKGZpbGVuYW1lKToKICAgICAgICAgICAgIyBJZiB0aGUgYXJjaGl2ZSBwYXRoIGRpZmZlcnMgZnJvbSB0aGUgYWN0dWFsIGZpbGUgcGF0aCwgYXMgZ2l2ZW4gaW4gdGhlIGFyZ3VtZW50LAogICAgICAgICAgICAjIGV4dHJhY3QgdGhlIGFyY2hpdmUgcGF0aCBhbmQgYWN0dWFsIGZpbGUgcGF0aC4KICAgICAgICAgICAgaWYgZmlsZW5hbWUuZmluZCgnPScpICE9IC0xOgogICAgICAgICAgICAgICAgKG91dGZpbGUsIGZpbGVuYW1lKSA9IGZpbGVuYW1lLnNwbGl0KCc9JywgMikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG91dGZpbGUgPSBmaWxlbmFtZQoKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2RpcihmaWxlbmFtZSk6CiAgICAgICAgICAgICAgICBmb3IgZmlsZSBpbiBvcy5saXN0ZGlyKGZpbGVuYW1lKToKICAgICAgICAgICAgICAgICAgICAjIFdlIG5lZWQgdG8gZG8gdGhpcyBpbiBvcmRlciB0byBtYWludGFpbiBhIHBvc3NpYmxlIEFSQ0hJVkU9UkVBTCBtYXBwaW5nIGJldHdlZW4gZGlyZWN0b3JpZXMuCiAgICAgICAgICAgICAgICAgICAgYWRkX2ZpbGUob3V0ZmlsZSArIG9zLnNlcCArIGZpbGUgKyAnPScgKyBmaWxlbmFtZSArIG9zLnNlcCArIGZpbGUpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGZpbGVuYW1lLCAncmInKSBhcyBmaWxlOgogICAgICAgICAgICAgICAgICAgICAgICBhcmNoaXZlLmFkZChvdXRmaWxlLCBmaWxlLnJlYWQoKSkKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICBwcmludCgnQ291bGQgbm90IGFkZCBmaWxlIHswfSB0byBhcmNoaXZlOiB7MX0nLmZvcm1hdChmaWxlbmFtZSwgZSksIGZpbGU9c3lzLnN0ZGVycikKCiAgICAgICAgIyBJdGVyYXRlIG92ZXIgdGhlIGdpdmVuIGZpbGVzIHRvIGFkZCB0byBhcmNoaXZlLgogICAgICAgIGZvciBmaWxlbmFtZSBpbiBhcmd1bWVudHMuZmlsZXM6CiAgICAgICAgICAgIGFkZF9maWxlKF91bmljb2RlKGZpbGVuYW1lKSkKCiAgICAgICAgIyBTZXQgdmVyc2lvbiBmb3Igc2F2aW5nLCBhbmQgc2F2ZS4KICAgICAgICBhcmNoaXZlLnZlcnNpb24gPSB2ZXJzaW9uCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhcmNoaXZlLnNhdmUob3V0cHV0KQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoJ0NvdWxkIG5vdCBzYXZlIGFyY2hpdmUgZmlsZTogezB9Jy5mb3JtYXQoZSksIGZpbGU9c3lzLnN0ZGVycikKICAgIGVsaWYgYXJndW1lbnRzLmRlbGV0ZToKICAgICAgICAjIEl0ZXJhdGUgb3ZlciB0aGUgZ2l2ZW4gZmlsZXMgdG8gZGVsZXRlIGZyb20gdGhlIGFyY2hpdmUuCiAgICAgICAgZm9yIGZpbGVuYW1lIGluIGFyZ3VtZW50cy5maWxlczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYXJjaGl2ZS5yZW1vdmUoZmlsZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KCdDb3VsZCBub3QgZGVsZXRlIGZpbGUgezB9IGZyb20gYXJjaGl2ZTogezF9Jy5mb3JtYXQoZmlsZW5hbWUsIGUpLCBmaWxlPXN5cy5zdGRlcnIpCgogICAgICAgICMgU2V0IHZlcnNpb24gZm9yIHNhdmluZywgYW5kIHNhdmUuCiAgICAgICAgYXJjaGl2ZS52ZXJzaW9uID0gdmVyc2lvbgogICAgICAgIHRyeToKICAgICAgICAgICAgYXJjaGl2ZS5zYXZlKG91dHB1dCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KCdDb3VsZCBub3Qgc2F2ZSBhcmNoaXZlIGZpbGU6IHswfScuZm9ybWF0KGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBlbGlmIGFyZ3VtZW50cy5leHRyYWN0OgogICAgICAgICMgRWl0aGVyIGV4dHJhY3QgdGhlIGdpdmVuIGZpbGVzLCBvciBhbGwgZmlsZXMgaWYgbm8gZmlsZXMgYXJlIGdpdmVuLgogICAgICAgIGlmIGxlbihhcmd1bWVudHMuZmlsZXMpID4gMDoKICAgICAgICAgICAgZmlsZXMgPSBhcmd1bWVudHMuZmlsZXMKICAgICAgICBlbHNlOgogICAgICAgICAgICBmaWxlcyA9IGFyY2hpdmUubGlzdCgpCgogICAgICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgaWYgbm90IHByZXNlbnQuCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKG91dHB1dCk6CiAgICAgICAgICAgIG9zLm1ha2VkaXJzKG91dHB1dCkKCiAgICAgICAgIyBJdGVyYXRlIG92ZXIgZmlsZXMgdG8gZXh0cmFjdC4KICAgICAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZXM6CiAgICAgICAgICAgIGlmIGZpbGVuYW1lLmZpbmQoJz0nKSAhPSAtMToKICAgICAgICAgICAgICAgIChvdXRmaWxlLCBmaWxlbmFtZSkgPSBmaWxlbmFtZS5zcGxpdCgnPScsIDIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBvdXRmaWxlID0gZmlsZW5hbWUKCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gYXJjaGl2ZS5yZWFkKGZpbGVuYW1lKQoKICAgICAgICAgICAgICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgZm9yIGZpbGUgaWYgbm90IHByZXNlbnQuCiAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguam9pbihvdXRwdXQsIG91dGZpbGUpKSk6CiAgICAgICAgICAgICAgICAgICAgb3MubWFrZWRpcnMob3MucGF0aC5kaXJuYW1lKG9zLnBhdGguam9pbihvdXRwdXQsIG91dGZpbGUpKSkKCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKG91dHB1dCwgb3V0ZmlsZSksICd3YicpIGFzIGZpbGU6CiAgICAgICAgICAgICAgICAgICAgZmlsZS53cml0ZShjb250ZW50cykKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoJ0NvdWxkIG5vdCBleHRy
set rpatool6=YWN0IGZpbGUgezB9IGZyb20gYXJjaGl2ZTogezF9Jy5mb3JtYXQoZmlsZW5hbWUsIGUpLCBmaWxlPXN5cy5zdGRlcnIpCiAgICBlbGlmIGFyZ3VtZW50cy5saXN0OgogICAgICAgICMgUHJpbnQgdGhlIHNvcnRlZCBmaWxlIGxpc3QuCiAgICAgICAgbGlzdCA9IGFyY2hpdmUubGlzdCgpCiAgICAgICAgbGlzdC5zb3J0KCkKICAgICAgICBmb3IgZmlsZSBpbiBsaXN0OgogICAgICAgICAgICBwcmludChmaWxlKQogICAgZWxzZToKICAgICAgICBwcmludCgnTm8gb3BlcmF0aW9uIGdpdmVuIDooJykKICAgICAgICBwcmludCgnVXNlIHswfSAtLWhlbHAgZm9yIHVzYWdlIGRldGFpbHMuJy5mb3JtYXQoc3lzLmFyZ3ZbMF0pKQoK
REM --------------------------------------------------------------------------------
REM SLDR Rogue-Like cheat.py (4864 chars max)
REM --------------------------------------------------------------------------------
set cheat1=aW1wb3J0IHJlCgp2ID0gIjIuMCIKdGFiID0gIiAiICogNApuZXdsaW5lID0gIlxuIgoKIz09PT09PT09PT09PT0gIC4vc2NyaXB0cy9pbnRlcmZhY2VzL21haW5fbWVudS5ycHkgPT09PT09PT09CmRlZiBtYWluX21lbnUoKToKICAgIGZuPSIuL3NjcmlwdHMvaW50ZXJmYWNlcy9tYWluX21lbnUucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgIHBhdHQ9JyAgICB0ZXh0ICJcW2NvbmZpZy52ZXJzaW9uXF0iIGFuY2hvciBcKDEuMCwgMC41XCkgcG9zIFwoMC4xNTcsIDAuOTZcKTpbXHJcbl0rICtzaXplIDI1JwogICAgcmVwbD0nICAgIHRleHQgIltjb25maWcudmVyc2lvbl0iIGFuY2hvciAoMS4wLCAwLjUpIHBvcyAoMC4xNTcsIDAuOTYpOlxuICAgICAgICBzaXplIDI1XG4gICAgZnJhbWU6XG4gICAgICAgIHhhbGlnbiAuNVxuICAgICAgICB5YWxpZ24gMFxuICAgICAgICB0ZXh0KCJDaGVhdHMgZW5hYmxlZCEiKScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCm1haW5fbWVudSgpCgojPT09PT09PT09PT09PSAgLi9zY3JpcHRzL2ludGVyZmFjZXMvYmFzZS5ycHkgPT09PT09PT09CmRlZiBxdWlja19tZW51KCk6CiAgICBmbj0iLi9zY3JpcHRzL2ludGVyZmFjZXMvYmFzZS5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD0nICAgICAgICB0ZXh0YnV0dG9uIF9cKCJRLkxvYWQiXCk6W1xyXG5dKyAgICAgICAgICAgIGFjdGlvbiBRdWlja0xvYWRcKFwpJwogICAgcmVwbD0nICAgICAgICB0ZXh0YnV0dG9uIF8oIlEuTG9hZCIpOlxuICAgICAgICAgICAgYWN0aW9uIFF1aWNrTG9hZCgpXG5cbiAgICAgICAgdGV4dGJ1dHRvbiBfKCJDaGVhdFYnK3YrJyIpOlxuICAgICAgICAgICAgYWN0aW9uIE51bGxBY3Rpb24oKScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCnF1aWNrX21lbnUoKQoKIz09PT09PT09PT09PT0gY29uZmlnLnJweSA9PT09PT09PT0KZGVmIGNvbmZpZygpOgogICAgZm49Ii4vc2NyaXB0cy9iYXNlL2NvbmZpZy5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgZmMgPSBmYy5yZXBsYWNlKCdjb25maWcuZGV2ZWxvcGVyID0gImF1dG8iJywgJ2NvbmZpZy5kZXZlbG9wZXIgPSAiYXV0byJcbmRlZmluZSBjb25maWcuY29uc29sZSA9IFRydWUnKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKY29uZmlnKCkKCiM9PT09PT09PT09PT09ICAuL3NjcmlwdHMvbWVjaGFuaWNzL3V0aWxpdGllcy5ycHkgPT09PT09PT09CmRlZiB1dGlsaXRpZXMoKToKICAgIGZuPSIuL3NjcmlwdHMvbWVjaGFuaWNzL3V0aWxpdGllcy5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgcGF0dD0nKD9QPHRhYnM+ICspZGVmIHVuaXF1ZVwob3JpZ2luYWxcKTonCiAgICByZXBsPScgICAgZGVmIHJlbW92ZUNoZWF0aW5nKEMpOlxyXG4gICAgICAgIEMuSGlzdG9yeS5yZW1vdmUoImNoZWF0ZWRfb25fZmxpcnRpbmdfaW5fcHVibGljIilcclxuICAgICAgICBDLkhpc3RvcnkucmVtb3ZlKCJjaGVhdGVkX29uX2RhdGUiKVxyXG4gICAgICAgIEMuSGlzdG9yeS5yZW1vdmUoImNoZWF0ZWRfb25fcmVsYXRpb25zaGlwIilcclxuICAgICAgICBpZiBDLkhpc3RvcnkucGVybWFuZW50LmdldCgiY2hlYXRlZF9vbl9mbGlydGluZ19pbl9wdWJsaWMiKTpcclxuICAgICAgICAgICAgZGVsIEMuSGlzdG9yeS5wZXJtYW5lbnRbImNoZWF0ZWRfb25fZmxpcnRpbmdfaW5fcHVibGljIl1cclxuICAgICAgICBpZiBDLkhpc3RvcnkucGVybWFuZW50LmdldCgiY2hlYXRlZF9vbl9kYXRlIik6XHJcbiAgICAgICAgICAgIGRlbCBDLkhpc3RvcnkucGVybWFuZW50WyJjaGVhdGVkX29uX2RhdGUiXVxyXG4gICAgICAgIGlmIEMuSGlzdG9yeS5wZXJtYW5lbnQuZ2V0KCJjaGVhdGVkX29uX3JlbGF0aW9uc2hpcCIpOlxyXG4gICAgICAgICAgICBkZWwgQy5IaXN0b3J5LnBlcm1hbmVudFsiY2hlYXRlZF9vbl9yZWxhdGlvbnNoaXAiXVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIGZvciBvdGhlcl9DIGluIGFsbF9Db21wYW5pb25zOlxyXG4gICAgICAgICAgICBQbGF5ZXIuSGlzdG9yeS5yZW1vdmUoZiJjaGVhdGVkX29uX3tDLnRhZ31fd2l0aF97b3RoZXJfQy50YWd9X2ZsaXJ0aW5nX2luX3B1YmxpYyIpXHJcbiAgICAgICAgICAgIFBsYXllci5IaXN0b3J5LnJlbW92ZShmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fZGF0ZSIpXHJcbiAgICAgICAgICAgIFBsYXllci5IaXN0b3J5LnJlbW92ZShmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fcmVsYXRpb25zaGlwIilcclxuICAgICAgICAgICAgaWYgUGxheWVyLkhpc3RvcnkucGVybWFuZW50LmdldChmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fZmxpcnRpbmdfaW5fcHVibGljIik6XHJcbiAgICAgICAgICAgICAgICBkZWwgUGxheWVyLkhpc3RvcnkucGVybWFuZW50W2YiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9mbGlydGluZ19pbl9wdWJsaWMiXVxyXG4gICAgICAgICAgICBpZiBQbGF5ZXIuSGlzdG9yeS5wZXJtYW5lbnQuZ2V0KGYiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9kYXRlIik6XHJcbiAgICAgICAgICAgICAgICBkZWwgUGxheWVyLkhpc3RvcnkucGVybWFuZW50W2YiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9kYXRlIl1cclxuICAgICAgICAgICAgaWYgUGxheWVyLkhpc3RvcnkucGVybWFuZW50LmdldChmImNoZWF0ZWRfb25fe0MudGFnfV93aXRoX3tvdGhlcl9DLnRhZ31fcmVsYXRpb25zaGlwIik6XHJcbiAgICAgICAgICAgICAgICBkZWwgUGxheWVyLkhpc3RvcnkucGVybWFuZW50W2YiY2hlYXRlZF9vbl97Qy50YWd9X3dpdGhfe290aGVyX0MudGFnfV9yZWxhdGlvbnNoaXAiXVxyXG4gICAgICAgIHJldHVyblxyXG5cclxuXGc8dGFicz5kZWYgdW5pcXVlKG9yaWdpbmFsKTonCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICBwYXR0PScoP1A8dGFicz4gKylkZWYgdW5pcXVlXChvcmlnaW5hbFwpOicKICAgIHJlcGw9J1xnPHRhYnM+ZGVmIGFkZEFiaWxpdHlQb2ludHMocCk6XHJcbiAgICAgICAgaWYgbm90IGhhc2F0dHIoUGxheWVyLCAiYWJpbGl0eV9wb2ludHMiKTpcclxuICAgICAgICAgICAgUGxheWVyLmFiaWxpdHlfcG9pbnRzID0gMFxyXG4gICAgICAgIGlmIHAgPiAwOlxyXG4gICAgICAgICAgICBQbGF5ZXIuYWJpbGl0eV9wb2ludHMgKz0g
set cheat2=cFxyXG5cclxuXGc8dGFicz5kZWYgdW5pcXVlKG9yaWdpbmFsKTonCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgp1dGlsaXRpZXMoKQoKIz09PT09PT09PT09IC4vc2NyaXB0cy9iYXNlL3BsYXllci5ycHkKZGVmIGJhc2VQbGF5ZXIoKToKICAgIGZuPSIuL3NjcmlwdHMvYmFzZS9wbGF5ZXIucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQogICAgCiAgICBwYXR0PScoP1A8dGFicz4gKylwb2ludHMgLT0gYWxsX2FiaWxpdGllc1xbYWJpbGl0eVxdXFsiY29zdCJcXScKICAgIHJlcGw9J1xnPHRhYnM+cG9pbnRzIC09IGFsbF9hYmlsaXRpZXNbYWJpbGl0eV1bImNvc3QiXVxyXG5cclxuICAgICAgICAgICAgaWYgaGFzYXR0cihzZWxmLCAiYWJpbGl0eV9wb2ludHMiKTpcclxuICAgICAgICAgICAgICAgIHBvaW50cyArPSBzZWxmLmFiaWxpdHlfcG9pbnRzJwogICAgCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCmJhc2VQbGF5ZXIoKQoKCiM9PT09PT09PT09PT09ICAuL3NjcmlwdHMvaW50ZXJmYWNlcy9QbGF5ZXJfbWVudS5ycHkgPT09PT09PT09CmRlZiBwbGF5ZXJfbWVudSgpOgogICAgZm49Ii4vc2NyaXB0cy9pbnRlcmZhY2VzL1BsYXllcl9tZW51LnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjdHVybnMgdGV4dCBjYXNoIG51bWJlciBpbnRvIHRleHRidXR0b24KICAgIHBhdHQ9JyAgICB0ZXh0ICJcJFxbUGxheWVyXC5jYXNoXF0iICg/UDxwb3M+YW5jaG9yIFwoWzAtOS5dKywgWzAtOS5dK1wpIHBvcyBcKFswLTkuXSssIFswLTkuXStcKSk6W1xyXG5dKyAgICAgICAgc2l6ZSAoP1A8c2l6ZT5bMC05XSspJwogICAgcmVwbD0nICAgIHRleHRidXR0b24gIntzaXplPVxnPHNpemU+fSIgKyAiJFtQbGF5ZXIuY2FzaF0iIFxnPHBvcz46XHJcbiAgICAgICAgYWN0aW9uIFNldFZhcmlhYmxlKCJQbGF5ZXIuY2FzaCIsIFBsYXllci5jYXNoICsgNTAwMDApJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI3R1cm5zIHRleHQgZm9yIGFiaWxpdHkgcG9pbnRzIGludG8gdGV4dCBidXR0b24KICAgIHBhdHQ9JyAgICB0ZXh0ICJcW1BsYXllci5za2lsbF9wb2ludHNcXSIgKD9QPHBvcz5hbmNob3IgXChbMC05Ll0rLCBbMC05Ll0rXCkgcG9zIFwoWzAtOS5dKywgWzAtOS5dK1wpKTpbXHJcbl0rICAgICAgICBmb250ICIoP1A8Zm9udD5bYS16QS1aX10rXC5bYS16QS1aXXszLDZ9KSJbIFxyXG5dKyAgICAgICAgc2l6ZSAoP1A8c2l6ZT5bMC05XSspJwogICAgcmVwbD0nICAgIHRleHRidXR0b24gIntzaXplPVxnPHNpemU+fXtmb250PVxnPGZvbnQ+fSIgKyAiW1BsYXllci5za2lsbF9wb2ludHNdIiBcZzxwb3M+OlxuICAgICAgICBhY3Rpb24gRnVuY3Rpb24oYWRkQWJpbGl0eVBvaW50cywgNSknIAogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI2FsbG93cyBmb3IgZHJhZ2dhYmxlIHBsYXllciB4cCBiYXIKICAgIHBhdHQ9J3ZhbHVlIFwoUGxheWVyXC5YUCAtIFBsYXllclwuWFBfZ29hbFwvMVwuNzVcKSByYW5nZSBcKFBsYXllclwuWFBfZ29hbCAtIFBsYXllclwuWFBfZ29hbFwvMVwuNzVcKScKICAgIHJlcGw9J3ZhbHVlIEZpZWxkVmFsdWUoUGxheWVyLCAiWFAiLCBQbGF5ZXIuWFBfZ29hbCkgcmFuZ2UgKFBsYXllci5YUF9nb2FsKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICN0dXJucyB0ZXh0IGZvciBib3RoIGxvdmUgYW5kIHRydXN0IGludG8gdGV4dGJ1dHRvbnMKICAgIHBhdHQ9Jyg/UDx0YWJzMT4gKyl0ZXh0ICJcW3JlbGF0aW9uc2hpcHNfRW50cnlcLig/UDxsdD5sb3ZlfHRydXN0KVxdIig/UDxwb3M+IGFuY2hvciBcKFswLTkuXSssIFswLTkuXStcKSBwb3MgXCgwXC5bMC05XSssIDBcLlswLTldK1wpKTpbIFxyXG5dK2ZvbnQgIig/UDxmb250PlthLXpBLVpfXStcLlthLXpBLVpdezMsNn0pIlsgXHJcbl0rc2l6ZSAoP1A8c2l6ZT5bMC05XSspWyBcclxuXStjb2xvciAiW2EtejAtOSNdKyInCiAgICByZXBsPSdcZzx0YWJzMT50ZXh0YnV0dG9uICJ7c2l6ZT1cZzxzaXplPn17Zm9udD1cZzxmb250Pn0iICsgIltyZWxhdGlvbnNoaXBzX0VudHJ5LlxnPGx0Pl0iXGc8cG9zPjpcclxuXGc8dGFiczE+ICAgIGFjdGlvbiBTZXRGaWVsZChyZWxhdGlvbnNoaXBzX0VudHJ5LCAiXGc8bHQ+IiwgcmVsYXRpb25zaGlwc19FbnRyeS5cZzxsdD4gKyAxMDApJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCiAgIAogICAgI3R1cm4gZW1vdGlvbiBpY29ucyBpbnRvIGJ1dHRvbnMgdG8gdHVybiBvZmYgc2FpZCBzdGF0dXMKICAgICNwYXR0PScoP1A8dGFiczE+ICspYWRkICg/UDxmPmY/KSJpbWFnZXMvaW50ZXJmYWNlcy9QbGF5ZXJfbWVudS9yZWxhdGlvbnNoaXBzXyg/UDxzdGF0dXM+bWFkfGhvcm55fG55bXBob3xcW3N0YXR1c1xdKVwud2VicCIgem9vbSBoaWdoX3Jlc29sdXRpb25faW50ZXJmYWNlX2FkanVzdG1lbnQnCiAgICAjcmVwbD0nXGc8dGFiczE+aW1hZ2VidXR0b24gaWRsZSBcZzxmPiJpbWFnZXMvaW50ZXJmYWNlcy9QbGF5ZXJfbWVudS9yZWxhdGlvbnNoaXBzX1xnPHN0YXR1cz4ud2VicCIgYWN0aW9uIFNldERpY3QocmVsYXRpb25zaGlwc19FbnRyeS5zdGF0dXMsIFxnPGY+IlxnPHN0YXR1cz4iLCAwKScKICAgICNyZXBsPSdcZzx0YWJzMT5pbWFnZWJ1dHRvbiBpZGxlIFxnPGY+ImltYWdlcy9pbnRlcmZhY2VzL1BsYXllcl9tZW51L3JlbGF0aW9uc2hpcHNfXGc8c3RhdHVzPi53ZWJwIjpcclxuXGc8dGFiczE+ICAgIGF0IHRyYW5zZm9ybTpcclxuXGc8dGFiczE+ICAgICAgICB6b29tIGhpZ2hfcmVzb2x1dGlvbl9pbnRlcmZhY2VfYWRqdXN0bWVudFxyXG5cZzx0YWJzMT4gICAgYWN0aW9uIFNldERpY3QocmVsYXRpb25zaGlwc19FbnRyeS5zdGF0dXMsIFxnPGY+IlxnPHN0YXR1cz4iLCAwKScKICAgICNmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICAjYWRhcHRzIHRoZSByZWxhdGlvbnNoaXBzX3N0YXR1cygpIHRvIGhhdmUgY2hhcmFjdGVyIGFzIGEgcGFyYW1ldGVyIGZvciBtb29kIGNoYW5naW5nCiAgICBwYXR0PSdzY3JlZW4gcmVsYXRpb25zaGlwc19zdGF0dXNcKHN0YXR1cywgXCpcKnByb3BlcnRpZXNcKTonCiAgICByZXBsPSdzY3JlZW4gcmVsYXRpb25zaGlwc19zdGF0dXMoc3RhdHVzLCBjLCAqKnByb3BlcnRpZXMpOicKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICNzZXR0aW5nIHRoZSByZWxhdGlvbnNoaXBzX3N0YXR1cygpIGZ1bmN0aW9uIHRvIGluc2VydCB0aGUgdGV4dCBhcyBhIHRleHQgYnV0dG9uIHRvIHR1cm4gb2ZmIG1vb2Qgc3RhdHVzZXMKICAg
set cheat3=IHBhdHQ9Jyg/UDx0MT4gKyl0ZXh0ICJcW3N0YXR1cy51cHBlclwoXClcXSIgYW5jaG9yIFwoMFwuNSwgMFwuNVwpIHBvcyBcKDBcLjUsIDBcLjg1XCk6W1xyXG5dKyg/UDx0Mj4gKylzaXplIHByb3BlcnRpZXNcLmdldFwoInRleHRfc2l6ZSIsIDE2XCkoP1A8YnI+W1xyXG4gXSspY29sb3IgcHJvcGVydGllc1wuZ2V0XCgidGV4dF9jb2xvciIsICIjMDAwMDAwIlwpJwogICAgcmVwbD0nXGc8dDE+dGV4dGJ1dHRvbiAie3NpemU9W3Byb3BlcnRpZXMuZ2V0KFxcInRleHRfc2l6ZVxcIiwgMTYpXX17Y29sb3I9W3Byb3BlcnRpZXMuZ2V0KFxcInRleHRfY29sb3JcXCIsIFxcIiMwMDAwMDBcXCIpXX0iICsgIltzdGF0dXMudXBwZXIoKV0iIGFuY2hvciAoMC41LCAwLjUpIHBvcyAoMC41LCAwLjg1KTpcclxuXGc8dDI+YWN0aW9uIFNldERpY3QoYy5zdGF0dXMsIHN0YXR1cywgMCknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKICAgIAogICAgI2FkZGluZyB0aGUgY2hhcmFjdGVyIGludG8gdGhlIHJlbGF0aW9uc2hpcHNfc3RhdHVzKCkgY2FsbAogICAgcGF0dD0nKD9QPHQxPiB7Mix9KXVzZSByZWxhdGlvbnNoaXBzX3N0YXR1c1woW1xyXG5dKyg/UDx0Mj4gezIsfSkoP1A8c3RhdHVzPlthLXpBLVoiXSspLFtcclxuXSsnCiAgICByZXBsPSdcZzx0MT51c2UgcmVsYXRpb25zaGlwc19zdGF0dXMoXHJcblxnPHQyPlxnPHN0YXR1cz4sXHJcblxnPHQyPnJlbGF0aW9uc2hpcHNfRW50cnksXHJcbicKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKCiAgICAjYWRkaW5nIGJ1dHRvbiB0aGF0IGFsbG93cyBmb3IgcmVtb3ZhbCBvZiBjaGVhdGluZwogICAgIyAgICAgICAgdGV4dCAiUkVMQVRJT05TSElQIFNUQVRVUyIgYW5jaG9yICgwLjAsIDAuNSkgcG9zICgwLjQ5NSwgMC4yOTcpOgogICAgcGF0dD0nICAgICAgICB0ZXh0ICJSRUxBVElPTlNISVAgU1RBVFVTIiBhbmNob3IgXCgwXC4wLCAwXC41XCkgcG9zIFwoKD9QPHBvc1g+WzAtOS5dKyksICg/UDxwb3NZPlswLTkuXSspXCk6W1xyXG5dKyAgICAgICAgICAgIGZvbnQgImFnZW5jeV9mYlwudHRmIltcclxuXStbXHJcbl0rICAgICAgICAgICAgc2l6ZSAyOCcKICAgIHJlcGw9JyAgICAgICAgdGV4dGJ1dHRvbiAie3NpemU9Mjh9e2ZvbnQ9YWdlbmN5X2ZiLnR0Zn0gUkVMQVRJT05TSElQIFNUQVRVUyIgYW5jaG9yICgwLjAsIDAuNSkgcG9zIChcZzxwb3NYPiwgXGc8cG9zWT4pOlxyXG4gICAgICAgICAgICBhY3Rpb24gRnVuY3Rpb24ocmVtb3ZlQ2hlYXRpbmcsIHJlbGF0aW9uc2hpcHNfRW50cnkpJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI2ZyaWVuZHNoaXAgaXMgdGhlIGJlc3QgdGhpbmcgZXZlciEgKGFsbG93cyBmb3IgY2xpY2tpbmcgb24gZnJpZW5kc2hpcCB0byBpbmNyZWFzZSBpdCBieSA1MCkKICAgIHBhdHQ9Jyg/UDx0YWJzPiArKWFkZCAiaW1hZ2VzL2ludGVyZmFjZXMvcGhvdG9zL1xbQ1xdXC53ZWJwIiBhbGlnbiAoP1A8YWxnbj5cKFthLXowLTksLiBdK1wpKSB6b29tICg/UDx6b29tPjBcLlswLTldKyknCiAgICByZXBsPSdcZzx0YWJzPmltYWdlYnV0dG9uIGlkbGUgZiJpbWFnZXMvaW50ZXJmYWNlcy9waG90b3Mve0N9LndlYnAiIGFsaWduIFxnPGFsZ24+OlxuXGc8dGFicz4gICAgYXQgdHJhbnNmb3JtOlxuXGc8dGFicz4gICAgICAgIHpvb20gMC4xM1xyXG5cZzx0YWJzPiAgICBhY3Rpb24gU2V0RGljdChyZWxhdGlvbnNoaXBzX0VudHJ5LmZyaWVuZHNoaXAsIGYie0N9IiwgcmVsYXRpb25zaGlwc19FbnRyeS5mcmllbmRzaGlwW0NdICsgNTApJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKcGxheWVyX21lbnUoKQoKCiM9PT09PT09PT09PT09ICAuL3NjcmlwdHMvaW50ZXJmYWNlcy9zZXgucnB5ID09PT09PT09PQpkZWYgc2V4KCk6CiAgICBmbj0iLi9zY3JpcHRzL2ludGVyZmFjZXMvc2V4LnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjc2V0cyB0ZXh0IHN0YW1pbmEgaW50byB0ZXh0YnV0dG9uCiAgICBwYXR0PScgICAgICAgIHRleHQgIlxbUGxheWVyLnN0YW1pbmFcXSIgKD9QPHBvcz5hbmNob3IgXChbMC05Ll0rLCBbMC05Ll0rXCkgcG9zIFwoWzAtOS5dKywgWzAtOS5dK1wpKTpbIFxyXG5dKyAgICAgICAgICAgIHNpemUgKD9QPHNpemU+WzAtOV0rKScKICAgIHJlcGw9JyAgICAgICAgdGV4dGJ1dHRvbiAie3NpemU9XGc8c2l6ZT59IiArICJbUGxheWVyLnN0YW1pbmFdIiBcZzxwb3M+OlxuICAgICAgICAgICAgYWN0aW9uIFNldFZhcmlhYmxlKCJQbGF5ZXIuc3RhbWluYSIsIFBsYXllci5tYXhfc3RhbWluYSArIFBsYXllci5zdGFtaW5hKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICNhcyBvZiB2MC42YiwgdGhlIGxvdmUgaW50ZXJlc3QgaGFzIG5vIHN0YW1pbmEgc3RhdAogICAgI3BhdHQ9JyAgICAgICAgdGV4dCAiXFtDaGFyYWN0ZXIuc3RhbWluYVxdIiAoP1A8cG9zPmFuY2hvciBcKFswLTkuXSssIFswLTkuXStcKSBwb3MgXChbMC05Ll0rLCBbMC05Ll0rXCkpOlsgXHJcbl0rICAgICAgICAgICAgc2l6ZSAoP1A8c2l6ZT5bMC05XSspJwogICAgI3JlcGw9JyAgICAgICAgdGV4dGJ1dHRvbiAie3NpemU9XGc8c2l6ZT59IiArICJbQ2hhcmFjdGVyLnN0YW1pbmFdIiBcZzxwb3M+OlxuICAgICAgICAgICAgYWN0aW9uIFNldFZhcmlhYmxlKCJmb2N1c2VkX0NoYXJhY3Rlci5zdGFtaW5hIiwgZm9jdXNlZF9DaGFyYWN0ZXIubWF4X3N0YW1pbmEgKyBDaGFyYWN0ZXIuc3RhbWluYSknCiAgICAjZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgI3NldHMgcGxheWVyIGRlc2lyZSB2YWx1ZXMgaW50byBmaWVsZCB2YWx1ZXMsIGFrYSwgaW50ZXJhY3RhYmxlIHNsaWRpbmcgYmFycwogICAgcGF0dD0ndmFsdWUgUGxheWVyLmRlc2lyZScKICAgIHJlcGw9J3ZhbHVlIEZpZWxkVmFsdWUoUGxheWVyLCAiZGVzaXJlIiwgMTAwKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgICNjaGFyYWN0ZXIgZGVzaXJlIHdhcyByZWRlc2lnbmVkIGluIDAuNmIuIFRoZSBiYXIgd2FzIHNwbGl0IGludG8gMi4gT25lIGF0IGJlbG93IDEuMCBhbmQgb25lIGF0IGFuZCBhYm92ZSAxLjAKICAgIHBhdHQ9J3ZhbHVlIENoYXJhY3Rlci5kZXNpcmUgcmFuZ2UgMS4wJwogICAgcmVwbD0ndmFsdWUgRGljdFZhbHVlKENoYXJhY3Rlci5kZXNpcmVzLCAib3JnYXNtIiwgcmFuZ2U9MS4wLCBzdGVwPTAuMSknCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKICAgIAogICAgcGF0dD0ndmFsdWUgQ2hhcmFjdGVyXC5kZXNpcmVzXFsib3JnYXNtIlxdIHJhbmdlIDFcLjAnCiAgICByZXBsPSd2YWx1ZSBEaWN0VmFsdWUoQ2hhcmFjdGVyLmRlc2lyZXMsICJvcmdhc20iLCByYW5nZT0xLjAsIHN0ZXA9MC4xKScKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBm
set cheat4=bGFncz1yZS5NKQoKCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgpzZXgoKQoKIz09PT09PT09PT09IC4vc2NyaXB0cy9tZWNoYW5pY3MvYXBwcm92YWwucnB5CmRlZiBhcHByb3ZhbCgpOgogICAgZm49Ii4vc2NyaXB0cy9tZWNoYW5pY3MvYXBwcm92YWwucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICNicmVha3MgYXBwcm92YWwgbGltaXQKICAgIHBhdHQ9J1swLTldezMsfSwnCiAgICByZXBsPSc5OTk5OSwnCgogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgcGF0dD0nLCBbMC05XXszLH1cXScKICAgIHJlcGw9JywgOTk5OTldJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKYXBwcm92YWwoKQoKCiMjPT09PT09PT09PT0gYWxsb3dpbmcgc2V4IGluIHB1YmxpYy4gUHJvcHMgdG8gUm9uQ2hvbi4gMiBDaGVja3MgaW4gcGxhY2UgdG8gcHJldmVudCB0aGlzLgojIyBEaWQgSSBkbyB0aGlzIGJlY2F1c2UgZGFya3N0ZWwgY291bGRuJ3QgZ2V0IG92ZXIgaGltc2VsZj8gWWVwLiBJcyBpdCBhIGJpdCBpbW1hdHVyZT8gWWVwLiBEbyBJIGZlZWwgYXNoYW1lZD8gTm9wZS4gSWYgeW91IGRvbid0IHdhbnQgY29kZSB0byBjaGFuZ2UsIGRvbid0IHBva2UgYSBwcm9ncmFtbWVyLgojIz09PT09PT09PT09IC4vc2NyaXB0cy9zZXgvcmVxdWVzdC5ycHkKIz09PT09PT09PT09IC4vc2NyaXB0cy9tZWNoYW5pY3MvYXBwcm92YWwucnB5CmRlZiBhbGxvd1B1YmxpY1NleCgpOgogICAgZm49Ii4vc2NyaXB0cy9zZXgvcmVxdWVzdC5ycHkiCiAgICB3aXRoIG9wZW4oZm4sICJyIikgYXMgZmlsZToKICAgICAgICBmYyA9IGZpbGUucmVhZCgpCgogICAgI3NraXBzIGJlZHJvb20gY2hlY2sgZm9yIHBsYWNlIHRvIGhhdmUgc2V4CiAgICBwYXR0PSdcKFBsYXllclwubG9jYXRpb24gbm90IGluIGJlZHJvb21zIGFuZCAiYmdfc2hvd2VyIiBub3QgaW4gUGxheWVyXC5sb2NhdGlvblwpIG9yIGxlblwoUHJlc2VudFwpID4gMScKICAgIHJlcGw9J0ZhbHNlJwogICAgZmMgPSByZS5zdWIocGF0dCwgcmVwbCwgZmMsIGZsYWdzPXJlLk0pCgogICAgd2l0aCBvcGVuKGZuLCAidyIpIGFzIGZpbGU6CiAgICAgICAgZmlsZS53cml0ZShmYykKCiAgICBwcmludChmIntmbn0gcGF0Y2hlZCIpCgoKICAgIGZuPSIuL3NjcmlwdHMvaW50ZXJmYWNlcy9pbnRlcmFjdGlvbnMucnB5IgogICAgd2l0aCBvcGVuKGZuLCAiciIpIGFzIGZpbGU6CiAgICAgICAgZmMgPSBmaWxlLnJlYWQoKQoKICAgICNza2lwcyBiZWRyb29tIGNoZWNrcyBhbmQgbnVtYmVyIG9mIHBlb3BsZSBjaGVja3MgZm9yIHBsYWNlIHRvIGhhdmUgc2V4IEdVSQogICAgcGF0dD0naWYgYXBwcm92YWxfY2hlY2tcKENoYXJhY3RlciwgdGhyZXNob2xkID0gImhvb2t1cCJcKSBhbmQgbGVuXChQcmVzZW50XCkgPT0gMSBhbmQgUGxheWVyLmxvY2F0aW9uIGluIFxbQ2hhcmFjdGVyLmhvbWUsIFBsYXllci5ob21lXF0gYW5kIG5vdCBnZXRfUHJlc2VudFwobG9jYXRpb24gPSBQbGF5ZXIubG9jYXRpb24ucmVwbGFjZVwoIl8iLCAiX3Nob3dlcl8iXClcKVxbMFxdJwogICAgcmVwbD0naWYgYXBwcm92YWxfY2hlY2soQ2hhcmFjdGVyLCB0aHJlc2hvbGQgPSAiaG9va3VwIikgYW5kIGxlbihQcmVzZW50KSA+PSAxJwoKICAgIGZjID0gcmUuc3ViKHBhdHQsIHJlcGwsIGZjLCBmbGFncz1yZS5NKQoKICAgIHdpdGggb3BlbihmbiwgInciKSBhcyBmaWxlOgogICAgICAgIGZpbGUud3JpdGUoZmMpCgogICAgcHJpbnQoZiJ7Zm59IHBhdGNoZWQiKQoKYWxsb3dQdWJsaWNTZXgoKQoKCiM9PT09PT09PT09PSAuL3NjcmlwdHMvbWVjaGFuaWNzL21vdmVtZW50LnJweQpkZWYgbW92ZW1lbnQoKToKICAgIGZuPSIuL3NjcmlwdHMvbWVjaGFuaWNzL21vdmVtZW50LnJweSIKICAgIHdpdGggb3BlbihmbiwgInIiKSBhcyBmaWxlOgogICAgICAgIGZjID0gZmlsZS5yZWFkKCkKCiAgICAjY2hhcmFjdGVyIHdvbid0IHdpcGUgb2ZmIGN1bSB3aGVuIGV4aXRpbmcgYmVkIHJvb20gYWZ0ZXIgd2VhcmluZyBjdW0gMTAgdGltZXMKICAgIHBhdHQ9JyAgICAgICAgICAgICAgICBpZiB0ZW1wX0NoYXJhY3RlcnNcWzBcXVwuc3B1bmtcW2xvY2F0aW9uXF0nCiAgICByZXBsPScgICAgICAgICAgICAgICAgaWYgdGVtcF9DaGFyYWN0ZXJzWzBdLkhpc3RvcnkuY2hlY2soIndlYXJfY3VtIikgPCAxMCBhbmQgdGVtcF9DaGFyYWN0ZXJzWzBdLnNwdW5rW2xvY2F0aW9uXScKCiAgICBmYyA9IHJlLnN1YihwYXR0LCByZXBsLCBmYywgZmxhZ3M9cmUuTSkKCiAgICB3aXRoIG9wZW4oZm4sICJ3IikgYXMgZmlsZToKICAgICAgICBmaWxlLndyaXRlKGZjKQoKICAgIHByaW50KGYie2ZufSBwYXRjaGVkIikKCm1vdmVtZW50KCkKCgoKcHJpbnQoZiIgICAgU3VjY2VzcyEgQ2hlYXRzIGFyZSBub3cgZW5hYmxlZCEiKQo=
REM --------------------------------------------------------------------------------
REM !! DO NOT EDIT BELOW THIS LINE !!
REM --------------------------------------------------------------------------------
set "v=2.0"
title TNH Inject v%v%
:init
REM --------------------------------------------------------------------------------
REM Splash screen
REM --------------------------------------------------------------------------------
cls

echo  ----------------------------------------------------
echo.
echo  The Null Hypothesis Cheat Injector 
echo.             
echo   Vesrion: %v%
echo   by Sleepingkirby
echo   built on top of RL Cheat Injector by SLDR @ F95zone.com
echo  ----------------------------------------------------
echo.
echo.


REM --------------------------------------------------------------------------------
REM We need powershell for later, make sure it exists
REM --------------------------------------------------------------------------------
if not exist "%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe" (
	echo    ! Error: Powershell is required, unable to continue.
	echo             This is included in Windows 7, 8, 10. XP/Vista users can
	echo             download it here: http://support.microsoft.com/kb/968929
	echo.
	pause>nul|set/p=.            Press any key to exit...
	exit
)

REM --------------------------------------------------------------------------------
REM Set our paths, and make sure we can find python exe
REM --------------------------------------------------------------------------------
set "currentdir=%~dp0%"
set "pythondir=%currentdir%..\lib\py3-windows-x86_64\"
set "renpydir=%currentdir%..\renpy\"
set "gamedir=%currentdir%"
if exist "game" if exist "lib" if exist "renpy" (
	set "pythondir=%currentdir%lib\py3-windows-x86_64\"
	set "renpydir=%currentdir%renpy\"
	set "gamedir=%currentdir%game\"
)

if not exist "%pythondir%python.exe" (
	echo    ! Error: Cannot locate python.exe, unable to continue.
	echo             Are you sure we're in the game's root directory?
	echo.
	pause>nul|set/p=.            Press any key to exit...
	exit
)

:menu
REM --------------------------------------------------------------------------------
REM Menu selection
REM --------------------------------------------------------------------------------
set exitoption=
echo   Available Options:
echo     1) Apply cheat
echo     2) Quit
echo.
set /p option=.  Enter a number: 
echo.
echo  ----------------------------------------------------
echo.
if "%option%" == "2" (
    goto quit
)

if exist "%gamedir%scripts\interface\Player_menu.rpy.orig" (
echo Backup files found. This probably means it was already patched. No need to further action. Exitting...
)

echo No backup's found. Safe to progress.

REM --------------------------------------------------------------------------------
REM Write _rpatool.py from our base64 strings
REM --------------------------------------------------------------------------------
set "rpatool=%currentdir%_rpatool.py"
echo   Creating rpatool...
if exist "%rpatool%.tmp" (
	del "%rpatool%.tmp"
)
if exist "%rpatool%" (
	del "%rpatool%"
)

echo %rpatool1%>> "%rpatool%.tmp"
echo %rpatool2%>> "%rpatool%.tmp"
echo %rpatool3%>> "%rpatool%.tmp"
echo %rpatool4%>> "%rpatool%.tmp"
echo %rpatool5%>> "%rpatool%.tmp"
echo %rpatool6%>> "%rpatool%.tmp"
set "rpatoolps=%rpatool:[=`[%"
set "rpatoolps=%rpatoolps:]=`]%"
set "rpatoolps=%rpatoolps:^=^^%"
set "rpatoolps=%rpatoolps:&=^&%"
powershell.exe -nologo -noprofile -noninteractive -command "& { [IO.File]::WriteAllBytes(\"%rpatoolps%\", [Convert]::FromBase64String([IO.File]::ReadAllText(\"%rpatoolps%.tmp\"))) }"

echo.

REM --------------------------------------------------------------------------------
REM Unpack RPA
REM --------------------------------------------------------------------------------
echo   Searching for RPA packages
cd "%gamedir%"
set "PYTHONPATH=%pythondir%Lib"
for %%f in (*.rpa) do (
	echo    + Unpacking "%%~nf%%~xf" - %%~zf bytes
	"%pythondir%python.exe" -O "%rpatool%" -x "%%f"
)
echo.

REM --------------------------------------------------------------------------------
REM Clean up
REM --------------------------------------------------------------------------------
echo   Cleaning up temporary files...
del "%rpatool%.tmp"
del "%rpatool%"
echo.
if "%option%" == "2" (
	goto finish
)

:cheat
REM --------------------------------------------------------------------------------
REM Make sure cheat.py doesn't already exist
REM --------------------------------------------------------------------------------
set "cheat=%currentdir%_cheat.py"
echo   Creating cheat...
if exist "%cheat%.tmp" (
	del "%cheat%.tmp"
)
if exist "%cheat%" (
	del "%cheat%"
)

REM --------------------------------------------------------------------------------
REM Create cheat.py
REM --------------------------------------------------------------------------------
echo %cheat1%>> "%cheat%.tmp"
echo %cheat2%>> "%cheat%.tmp"
echo %cheat3%>> "%cheat%.tmp"
echo %cheat4%>> "%cheat%.tmp"
set "cheatps=%cheat:[=`[%"
set "cheatps=%cheatps:]=`]%"
set "cheatps=%cheatps:^=^^%"
set "cheatps=%cheatps:&=^&%"
powershell.exe -nologo -noprofile -noninteractive -command "& { [IO.File]::WriteAllBytes(\"%cheatps%\", [Convert]::FromBase64String([IO.File]::ReadAllText(\"%cheatps%.tmp\"))) }"

REM --------------------------------------------------------------------------------
REM Run cheat.py
REM --------------------------------------------------------------------------------
cd "%gamedir%"
"%pythondir%python.exe" -O "%cheat%"

echo.

REM --------------------------------------------------------------------------------
REM Delete temporary files
REM --------------------------------------------------------------------------------
echo   Cleaning up temporary files...
del "%cheat%.tmp"
del "%cheat%"
echo.
goto finish


:finish
REM --------------------------------------------------------------------------------
REM We are done
REM --------------------------------------------------------------------------------
echo  ----------------------------------------------------
echo.
echo    Finished!
echo.
echo    Enter "1" to go back to the menu, or any other
set /p exitoption=.   key to exit: 
echo.
echo  ----------------------------------------------------
echo.
if "%exitoption%"=="1" goto menu

:quit
exit
